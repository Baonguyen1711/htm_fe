{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\User\\\\Round2\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport Play from \"../../../layouts/Play\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Từ khóa chướng ngại vật\nconst mainKeyword = \"VIETTEL\";\nconst ObstacleQuestionBox = ({\n  obstacleWord\n}) => {\n  _s();\n  // Increased grid size\n  const GRID_SIZE = 15;\n  const generateEmptyGrid = () => {\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n  };\n  const [grid, setGrid] = useState(generateEmptyGrid());\n  const [revealedRows, setRevealedRows] = useState(Array(GRID_SIZE).fill(false));\n  const [revealedCols, setRevealedCols] = useState(Array(GRID_SIZE).fill(false));\n  const [hintWords, setHintWords] = useState([]);\n  useEffect(() => {\n    const wordList = [\"BƯUCHÍNH\", \"5G\", \"BQP\", \"TẬPĐOÀN\", \"HÀNỘI\", \"RED\"];\n    setHintWords(randomHintWords);\n    setGrid(newGrid);\n  }, []);\n\n  // Hàm toggle hiển thị hàng/cột\n  const toggleRow = rowIndex => {\n    setRevealedRows(prev => {\n      const newRevealed = [...prev];\n      newRevealed[rowIndex] = !newRevealed[rowIndex];\n      return newRevealed;\n    });\n  };\n  const toggleCol = colIndex => {\n    setRevealedCols(prev => {\n      const newRevealed = [...prev];\n      newRevealed[colIndex] = !newRevealed[colIndex];\n      return newRevealed;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[40px_repeat(15,40px)] gap-1\",\n      children: [Array.from({\n        length: GRID_SIZE\n      }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-10 h-10 bg-white\"\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this)), grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-10 h-10 bg-white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), row.map((cell, colIndex) => {\n          const isRevealed = revealedRows[rowIndex] && hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\") || revealedCols[colIndex] && hintWords.some(word => word.x === colIndex && word.direction === \"vertical\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-10 h-10 flex items-center justify-center text-lg font-semibold select-none \n                                    \n                                    ${!isNaN(Number(cell)) ? \"blue-500 font-bold \" : \"\"}\n                                    ${cell === \"\" ? \"bg-white border-none\" : \"border-gray-400 bg-gray-50\"} \n                                    ${isRevealed && isNaN(Number(cell)) ? \"text-black\" : isNaN(Number(cell)) ? \"text-transparent\" : \"text-blue-500\"}\n                                    ${obstacleWord.includes(cell) && isRevealed && isNaN(Number(cell)) ? \"font-bold text-red-500\" : \"\"}\n                                `,\n            onClick: () => {\n              if (hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\")) {\n                toggleRow(rowIndex);\n              } else if (hintWords.some(word => word.x === colIndex && word.direction === \"vertical\")) {\n                toggleCol(colIndex);\n              }\n            },\n            style: {\n              cursor: hintWords.some(word => word.y === rowIndex || word.x === colIndex) ? \"pointer\" : \"default\"\n            },\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 33\n          }, this);\n        })]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(ObstacleQuestionBox, \"0tXfE1RkmpIdWy/liPKPIQWuBnQ=\");\n_c = ObstacleQuestionBox;\nfunction Round2() {\n  return /*#__PURE__*/_jsxDEV(Play, {\n    questionComponent: /*#__PURE__*/_jsxDEV(ObstacleQuestionBox, {\n      obstacleWord: mainKeyword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 37\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 12\n  }, this);\n}\n_c2 = Round2;\nexport default Round2;\nvar _c, _c2;\n$RefreshReg$(_c, \"ObstacleQuestionBox\");\n$RefreshReg$(_c2, \"Round2\");","map":{"version":3,"names":["Play","React","useState","useEffect","jsxDEV","_jsxDEV","mainKeyword","ObstacleQuestionBox","obstacleWord","_s","GRID_SIZE","generateEmptyGrid","Array","fill","map","grid","setGrid","revealedRows","setRevealedRows","revealedCols","setRevealedCols","hintWords","setHintWords","wordList","randomHintWords","newGrid","toggleRow","rowIndex","prev","newRevealed","toggleCol","colIndex","className","children","from","length","_","fileName","_jsxFileName","lineNumber","columnNumber","row","Fragment","cell","isRevealed","some","word","y","direction","x","isNaN","Number","includes","onClick","style","cursor","_c","Round2","questionComponent","_c2","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/User/Round2/Round2.tsx"],"sourcesContent":["import Play from \"../../../layouts/Play\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { generateHintWords, renderGrid } from \"./utils\";\r\n\r\ninterface HintWord {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n    obstacleWord: string;\r\n}\r\n\r\ntype PlacedWord = {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n};\r\n\r\n// Từ khóa chướng ngại vật\r\nconst mainKeyword = \"VIETTEL\";\r\n\r\n\r\nconst ObstacleQuestionBox: React.FC<ObstacleQuestionBoxProps> = ({ obstacleWord }) => {\r\n\r\n    // Increased grid size\r\n    const GRID_SIZE = 15;\r\n\r\n    const generateEmptyGrid = () => {\r\n        return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\r\n    };\r\n    const [grid, setGrid] = useState<string[][]>(generateEmptyGrid());\r\n    const [revealedRows, setRevealedRows] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [revealedCols, setRevealedCols] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [hintWords, setHintWords] = useState<HintWord[]>([]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const wordList = [\"BƯUCHÍNH\", \"5G\", \"BQP\", \"TẬPĐOÀN\", \"HÀNỘI\", \"RED\"];\r\n        \r\n        setHintWords(randomHintWords);\r\n        setGrid(newGrid);\r\n    }, []);\r\n\r\n    // Hàm toggle hiển thị hàng/cột\r\n    const toggleRow = (rowIndex: number) => {\r\n        setRevealedRows((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[rowIndex] = !newRevealed[rowIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    const toggleCol = (colIndex: number) => {\r\n        setRevealedCols((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[colIndex] = !newRevealed[colIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6\">\r\n            <div className=\"grid grid-cols-[40px_repeat(15,40px)] gap-1\">\r\n                {/* Empty header for alignment */}\r\n                {/* <div className=\"w-10 h-10 bg-white\" /> */}\r\n                {Array.from({ length: GRID_SIZE }).map((_, colIndex) => (\r\n                    <div key={colIndex} className=\"w-10 h-10 bg-white\" />\r\n                ))}\r\n\r\n                {/* Grid with numbers and cells */}\r\n                {grid.map((row, rowIndex) => (\r\n                    <React.Fragment key={rowIndex}>\r\n                        <div className=\"w-10 h-10 bg-white\" /> \r\n                        {row.map((cell, colIndex) => {\r\n                            const isRevealed =\r\n                                (revealedRows[rowIndex] &&\r\n                                    hintWords.some(\r\n                                        (word) => word.y === rowIndex && word.direction === \"horizontal\"\r\n                                    )) ||\r\n                                (revealedCols[colIndex] &&\r\n                                    hintWords.some((word) => word.x === colIndex && word.direction === \"vertical\"));\r\n\r\n                            return (\r\n                                <div\r\n                                    key={colIndex}\r\n                                    className={`w-10 h-10 flex items-center justify-center text-lg font-semibold select-none \r\n                                    \r\n                                    ${!isNaN(Number(cell)) ? \"blue-500 font-bold \" : \"\"}\r\n                                    ${cell === \"\" ? \"bg-white border-none\" : \"border-gray-400 bg-gray-50\"} \r\n                                    ${isRevealed && isNaN(Number(cell)) ? \"text-black\" : isNaN(Number(cell)) ? \"text-transparent\" : \"text-blue-500\"}\r\n                                    ${obstacleWord.includes(cell) && isRevealed && isNaN(Number(cell)) ? \"font-bold text-red-500\" : \"\"}\r\n                                `}\r\n                                    onClick={() => {\r\n                                        if (hintWords.some((word) => word.y === rowIndex && word.direction === \"horizontal\")) {\r\n                                            toggleRow(rowIndex);\r\n                                        } else if (hintWords.some((word) => word.x === colIndex && word.direction === \"vertical\")) {\r\n                                            toggleCol(colIndex);\r\n                                        }\r\n                                    }}\r\n                                    style={{\r\n                                        cursor: hintWords.some((word) => word.y === rowIndex || word.x === colIndex)\r\n                                            ? \"pointer\"\r\n                                            : \"default\",\r\n                                    }}\r\n                                >\r\n                                    {cell}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </React.Fragment>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nfunction Round2() {\r\n    return <Play questionComponent={<ObstacleQuestionBox obstacleWord={mainKeyword} />} />;\r\n}\r\n\r\nexport default Round2;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}