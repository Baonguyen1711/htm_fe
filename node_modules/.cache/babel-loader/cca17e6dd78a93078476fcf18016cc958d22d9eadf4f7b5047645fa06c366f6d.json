{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\Host\\\\Management\\\\HostRound2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n\n// Initialize word bank based on user input\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst wordBank = [{\n  word: \"GIÓ\",\n  x: -1,\n  y: -1,\n  dir: 0,\n  char: [\"G\", \"I\", \"Ó\"],\n  totalMatches: 0,\n  successfulMatches: []\n}, {\n  word: \"HẠT GIỐNG\",\n  x: -1,\n  y: -1,\n  dir: 0,\n  char: [\"H\", \"Ạ\", \"T\", \" \", \"G\", \"I\", \"Ố\", \"N\", \"G\"],\n  totalMatches: 0,\n  successfulMatches: []\n}, {\n  word: \"DREAM\",\n  x: -1,\n  y: -1,\n  dir: 0,\n  char: [\"D\", \"R\", \"E\", \"A\", \"M\"],\n  totalMatches: 0,\n  successfulMatches: []\n}, {\n  word: \"THUỐC\",\n  x: -1,\n  y: -1,\n  dir: 0,\n  char: [\"T\", \"H\", \"U\", \"Ố\", \"C\"],\n  totalMatches: 0,\n  successfulMatches: []\n}, {\n  word: \"CÚC\",\n  x: -1,\n  y: -1,\n  dir: 0,\n  char: [\"C\", \"Ú\", \"C\"],\n  totalMatches: 0,\n  successfulMatches: []\n}, {\n  word: \"CHÂU KIỆT LUÂN\",\n  x: -1,\n  y: -1,\n  dir: 0,\n  char: [\"C\", \"H\", \"Â\", \"U\", \" \", \"K\", \"I\", \"Ệ\", \"T\", \" \", \"L\", \"U\", \"Â\", \"N\"],\n  totalMatches: 0,\n  successfulMatches: []\n}];\nconst boardSize = 20;\n\n// Represents a word object with its position and direction\n\n// Function to create an empty board\nconst generateBoard = size => {\n  return Array(size).fill(null).map(() => Array(size).fill(\"\"));\n};\n\n// Prepare word bank from word array\nconst prepareWordBank = () => {\n  return wordBank.map((word, i) => {\n    return {\n      word: ` ${i + 1}${word} `,\n      x: -1,\n      y: -1,\n      dir: 0,\n      char: word.word.split(\"\"),\n      totalMatches: 0,\n      successfulMatches: []\n    };\n  });\n};\n\n// Apply placement logic to populate board\nconst populateBoard = (wordBank, board) => {\n  const wordsActive = [];\n  for (let i = 0; i < wordBank.length; i++) {\n    const isPlaced = addWordToBoard(wordBank[i], board, wordsActive);\n    if (!isPlaced) break; // Stop placing if a word fails\n  }\n  return wordsActive;\n};\n\n// Logic to add words to the board\nconst addWordToBoard = (word, board, wordsActive) => {\n  let curWord = word;\n  let curIndex = -1;\n  let minMatchDiff = 9999;\n  if (wordsActive.length < 1) {\n    curWord.x = 10;\n    curWord.y = 10;\n    curWord.dir = 0;\n    wordsActive.push(curWord);\n  } else {\n    for (let i = 0; i < wordBank.length; i++) {\n      let curMatchDiff = wordBank[i].totalMatches;\n      if (curMatchDiff < minMatchDiff) {\n        minMatchDiff = curMatchDiff;\n        curIndex = i;\n      }\n    }\n    if (curIndex === -1) return false;\n    curWord = wordBank[curIndex];\n    wordBank.splice(curIndex, 1);\n    wordsActive.push(curWord);\n    for (let i = 0; i < curWord.char.length; i++) {\n      let xIndex = curWord.x,\n        yIndex = curWord.y;\n      if (curWord.dir === 0) xIndex += i;else yIndex += i;\n      board[xIndex][yIndex] = curWord.char[i];\n    }\n  }\n  return true;\n};\n\n// Convert board state into HTML for rendering\nconst BoardToHtml = board => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: `repeat(${boardSize}, 30px)`\n    },\n    children: board.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 30,\n        height: 30,\n        border: \"1px solid black\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontWeight: \"bold\"\n      },\n      children: cell\n    }, `${rowIndex}-${colIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n// Main React Component\n_c = BoardToHtml;\nconst WordBoard = () => {\n  _s();\n  const [board, setBoard] = useState(generateBoard(boardSize));\n  const [wordsPlaced, setWordsPlaced] = useState([]);\n  useEffect(() => {\n    const wordBank = prepareWordBank();\n    const wordsActive = populateBoard(wordBank, board);\n    setWordsPlaced(wordsActive);\n    setBoard([...board]); // Refresh board state\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Word Puzzle Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), BoardToHtml(board)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(WordBoard, \"IgTgE/kJ3tA/zzd42ADjn4pu410=\");\n_c2 = WordBoard;\nexport default WordBoard;\nvar _c, _c2;\n$RefreshReg$(_c, \"BoardToHtml\");\n$RefreshReg$(_c2, \"WordBoard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","wordBank","word","x","y","dir","char","totalMatches","successfulMatches","boardSize","generateBoard","size","Array","fill","map","prepareWordBank","i","split","populateBoard","board","wordsActive","length","isPlaced","addWordToBoard","curWord","curIndex","minMatchDiff","push","curMatchDiff","splice","xIndex","yIndex","BoardToHtml","style","display","gridTemplateColumns","children","row","rowIndex","cell","colIndex","width","height","border","justifyContent","alignItems","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","_c","WordBoard","_s","setBoard","wordsPlaced","setWordsPlaced","_c2","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/HostRound2.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Initialize word bank based on user input\r\nconst wordBank: WordObj[] = [\r\n  { word: \"GIÓ\", x: -1, y: -1, dir: 0, char: [\"G\", \"I\", \"Ó\"], totalMatches: 0, successfulMatches: [] },\r\n  { word: \"HẠT GIỐNG\", x: -1, y: -1, dir: 0, char: [\"H\", \"Ạ\", \"T\", \" \", \"G\", \"I\", \"Ố\", \"N\", \"G\"], totalMatches: 0, successfulMatches: [] },\r\n  { word: \"DREAM\", x: -1, y: -1, dir: 0, char: [\"D\", \"R\", \"E\", \"A\", \"M\"], totalMatches: 0, successfulMatches: [] },\r\n  { word: \"THUỐC\", x: -1, y: -1, dir: 0, char: [\"T\", \"H\", \"U\", \"Ố\", \"C\"], totalMatches: 0, successfulMatches: [] },\r\n  { word: \"CÚC\", x: -1, y: -1, dir: 0, char: [\"C\", \"Ú\", \"C\"], totalMatches: 0, successfulMatches: [] },\r\n  { word: \"CHÂU KIỆT LUÂN\", x: -1, y: -1, dir: 0, char: [\"C\", \"H\", \"Â\", \"U\", \" \", \"K\", \"I\", \"Ệ\", \"T\", \" \", \"L\", \"U\", \"Â\", \"N\"], totalMatches: 0, successfulMatches: [] },\r\n];\r\n\r\nconst boardSize = 20;\r\n\r\n// Represents a word object with its position and direction\r\ninterface WordObj {\r\n  word: string;\r\n  x: number;\r\n  y: number;\r\n  dir: number; // 0: horizontal, 1: vertical\r\n  char: string[];\r\n  totalMatches: number;\r\n  successfulMatches: { x: number; y: number; dir: number }[];\r\n}\r\n\r\n// Function to create an empty board\r\nconst generateBoard = (size: number): string[][] => {\r\n  return Array(size).fill(null).map(() => Array(size).fill(\"\"));\r\n};\r\n\r\n// Prepare word bank from word array\r\nconst prepareWordBank = (): WordObj[] => {\r\n  return wordBank.map((word, i) => {\r\n    return {\r\n      word: ` ${i + 1}${word} `,\r\n      x: -1,\r\n      y: -1,\r\n      dir: 0,\r\n      char: word.word.split(\"\"),\r\n      totalMatches: 0,\r\n      successfulMatches: [],\r\n    };\r\n  });\r\n};\r\n\r\n// Apply placement logic to populate board\r\nconst populateBoard = (wordBank: WordObj[], board: string[][]): WordObj[] => {\r\n  const wordsActive: WordObj[] = [];\r\n\r\n  for (let i = 0; i < wordBank.length; i++) {\r\n    const isPlaced = addWordToBoard(wordBank[i], board, wordsActive);\r\n    if (!isPlaced) break; // Stop placing if a word fails\r\n  }\r\n  return wordsActive;\r\n};\r\n\r\n// Logic to add words to the board\r\nconst addWordToBoard = (word: WordObj, board: string[][], wordsActive: WordObj[]): boolean => {\r\n  let curWord = word;\r\n  let curIndex = -1;\r\n  let minMatchDiff = 9999;\r\n\r\n  if (wordsActive.length < 1) {\r\n    curWord.x = 10;\r\n    curWord.y = 10;\r\n    curWord.dir = 0;\r\n    wordsActive.push(curWord);\r\n  } else {\r\n    for (let i = 0; i < wordBank.length; i++) {\r\n      let curMatchDiff = wordBank[i].totalMatches;\r\n      if (curMatchDiff < minMatchDiff) {\r\n        minMatchDiff = curMatchDiff;\r\n        curIndex = i;\r\n      }\r\n    }\r\n\r\n    if (curIndex === -1) return false;\r\n    curWord = wordBank[curIndex];\r\n    wordBank.splice(curIndex, 1);\r\n    wordsActive.push(curWord);\r\n\r\n    for (let i = 0; i < curWord.char.length; i++) {\r\n      let xIndex = curWord.x, yIndex = curWord.y;\r\n      if (curWord.dir === 0) xIndex += i;\r\n      else yIndex += i;\r\n      board[xIndex][yIndex] = curWord.char[i];\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n// Convert board state into HTML for rendering\r\nconst BoardToHtml = (board: string[][]) => {\r\n  return (\r\n    <div style={{ display: \"grid\", gridTemplateColumns: `repeat(${boardSize}, 30px)` }}>\r\n      {board.map((row, rowIndex) =>\r\n        row.map((cell, colIndex) => (\r\n          <div\r\n            key={`${rowIndex}-${colIndex}`}\r\n            style={{\r\n              width: 30,\r\n              height: 30,\r\n              border: \"1px solid black\",\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n          >\r\n            {cell}\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Main React Component\r\nconst WordBoard: React.FC = () => {\r\n  const [board, setBoard] = useState<string[][]>(generateBoard(boardSize));\r\n  const [wordsPlaced, setWordsPlaced] = useState<WordObj[]>([]);\r\n\r\n  useEffect(() => {\r\n    const wordBank = prepareWordBank();\r\n    const wordsActive = populateBoard(wordBank, board);\r\n    setWordsPlaced(wordsActive);\r\n    setBoard([...board]); // Refresh board state\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Word Puzzle Board</h2>\r\n      {BoardToHtml(board)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WordBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}