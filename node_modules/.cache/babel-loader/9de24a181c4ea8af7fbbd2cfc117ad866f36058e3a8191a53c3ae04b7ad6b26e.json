{"ast":null,"code":"import React from \"react\";\n\n// Define word object structure\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CrosswordGrid = ({\n  placedWords,\n  boardSize = 20\n}) => {\n  // 0: horizontal, 1: vertical\n\n  const GRID_SIZE = 18;\n  const EMPTY_CELL = ' ';\n  function createEmptyGrid(size) {\n    return Array.from({\n      length: size\n    }, () => Array(size).fill(EMPTY_CELL));\n  }\n  const board = createEmptyGrid(GRID_SIZE);\n  let wordBank = [];\n  const wordArr = ['GIÓ', 'HẠTGIỐNG', 'DREAM', 'THUỐC', 'CÚC', 'CHÂUKIỆTLUÂN'];\n  function PopulateBoard() {\n    PrepareBoard();\n    for (var i = 0, isOk = true, len = wordBank.length; i < len && isOk; i++) {\n      isOk = AddWordToBoard();\n    }\n    return isOk;\n  }\n  function PrepareBoard() {\n    wordBank = [];\n    for (var i = 0, len = wordArr.length; i < len; i++) {\n      let actualPos = i + 1;\n      wordBank.push(new WordObj(' ' + actualPos.toString() + wordArr[i] + ' '));\n    }\n    for (i = 0; i < wordBank.length; i++) {\n      for (var j = 0, wA = wordBank[i]; j < wA.char.length; j++) {\n        for (var k = 0, cA = wA.char[j]; k < wordBank.length; k++) {\n          for (var l = 0, wB = wordBank[k]; k !== i && l < wB.char.length; l++) {\n            wA.totalMatches += cA === wB.char[l] ? 1 : 0;\n          }\n        }\n      }\n    }\n  }\n  function findWordIdx(givenWord) {\n    givenWord = givenWord.substring(2, givenWord.length - 1);\n    for (var i = 0, len = wordArr.length; i < len; i++) {\n      if (givenWord == wordArr[i]) return i + 1;\n    }\n  }\n\n  // TODO: Clean this guy up\n  function AddWordToBoard() {\n    var i,\n      len,\n      curIndex,\n      curWord,\n      curChar,\n      curMatch,\n      testWord,\n      testChar,\n      minMatchDiff = 9999,\n      curMatchDiff;\n    if (wordsActive.length < 1) {\n      curIndex = 0;\n      for (i = 0, len = wordBank.length; i < len; i++) {\n        if (wordBank[i].totalMatches < wordBank[curIndex].totalMatches) {\n          curIndex = i;\n        }\n      }\n      wordBank[curIndex].successfulMatches = [{\n        x: 12,\n        y: 12,\n        dir: 0\n      }];\n    } else {\n      curIndex = -1;\n      for (i = 0, len = wordBank.length; i < len; i++) {\n        curWord = wordBank[i];\n        curWord.effectiveMatches = 0;\n        curWord.successfulMatches = [];\n        for (var j = 0, lenJ = curWord.char.length; j < lenJ; j++) {\n          if (j == 1) continue; // skip pos\n          curChar = curWord.char[j];\n          for (var k = 0, lenK = wordsActive.length; k < lenK; k++) {\n            testWord = wordsActive[k];\n            for (var l = 0, lenL = testWord.char.length; l < lenL; l++) {\n              if (l == 1) continue; // skip pos\n              testChar = testWord.char[l];\n              if (curChar === testChar) {\n                curWord.effectiveMatches++;\n                var curCross = {\n                  x: testWord.x,\n                  y: testWord.y,\n                  dir: 0\n                };\n                if (testWord.dir === 0) {\n                  curCross.dir = 1;\n                  curCross.x += l;\n                  curCross.y -= j;\n                } else {\n                  curCross.dir = 0;\n                  curCross.y += l;\n                  curCross.x -= j;\n                }\n                var isMatch = true;\n                for (var m = -1, lenM = curWord.char.length + 1; m < lenM; m++) {\n                  var crossVal = [];\n                  if (m !== j) {\n                    if (curCross.dir === 0) {\n                      var xIndex = curCross.x + m;\n                      if (xIndex < 0 || xIndex > board.length) {\n                        isMatch = false;\n                        break;\n                      }\n                      crossVal.push(board[xIndex][curCross.y]);\n                      crossVal.push(board[xIndex][curCross.y + 1]);\n                      crossVal.push(board[xIndex][curCross.y - 1]);\n                    } else {\n                      var yIndex = curCross.y + m;\n                      if (yIndex < 0 || yIndex > board[curCross.x].length) {\n                        isMatch = false;\n                        break;\n                      }\n                      crossVal.push(board[curCross.x][yIndex]);\n                      crossVal.push(board[curCross.x + 1][yIndex]);\n                      crossVal.push(board[curCross.x - 1][yIndex]);\n                    }\n                    if (m > -1 && m < lenM - 1) {\n                      if (crossVal[0] !== curWord.char[m]) {\n                        if (crossVal[0] !== null) {\n                          isMatch = false;\n                          break;\n                        } else if (crossVal[1] !== null) {\n                          isMatch = false;\n                          break;\n                        } else if (crossVal[2] !== null) {\n                          isMatch = false;\n                          break;\n                        }\n                      }\n                    } else if (crossVal[0] !== null) {\n                      isMatch = false;\n                      break;\n                    }\n                  }\n                }\n                if (isMatch === true) {\n                  curWord.successfulMatches.push(curCross);\n                }\n              }\n            }\n          }\n        }\n        curMatchDiff = curWord.totalMatches - curWord.effectiveMatches;\n        if (curMatchDiff < minMatchDiff && curWord.successfulMatches.length > 0) {\n          curMatchDiff = minMatchDiff;\n          curIndex = i;\n        } else if (curMatchDiff <= 0) {\n          return false;\n        }\n      }\n    }\n    if (curIndex === -1) {\n      return false;\n    }\n    var spliced = wordBank.splice(curIndex, 1);\n    wordsActive.push(spliced[0]);\n    var pushIndex = wordsActive.length - 1,\n      rand = Math.random(),\n      matchArr = wordsActive[pushIndex].successfulMatches,\n      matchIndex = Math.floor(rand * matchArr.length),\n      matchData = matchArr[matchIndex];\n    wordsActive[pushIndex].x = matchData.x;\n    wordsActive[pushIndex].y = matchData.y;\n    wordsActive[pushIndex].dir = matchData.dir;\n    let actualIndex = findWordIdx(wordsActive[pushIndex].string);\n    console.log(wordsActive[pushIndex].string, \" ~~~ \", actualIndex);\n    for (i = 0, len = wordsActive[pushIndex].char.length; i < len; i++) {\n      var xIndex = matchData.x,\n        yIndex = matchData.y;\n      if (matchData.dir === 0) {\n        xIndex += i;\n      } else {\n        yIndex += i;\n      }\n      board[xIndex][yIndex] = wordsActive[pushIndex].char[i];\n      isPos[xIndex][yIndex] = i == 1;\n      classesOfBoard[xIndex][yIndex].push(actualIndex);\n      console.log(xIndex, yIndex, classesOfBoard[xIndex][yIndex]);\n      Bounds.Update(xIndex, yIndex);\n    }\n    return true;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_c = CrosswordGrid;\nexport default CrosswordGrid;\nvar _c;\n$RefreshReg$(_c, \"CrosswordGrid\");","map":{"version":3,"names":["React","Fragment","_Fragment","jsxDEV","_jsxDEV","CrosswordGrid","placedWords","boardSize","GRID_SIZE","EMPTY_CELL","createEmptyGrid","size","Array","from","length","fill","board","wordBank","wordArr","PopulateBoard","PrepareBoard","i","isOk","len","AddWordToBoard","actualPos","push","WordObj","toString","j","wA","char","k","cA","l","wB","totalMatches","findWordIdx","givenWord","substring","curIndex","curWord","curChar","curMatch","testWord","testChar","minMatchDiff","curMatchDiff","wordsActive","successfulMatches","x","y","dir","effectiveMatches","lenJ","lenK","lenL","curCross","isMatch","m","lenM","crossVal","xIndex","yIndex","spliced","splice","pushIndex","rand","Math","random","matchArr","matchIndex","floor","matchData","actualIndex","string","console","log","isPos","classesOfBoard","Bounds","Update","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/HostRound2.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Define word object structure\r\n\r\ntype WordPlacement = {\r\n  word: string;\r\n  x: number;\r\n  y: number;\r\n  direction: \"horizontal\" | \"vertical\";\r\n};\r\n\r\ninterface CrosswordGridProps {\r\n  placedWords?: WordPlacement[];\r\n  boardSize?: number;\r\n}\r\n\r\n\r\ninterface WordObj {\r\n  string: string,\r\n  char: cha[],\r\n}\r\nconst CrosswordGrid: React.FC<CrosswordGridProps> = ({ placedWords, boardSize = 20 }) => {\r\n\r\n  type Direction = 0 | 1; // 0: horizontal, 1: vertical\r\n\r\ninterface Match {\r\n  wordIndex: number;\r\n  indexInWord: number;\r\n}\r\n\r\ninterface WordPlacement {\r\n  word: string;\r\n  x: number;\r\n  y: number;\r\n  dir: Direction;\r\n  successfulMatches: Match[];\r\n  totalMatches: number;\r\n  effectiveMatches: number;\r\n  char: string[];\r\n  string: string;\r\n}\r\n\r\nconst GRID_SIZE = 18;\r\nconst EMPTY_CELL = ' ';\r\n\r\nfunction createEmptyGrid(size: number): string[][] {\r\n  return Array.from({ length: size }, () => Array(size).fill(EMPTY_CELL));\r\n}\r\n\r\n  const board = createEmptyGrid(GRID_SIZE)\r\n  let wordBank: string[] = []\r\n  const wordArr = [\r\n    'GIÓ',\r\n    'HẠTGIỐNG',\r\n    'DREAM',\r\n    'THUỐC',\r\n    'CÚC',\r\n    'CHÂUKIỆTLUÂN',\r\n  ]\r\n  function PopulateBoard(){\r\n      PrepareBoard();\r\n\r\n      for(var i=0,isOk=true,len=wordBank.length; i<len && isOk; i++){\r\n        isOk = AddWordToBoard();\r\n      }\r\n      return isOk;\r\n    }\r\n\r\n\r\n    function PrepareBoard(){\r\n      wordBank=[];\r\n\r\n      for(var i = 0, len = wordArr.length; i < len; i++){\r\n        let actualPos = i+1;\r\n        wordBank.push(new WordObj(' '+actualPos.toString()+wordArr[i]+' '));\r\n      }\r\n\r\n      for(i = 0; i < wordBank.length; i++){\r\n        for(var j = 0, wA=wordBank[i]; j<wA.char.length; j++){\r\n          for(var k = 0, cA=wA.char[j]; k<wordBank.length; k++){\r\n            for(var l = 0,wB=wordBank[k]; k!==i && l<wB.char.length; l++){\r\n              wA.totalMatches += (cA === wB.char[l])?1:0;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function findWordIdx(givenWord){\r\n      givenWord = givenWord.substring(2, givenWord.length-1);\r\n      for(var i = 0, len = wordArr.length; i < len; i++){\r\n        if(givenWord == wordArr[i]) return i+1;\r\n      }\r\n    }\r\n\r\n    // TODO: Clean this guy up\r\n    function AddWordToBoard(){\r\n      var i, len, curIndex, curWord, curChar, curMatch, testWord, testChar,\r\n          minMatchDiff = 9999, curMatchDiff;\r\n\r\n      if(wordsActive.length < 1){\r\n        curIndex = 0;\r\n        for(i = 0, len = wordBank.length; i < len; i++){\r\n          if (wordBank[i].totalMatches < wordBank[curIndex].totalMatches){\r\n            curIndex = i;\r\n          }\r\n        }\r\n        wordBank[curIndex].successfulMatches = [{x:12,y:12,dir:0}];\r\n      }\r\n      else{\r\n        curIndex = -1;\r\n\r\n        for(i = 0, len = wordBank.length; i < len; i++){\r\n          curWord = wordBank[i];\r\n          curWord.effectiveMatches = 0;\r\n          curWord.successfulMatches = [];\r\n          for(var j = 0, lenJ = curWord.char.length; j < lenJ; j++){\r\n            if(j == 1) continue; // skip pos\r\n            curChar = curWord.char[j];\r\n            for (var k = 0, lenK = wordsActive.length; k < lenK; k++){\r\n              testWord = wordsActive[k];\r\n              for (var l = 0, lenL = testWord.char.length; l < lenL; l++){\r\n                if(l == 1) continue; // skip pos\r\n                testChar = testWord.char[l];\r\n                if (curChar === testChar){\r\n                  curWord.effectiveMatches++;\r\n\r\n                  var curCross = {x:testWord.x,y:testWord.y,dir:0};\r\n                  if(testWord.dir === 0){\r\n                    curCross.dir = 1;\r\n                    curCross.x += l;\r\n                    curCross.y -= j;\r\n                  }\r\n                  else{\r\n                    curCross.dir = 0;\r\n                    curCross.y += l;\r\n                    curCross.x -= j;\r\n                  }\r\n\r\n                  var isMatch = true;\r\n\r\n                  for(var m = -1, lenM = curWord.char.length + 1; m < lenM; m++){\r\n                    var crossVal = [];\r\n                    if (m !== j){\r\n                      if (curCross.dir === 0){\r\n                        var xIndex = curCross.x + m;\r\n\r\n                        if (xIndex < 0 || xIndex > board.length){\r\n                          isMatch = false;\r\n                          break;\r\n                        }\r\n\r\n                        crossVal.push(board[xIndex][curCross.y]);\r\n                        crossVal.push(board[xIndex][curCross.y + 1]);\r\n                        crossVal.push(board[xIndex][curCross.y - 1]);\r\n                      }\r\n                      else{\r\n                        var yIndex = curCross.y + m;\r\n\r\n                        if (yIndex < 0 || yIndex > board[curCross.x].length){\r\n                          isMatch = false;\r\n                          break;\r\n                        }\r\n\r\n                        crossVal.push(board[curCross.x][yIndex]);\r\n                        crossVal.push(board[curCross.x + 1][yIndex]);\r\n                        crossVal.push(board[curCross.x - 1][yIndex]);\r\n                      }\r\n\r\n                      if(m > -1 && m < lenM-1){\r\n                        if (crossVal[0] !== curWord.char[m]){\r\n                          if (crossVal[0] !== null){\r\n                            isMatch = false;\r\n                            break;\r\n                          }\r\n                          else if (crossVal[1] !== null){\r\n                            isMatch = false;\r\n                            break;\r\n                          }\r\n                          else if (crossVal[2] !== null){\r\n                            isMatch = false;\r\n                            break;\r\n                          }\r\n                        }\r\n                      }\r\n                      else if (crossVal[0] !== null){\r\n                        isMatch = false;\r\n                        break;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  if (isMatch === true){\r\n                    curWord.successfulMatches.push(curCross);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          curMatchDiff = curWord.totalMatches - curWord.effectiveMatches;\r\n\r\n          if (curMatchDiff<minMatchDiff && curWord.successfulMatches.length>0){\r\n            curMatchDiff = minMatchDiff;\r\n            curIndex = i;\r\n          }\r\n          else if (curMatchDiff <= 0){\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (curIndex === -1){\r\n        return false;\r\n      }\r\n\r\n      var spliced = wordBank.splice(curIndex, 1);\r\n      wordsActive.push(spliced[0]);\r\n\r\n      var pushIndex = wordsActive.length - 1,\r\n          rand = Math.random(),\r\n          matchArr = wordsActive[pushIndex].successfulMatches,\r\n          matchIndex = Math.floor(rand * matchArr.length),\r\n          matchData = matchArr[matchIndex];\r\n\r\n      wordsActive[pushIndex].x = matchData.x;\r\n      wordsActive[pushIndex].y = matchData.y;\r\n      wordsActive[pushIndex].dir = matchData.dir;\r\n\r\n      let actualIndex = findWordIdx(wordsActive[pushIndex].string);\r\n      console.log(wordsActive[pushIndex].string, \" ~~~ \", actualIndex);\r\n      for(i = 0, len = wordsActive[pushIndex].char.length; i < len; i++){\r\n        var xIndex = matchData.x,\r\n            yIndex = matchData.y;\r\n\r\n        if (matchData.dir === 0){\r\n          xIndex += i;\r\n        }\r\n        else{\r\n          yIndex += i;\r\n        }\r\n        board[xIndex][yIndex] = wordsActive[pushIndex].char[i];\r\n        isPos[xIndex][yIndex] = (i == 1);\r\n        classesOfBoard[xIndex][yIndex].push(actualIndex);\r\n        console.log(xIndex, yIndex, classesOfBoard[xIndex][yIndex]);\r\n\r\n        Bounds.Update(xIndex,yIndex);\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n  return (\r\n    <>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CrosswordGrid;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}