{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\context\\\\timeListenerContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport { listenToTimeStart } from \"../services/firebaseServices\";\nimport { useSounds } from \"./soundContext\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimeStartContext = /*#__PURE__*/createContext(undefined);\nexport const TimeStartProvider = ({\n  roomId,\n  children\n}) => {\n  _s();\n  // const {setAnimationKey} = useHost();\n  const [timeLeft, setTimeLeft] = useState(0);\n  const timerRef = useRef(null);\n  const sounds = useSounds();\n  const [searchParams] = useSearchParams();\n  const round = searchParams.get(\"round\") || \"1\";\n  const roundRef = useRef(round);\n\n  // Keep the ref in sync when round updates\n  useEffect(() => {\n    roundRef.current = round;\n    console.log(\"round\");\n  }, [round]);\n  const startTimer = async duration => {\n    // Clear any existing timer\n    if (timerRef.current) clearInterval(timerRef.current);\n    console.log(\"duration\", duration);\n\n    // Set the new time\n    setTimeLeft(duration);\n\n    // Start the countdown\n    timerRef.current = setInterval(() => {\n      setTimeLeft(prev => {\n        console.log(prev);\n        if (prev <= 1) {\n          // setAnimationKey((prev: number) => prev + 1);\n          clearInterval(timerRef.current);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const setExternalTimer = seconds => {\n    startTimer(seconds);\n  };\n  const isInitialMount = useRef(true);\n  useEffect(() => {\n    console.log(\"round\", round);\n    const unsubscribe = listenToTimeStart(roomId, async () => {\n      const currentRound = roundRef.current;\n      console.log(\"round on time listener\", round);\n      if (timerRef.current) clearInterval(timerRef.current);\n      console.log(\"isInitialMount before\", isInitialMount.current);\n\n      // Skip the timer setting on the first mount, but allow future calls to run\n      // if (isInitialMount.current) {\n      //   isInitialMount.current = false;\n      //   return;\n      // }\n\n      console.log(\"isInitialMount after\", isInitialMount.current);\n      switch (currentRound) {\n        case \"1\":\n          console.log(\"start timer for round\");\n          startTimer(10);\n          break;\n        case \"2\":\n          startTimer(15);\n          break;\n        case \"3\":\n          startTimer(60);\n          break;\n        case \"4\":\n          startTimer(15);\n          break;\n        default:\n          console.warn(\"Unexpected round:\", round);\n      }\n    });\n    return () => {\n      unsubscribe();\n      if (timerRef.current) clearInterval(timerRef.current);\n    };\n  }, [round]);\n  return /*#__PURE__*/_jsxDEV(TimeStartContext.Provider, {\n    value: {\n      timeLeft,\n      startTimer,\n      setExternalTimer\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeStartProvider, \"LQXZv+FveMnXZ6sIH8+TRSvRzLA=\", false, function () {\n  return [useSounds, useSearchParams];\n});\n_c = TimeStartProvider;\nexport const useTimeStart = () => {\n  _s2();\n  const context = useContext(TimeStartContext);\n  if (!context) {\n    throw new Error(\"useTimeStart must be used within a TimeStartProvider\");\n  }\n  return context;\n};\n_s2(useTimeStart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TimeStartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useRef","useState","listenToTimeStart","useSounds","useSearchParams","jsxDEV","_jsxDEV","TimeStartContext","undefined","TimeStartProvider","roomId","children","_s","timeLeft","setTimeLeft","timerRef","sounds","searchParams","round","get","roundRef","current","console","log","startTimer","duration","clearInterval","setInterval","prev","setExternalTimer","seconds","isInitialMount","unsubscribe","currentRound","warn","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTimeStart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/context/timeListenerContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { deletePath, listenToTimeStart } from \"../services/firebaseServices\";\r\nimport { useSounds } from \"./soundContext\";\r\nimport { round } from \"react-placeholder/lib/placeholders\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { useHost } from \"./hostContext\";\r\n\r\ntype TimeStartContextType = {\r\n  timeLeft: number;\r\n  startTimer: (duration: number) => void;\r\n  setExternalTimer: (seconds: number) => void;\r\n};\r\n\r\nconst TimeStartContext = createContext<TimeStartContextType | undefined>(undefined);\r\n\r\nexport const TimeStartProvider: React.FC<{ roomId: string; children: React.ReactNode }> = ({\r\n  roomId,\r\n  children,\r\n}) => {\r\n  // const {setAnimationKey} = useHost();\r\n  const [timeLeft, setTimeLeft] = useState<number>(0);\r\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\r\n  const sounds = useSounds();\r\n  const [searchParams] = useSearchParams();\r\n  const round = searchParams.get(\"round\") || \"1\";\r\n  const roundRef = useRef(round);\r\n\r\n  // Keep the ref in sync when round updates\r\n  useEffect(() => {\r\n    roundRef.current = round;\r\n    console.log(\"round\");\r\n    \r\n  }, [round]);\r\n\r\n  const startTimer = async (duration: number) => {\r\n    // Clear any existing timer\r\n    if (timerRef.current) clearInterval(timerRef.current);\r\n    console.log(\"duration\", duration);\r\n\r\n    // Set the new time\r\n    setTimeLeft(duration);\r\n\r\n    // Start the countdown\r\n    timerRef.current = setInterval(() => {\r\n      setTimeLeft((prev) => {\r\n        console.log(prev);\r\n        if (prev <= 1) {\r\n          // setAnimationKey((prev: number) => prev + 1);\r\n          clearInterval(timerRef.current!);\r\n          return 0;\r\n        }\r\n        return prev - 1;\r\n      });\r\n    }, 1000);\r\n  };\r\n  const setExternalTimer = (seconds: number) => {\r\n    startTimer(seconds);\r\n  };\r\n\r\n  const isInitialMount = useRef(true);\r\n\r\n  useEffect(() => {\r\n    console.log(\"round\", round);\r\n\r\n    const unsubscribe = listenToTimeStart(roomId, async () => {\r\n      const currentRound = roundRef.current;\r\n      console.log(\"round on time listener\", round);\r\n      if (timerRef.current) clearInterval(timerRef.current);\r\n      console.log(\"isInitialMount before\", isInitialMount.current);\r\n\r\n      // Skip the timer setting on the first mount, but allow future calls to run\r\n      // if (isInitialMount.current) {\r\n      //   isInitialMount.current = false;\r\n      //   return;\r\n      // }\r\n\r\n      console.log(\"isInitialMount after\", isInitialMount.current);\r\n\r\n      switch (currentRound) {\r\n        case \"1\":\r\n          console.log(\"start timer for round\");\r\n\r\n          startTimer(10);\r\n          break;\r\n        case \"2\":\r\n          startTimer(15);\r\n          break;\r\n        case \"3\":\r\n          startTimer(60);\r\n          break;\r\n        case \"4\":\r\n          startTimer(15);\r\n          break;\r\n        default:\r\n          console.warn(\"Unexpected round:\", round);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      unsubscribe();\r\n      if (timerRef.current) clearInterval(timerRef.current);\r\n    };\r\n  }, [round]);\r\n\r\n  return (\r\n    <TimeStartContext.Provider value={{ timeLeft, startTimer, setExternalTimer }}>\r\n      {children}\r\n    </TimeStartContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTimeStart = (): TimeStartContextType => {\r\n  const context = useContext(TimeStartContext);\r\n  if (!context) {\r\n    throw new Error(\"useTimeStart must be used within a TimeStartProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}