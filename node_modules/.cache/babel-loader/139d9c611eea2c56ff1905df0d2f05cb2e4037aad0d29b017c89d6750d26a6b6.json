{"ast":null,"code":"import axios from \"axios\";\nimport { deletePath } from \"../services/firebaseServices\";\nexport const sendGridToPlayers = async (grid, roomId) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/test/grid?room_id=${roomId}`, {\n      \"grid\": grid\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const goToNextRound = async (roomId, round, grid) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/rooms/round?room_id=${roomId}&round=${round}`, {\n      \"grid\": grid\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n    await deletePath(roomId, \"questions\");\n    deletePath(roomId, \"answers\");\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const setSelectedRow = async (roomId, row, isRow, wordLength) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/test/row/action?room_id=${roomId}&row_number=${row}&action=SELECT&is_row=${isRow}&word_length=${wordLength}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const setIncorectRow = async (roomId, row, isRow, wordLength) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/test/row/action?room_id=${roomId}&row_number=${row}&action=INCORRECT&is_row=${isRow}&word_length=${wordLength}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const setCorrectRow = async (roomId, row, correctAnswer, markedCharcterIndex, isRow, wordLength) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/test/row/action?room_id=${roomId}&row_number=${row}&action=CORRECT&correct_answer=${correctAnswer}&marked_characters_index=${markedCharcterIndex}&is_row=${isRow}&word_length=${wordLength}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const buzzing = async (roomId, playerName, stt) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/buzz?room_id=${roomId}`, {\n      \"stt\": stt,\n      \"player_name\": playerName\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const resetBuzz = async roomId => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/buzz/reset?room_id=${roomId}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const openObstacle = async (roomId, obstacleWord) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/test/obstacle?room_id=${roomId}&obstacle=${obstacleWord}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const getPacketNames = async (testName, roomId) => {\n  try {\n    const response = await axios.get(`http://localhost:8000/api/test/question/round/packet?test_name=${testName}&room_id=${roomId}`, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const setCurrentPacketQuestion = async (roomId, questionNumber) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/test/question/current?question_number=${questionNumber}&room_id=${roomId}   `, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const setCurrentChunk = async (roomId, packetName, chunk, testName) => {\n  try {\n    const response = await axios.get(`http://localhost:8000/api/test/question?test_name=${testName}&room_id=${roomId}&packet_name=${packetName}&chunk=${chunk}&round=3   `, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const sendSelectedCell = async (roomId, colIndex, rowIndex) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/test/grid/cell?room_id=${roomId}&row_index=${rowIndex}&col_index=${colIndex}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const sendCellColor = async (roomId, colIndex, rowIndex, color) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/test/grid/color?room_id=${roomId}&row_index=${rowIndex}&col_index=${colIndex}&color=${color}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const sendCorrectAnswer = async (roomId, answer) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/test/answer?room_id=${roomId}`, {\n      \"answer\": answer\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const openBuzz = async roomId => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/buzz/open?room_id=${roomId}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const closeBuzz = async roomId => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/buzz/close?room_id=${roomId}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const playSound = async (roomId, type) => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/sound/play?room_id=${roomId}&type=${type}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};","map":{"version":3,"names":["axios","deletePath","sendGridToPlayers","grid","roomId","response","post","headers","withCredentials","status","Error","data","error","console","goToNextRound","round","setSelectedRow","row","isRow","wordLength","setIncorectRow","setCorrectRow","correctAnswer","markedCharcterIndex","buzzing","playerName","stt","resetBuzz","openObstacle","obstacleWord","getPacketNames","testName","get","setCurrentPacketQuestion","questionNumber","setCurrentChunk","packetName","chunk","sendSelectedCell","colIndex","rowIndex","sendCellColor","color","sendCorrectAnswer","answer","openBuzz","closeBuzz","playSound","type"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/components/services.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport { deletePath } from \"../services/firebaseServices\";\r\n\r\nexport const sendGridToPlayers = async (grid: string[][], roomId: string) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/test/grid?room_id=${roomId}`,\r\n            {\r\n                \"grid\": grid\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to send answer, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const goToNextRound = async (roomId: string, round: string, grid?: string[][]) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/rooms/round?room_id=${roomId}&round=${round}`,\r\n            {\r\n                \"grid\": grid\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        await deletePath(roomId, \"questions\")\r\n        deletePath(roomId, \"answers\")\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const setSelectedRow = async (roomId: string, row: string, isRow: boolean, wordLength: number) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/test/row/action?room_id=${roomId}&row_number=${row}&action=SELECT&is_row=${isRow}&word_length=${wordLength}`,\r\n            {\r\n\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const setIncorectRow = async (roomId: string, row: string, isRow: boolean, wordLength: number) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/test/row/action?room_id=${roomId}&row_number=${row}&action=INCORRECT&is_row=${isRow}&word_length=${wordLength}`,\r\n            {\r\n\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const setCorrectRow = async (roomId: string, row: string, correctAnswer: string, markedCharcterIndex: string, isRow: boolean, wordLength: number) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/test/row/action?room_id=${roomId}&row_number=${row}&action=CORRECT&correct_answer=${correctAnswer}&marked_characters_index=${markedCharcterIndex}&is_row=${isRow}&word_length=${wordLength}`,\r\n            {\r\n\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const buzzing = async (roomId: string, playerName: string, stt: string) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/buzz?room_id=${roomId}`,\r\n            {\r\n                \"stt\": stt,\r\n                \"player_name\": playerName\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const resetBuzz = async (roomId: string) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/buzz/reset?room_id=${roomId}`,\r\n            {\r\n\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const openObstacle = async (roomId: string, obstacleWord: string) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/test/obstacle?room_id=${roomId}&obstacle=${obstacleWord}`,\r\n            {\r\n\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const getPacketNames = async (testName: string, roomId: string) => {\r\n    try {\r\n        const response = await axios.get(`http://localhost:8000/api/test/question/round/packet?test_name=${testName}&room_id=${roomId}`,\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const setCurrentPacketQuestion = async (roomId: string, questionNumber: number) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/test/question/current?question_number=${questionNumber}&room_id=${roomId}   `, {\r\n\r\n        },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const setCurrentChunk = async (roomId: string, packetName: string, chunk: number, testName: string) => {\r\n    try {\r\n        const response = await axios.get(`http://localhost:8000/api/test/question?test_name=${testName}&room_id=${roomId}&packet_name=${packetName}&chunk=${chunk}&round=3   `,\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const sendSelectedCell = async (roomId: string, colIndex: string, rowIndex: string) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/test/grid/cell?room_id=${roomId}&row_index=${rowIndex}&col_index=${colIndex}`,\r\n            {\r\n\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const sendCellColor = async (roomId: string, colIndex: string, rowIndex: string, color: string) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/test/grid/color?room_id=${roomId}&row_index=${rowIndex}&col_index=${colIndex}&color=${color}`,\r\n            {\r\n\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const sendCorrectAnswer = async (roomId: string, answer: string) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/test/answer?room_id=${roomId}`,\r\n            {\r\n                \"answer\": answer\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const openBuzz = async (roomId: string) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/buzz/open?room_id=${roomId}`,\r\n            {\r\n\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const closeBuzz = async (roomId: string) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/buzz/close?room_id=${roomId}`,\r\n            {\r\n\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\nexport const playSound = async (roomId: string, type: string) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/sound/play?room_id=${roomId}&type=${type}`,\r\n            {\r\n\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,8BAA8B;AAEzD,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAOC,IAAgB,EAAEC,MAAc,KAAK;EACzE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,+CAA+CF,MAAM,EAAE,EACrF;MACI,MAAM,EAAED;IACZ,CAAC,EACD;MACII,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,kCAAkCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IACxE;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOV,MAAc,EAAEW,KAAa,EAAEZ,IAAiB,KAAK;EACrF,IAAI;IACA,MAAME,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,iDAAiDF,MAAM,UAAUW,KAAK,EAAE,EACtG;MACI,MAAM,EAAEZ;IACZ,CAAC,EACD;MACII,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;IAEA,MAAMR,UAAU,CAACG,MAAM,EAAE,WAAW,CAAC;IACrCH,UAAU,CAACG,MAAM,EAAE,SAAS,CAAC;;IAE7B;IACA,OAAOC,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMI,cAAc,GAAG,MAAAA,CAAOZ,MAAc,EAAEa,GAAW,EAAEC,KAAc,EAAEC,UAAkB,KAAK;EACrG,IAAI;IACA,MAAMd,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,qDAAqDF,MAAM,eAAea,GAAG,yBAAyBC,KAAK,gBAAgBC,UAAU,EAAE,EACrK,CAEA,CAAC,EACD;MACIZ,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMQ,cAAc,GAAG,MAAAA,CAAOhB,MAAc,EAAEa,GAAW,EAAEC,KAAc,EAAEC,UAAkB,KAAK;EACrG,IAAI;IACA,MAAMd,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,qDAAqDF,MAAM,eAAea,GAAG,4BAA4BC,KAAK,gBAAgBC,UAAU,EAAE,EACxK,CAEA,CAAC,EACD;MACIZ,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMS,aAAa,GAAG,MAAAA,CAAOjB,MAAc,EAAEa,GAAW,EAAEK,aAAqB,EAAEC,mBAA2B,EAAEL,KAAc,EAAEC,UAAkB,KAAK;EACxJ,IAAI;IACA,MAAMd,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,qDAAqDF,MAAM,eAAea,GAAG,kCAAkCK,aAAa,4BAA4BC,mBAAmB,WAAWL,KAAK,gBAAgBC,UAAU,EAAE,EACrP,CAEA,CAAC,EACD;MACIZ,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMY,OAAO,GAAG,MAAAA,CAAOpB,MAAc,EAAEqB,UAAkB,EAAEC,GAAW,KAAK;EAC9E,IAAI;IACA,MAAMrB,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,0CAA0CF,MAAM,EAAE,EAChF;MACI,KAAK,EAAEsB,GAAG;MACV,aAAa,EAAED;IACnB,CAAC,EACD;MACIlB,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMe,SAAS,GAAG,MAAOvB,MAAc,IAAK;EAC/C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,gDAAgDF,MAAM,EAAE,EACtF,CAEA,CAAC,EACD;MACIG,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMgB,YAAY,GAAG,MAAAA,CAAOxB,MAAc,EAAEyB,YAAoB,KAAK;EACxE,IAAI;IACA,MAAMxB,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,mDAAmDF,MAAM,aAAayB,YAAY,EAAE,EAClH,CAEA,CAAC,EACD;MACItB,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMkB,cAAc,GAAG,MAAAA,CAAOC,QAAgB,EAAE3B,MAAc,KAAK;EACtE,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACgC,GAAG,CAAC,kEAAkED,QAAQ,YAAY3B,MAAM,EAAE,EAC3H;MACIG,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMqB,wBAAwB,GAAG,MAAAA,CAAO7B,MAAc,EAAE8B,cAAsB,KAAK;EACtF,IAAI;IACA,MAAM7B,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,mEAAmE4B,cAAc,YAAY9B,MAAM,KAAK,EAAE,CAE5I,CAAC,EACG;MACIG,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMuB,eAAe,GAAG,MAAAA,CAAO/B,MAAc,EAAEgC,UAAkB,EAAEC,KAAa,EAAEN,QAAgB,KAAK;EAC1G,IAAI;IACA,MAAM1B,QAAQ,GAAG,MAAML,KAAK,CAACgC,GAAG,CAAC,qDAAqDD,QAAQ,YAAY3B,MAAM,gBAAgBgC,UAAU,UAAUC,KAAK,aAAa,EAClK;MACI9B,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAM0B,gBAAgB,GAAG,MAAAA,CAAOlC,MAAc,EAAEmC,QAAgB,EAAEC,QAAgB,KAAK;EAC1F,IAAI;IACA,MAAMnC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,oDAAoDF,MAAM,cAAcoC,QAAQ,cAAcD,QAAQ,EAAE,EACtI,CAEA,CAAC,EACD;MACIhC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAM6B,aAAa,GAAG,MAAAA,CAAOrC,MAAc,EAAEmC,QAAgB,EAAEC,QAAgB,EAAEE,KAAa,KAAK;EACtG,IAAI;IACA,MAAMrC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,qDAAqDF,MAAM,cAAcoC,QAAQ,cAAcD,QAAQ,UAAUG,KAAK,EAAE,EACtJ,CAEA,CAAC,EACD;MACInC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAM+B,iBAAiB,GAAG,MAAAA,CAAOvC,MAAc,EAAEwC,MAAc,KAAK;EACvE,IAAI;IACA,MAAMvC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,iDAAiDF,MAAM,EAAE,EACvF;MACI,QAAQ,EAAEwC;IACd,CAAC,EACD;MACIrC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMiC,QAAQ,GAAG,MAAOzC,MAAc,IAAK;EAC9C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,+CAA+CF,MAAM,EAAE,EACrF,CAEA,CAAC,EACD;MACIG,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMkC,SAAS,GAAG,MAAO1C,MAAc,IAAK;EAC/C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,gDAAgDF,MAAM,EAAE,EACtF,CAEA,CAAC,EACD;MACIG,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC;AAED,OAAO,MAAMmC,SAAS,GAAG,MAAAA,CAAO3C,MAAc,EAAE4C,IAAY,KAAK;EAC7D,IAAI;IACA,MAAM3C,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,gDAAgDF,MAAM,SAAS4C,IAAI,EAAE,EACnG,CAEA,CAAC,EACD;MACIzC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,eAAe,EAAE;IACrB,CAAC,CAAC;IAEN,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAAC,uCAAuCL,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7E;;IAEA;IACA,OAAOJ,QAAQ,CAACM,IAAI;EAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}