{"ast":null,"code":"export const getTest = async testName => {\n  try {\n    const response = await fetch(`http://127.0.0.1:8000/api/test/${testId}`, {\n      method: 'GET',\n      // Phương thức HTTP\n      headers: {\n        'Content-Type': 'application/json'\n        //   Authorization: `Bearer YOUR_API_TOKEN`, // Nếu API yêu cầu token\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch test with ID: ${testId}, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    const data = await response.json();\n    return data.questions;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const uploadTestToServer = async (file, testName) => {\n  // Kiểm tra nếu không có file\n  if (!file) {\n    throw new Error(\"Không có file nào được chọn!\");\n  }\n\n  // Tạo đối tượng FormData để đóng gói file\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  try {\n    // Gửi yêu cầu POST tới server\n    const response = await fetch(`http://127.0.0.1:8000/api/test/upload?test_name=${testName}&test_owner=mnbvcxz`, {\n      method: \"POST\",\n      body: formData\n    });\n\n    // Kiểm tra phản hồi HTTP\n    if (response.status == 400) {\n      throw new Error(`Upload thất bại: Bộ đề đã tồn tại! chọn bộ đề khác`);\n    }\n    if (!response.ok) {\n      throw new Error(`Upload thất bại: ${response.statusText}`);\n    }\n\n    // Giải mã JSON từ server\n    const result = await response.json();\n    console.log(\"Upload thành công:\", result);\n    return {\n      message: \"Upload thành công!\",\n      data: result\n    };\n  } catch (error) {\n    console.error(\"Lỗi khi upload file:\", error.message);\n    throw new Error(`Lỗi upload: ${error.message}`);\n  }\n};\nexport const getTestByUserId = async userId => {\n  try {\n    const response = await fetch(`http://127.0.0.1:8000/api/test/user/${userId}`, {\n      method: 'GET',\n      // Phương thức HTTP\n      headers: {\n        'Content-Type': 'application/json'\n        //   Authorization: `Bearer YOUR_API_TOKEN`, // Nếu API yêu cầu token\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch test with ID: ${userId}, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};","map":{"version":3,"names":["getTest","testName","response","fetch","testId","method","headers","ok","Error","status","data","json","questions","error","console","uploadTestToServer","file","formData","FormData","append","body","statusText","result","log","message","getTestByUserId","userId"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Test/service.ts"],"sourcesContent":["export const getTest = async (testName: string): Promise<any> => {\r\n    try {\r\n      const response = await fetch(`http://127.0.0.1:8000/api/test/${testId}`, {\r\n        method: 'GET', // Phương thức HTTP\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        //   Authorization: `Bearer YOUR_API_TOKEN`, // Nếu API yêu cầu token\r\n        },\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch test with ID: ${testId}, Status: ${response.status}`);\r\n      }\r\n  \r\n      // Phân tích dữ liệu từ response JSON\r\n      const data = await response.json();\r\n      return data.questions;\r\n  \r\n    } catch (error) {\r\n      console.error('Error fetching test data:', error);\r\n      throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n  };\r\n\r\n  export const uploadTestToServer = async (file: File, testName: string): Promise<{ message: string; data?: any }> => {\r\n    // Kiểm tra nếu không có file\r\n    if (!file) {\r\n      throw new Error(\"Không có file nào được chọn!\");\r\n    }\r\n  \r\n    // Tạo đối tượng FormData để đóng gói file\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n  \r\n    try {\r\n      // Gửi yêu cầu POST tới server\r\n      const response = await fetch(`http://127.0.0.1:8000/api/test/upload?test_name=${testName}&test_owner=mnbvcxz`, {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n  \r\n      // Kiểm tra phản hồi HTTP\r\n      if (response.status == 400) {\r\n        throw new Error(`Upload thất bại: Bộ đề đã tồn tại! chọn bộ đề khác`);\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Upload thất bại: ${response.statusText}`);\r\n      }\r\n  \r\n      // Giải mã JSON từ server\r\n      const result = await response.json();\r\n      console.log(\"Upload thành công:\", result);\r\n      return { message: \"Upload thành công!\", data: result };\r\n    } catch (error: any) {\r\n      console.error(\"Lỗi khi upload file:\", error.message);\r\n      throw new Error(`Lỗi upload: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  export const getTestByUserId = async (userId: string): Promise<any> => {\r\n    try {\r\n      const response = await fetch(`http://127.0.0.1:8000/api/test/user/${userId}`, {\r\n        method: 'GET', // Phương thức HTTP\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        //   Authorization: `Bearer YOUR_API_TOKEN`, // Nếu API yêu cầu token\r\n        },\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to fetch test with ID: ${userId}, Status: ${response.status}`);\r\n      }\r\n  \r\n      // Phân tích dữ liệu từ response JSON\r\n      const data = await response.json();\r\n      return data;\r\n  \r\n    } catch (error) {\r\n      console.error('Error fetching test data:', error);\r\n      throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n  };\r\n  "],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG,MAAOC,QAAgB,IAAmB;EAC7D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkCC,MAAM,EAAE,EAAE;MACvEC,MAAM,EAAE,KAAK;MAAE;MACfC,OAAO,EAAE;QACP,cAAc,EAAE;QAClB;MACA;IACF,CAAC,CAAC;IAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiCJ,MAAM,aAAaF,QAAQ,CAACO,MAAM,EAAE,CAAC;IACxF;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,SAAS;EAEvB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAED,OAAO,MAAME,kBAAkB,GAAG,MAAAA,CAAOC,IAAU,EAAEf,QAAgB,KAA+C;EAClH;EACA,IAAI,CAACe,IAAI,EAAE;IACT,MAAM,IAAIR,KAAK,CAAC,8BAA8B,CAAC;EACjD;;EAEA;EACA,MAAMS,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAE7B,IAAI;IACF;IACA,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,mDAAmDF,QAAQ,qBAAqB,EAAE;MAC7GI,MAAM,EAAE,MAAM;MACde,IAAI,EAAEH;IACR,CAAC,CAAC;;IAEF;IACA,IAAIf,QAAQ,CAACO,MAAM,IAAI,GAAG,EAAE;MAC1B,MAAM,IAAID,KAAK,CAAC,oDAAoD,CAAC;IACvE;IAEA,IAAI,CAACN,QAAQ,CAACK,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoBN,QAAQ,CAACmB,UAAU,EAAE,CAAC;IAC5D;;IAEA;IACA,MAAMC,MAAM,GAAG,MAAMpB,QAAQ,CAACS,IAAI,CAAC,CAAC;IACpCG,OAAO,CAACS,GAAG,CAAC,oBAAoB,EAAED,MAAM,CAAC;IACzC,OAAO;MAAEE,OAAO,EAAE,oBAAoB;MAAEd,IAAI,EAAEY;IAAO,CAAC;EACxD,CAAC,CAAC,OAAOT,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACW,OAAO,CAAC;IACpD,MAAM,IAAIhB,KAAK,CAAC,eAAeK,KAAK,CAACW,OAAO,EAAE,CAAC;EACjD;AACF,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG,MAAOC,MAAc,IAAmB;EACrE,IAAI;IACF,MAAMxB,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuCuB,MAAM,EAAE,EAAE;MAC5ErB,MAAM,EAAE,KAAK;MAAE;MACfC,OAAO,EAAE;QACP,cAAc,EAAE;QAClB;MACA;IACF,CAAC,CAAC;IAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiCkB,MAAM,aAAaxB,QAAQ,CAACO,MAAM,EAAE,CAAC;IACxF;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EAEb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}