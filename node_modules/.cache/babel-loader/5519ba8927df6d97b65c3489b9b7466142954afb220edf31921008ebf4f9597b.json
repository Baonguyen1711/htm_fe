{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { usePlayer } from \"../../context/playerContext\";\nimport { setSelectedRow, setCorrectRow, setIncorectRow } from \"../../components/services\";\nimport { listenToCorrectRow, listenToIncorrectRow, listenToSelectRow, listenToQuestions, listenToObstacle } from \"../../services/firebaseServices\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { getNextQuestion } from \"../../pages/Host/Test/service\";\nimport { openObstacle } from \"../../components/services\";\nimport { generateGrid } from \"../../pages/User/Round2/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nconst mainKeyword = \"BÒCÔNGANH\";\nconst QuestionBoxRound2 = ({\n  obstacleWord,\n  hintWordArray,\n  initialGrid,\n  isHost = false\n}) => {\n  _s();\n  console.log(\"initialGrid inside player\", initialGrid);\n  const [searchParams] = useSearchParams();\n  const {\n    setInitialGrid\n  } = usePlayer();\n  const roomId = searchParams.get(\"roomId\") || \"\";\n  const testName = searchParams.get(\"testName\") || \"\";\n  const GRID_SIZE = 20;\n  const [grid, setGrid] = useState([[]]);\n  const [hintWords, setHintWords] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState();\n  const [markedCharacters, setMarkedCharacter] = useState({});\n  const [cellStyles, setCellStyles] = useState({}); // Tracks background and text styles\n  const [menu, setMenu] = useState({\n    visible: false\n  });\n  const [hintWordsLength, setHintWordsLength] = useState([]);\n  useEffect(() => {\n    const markedCharactersArray = {};\n    if (hintWordArray) {\n      for (var word of hintWordArray) {}\n    }\n  }, []);\n  useEffect(() => {\n    const generateInitialGrid = async () => {\n      if (hintWordArray) {\n        if (isHost) {\n          console.log(\"hintWordArray\", hintWordArray);\n          console.log(\"obstacle\", obstacleWord);\n          const result = await generateGrid(hintWordArray, 20);\n          console.log(\"board\", result.grid);\n          setHintWords(result.placementArray);\n          setGrid(result.grid);\n          const blankGrid = result.grid.map((row, rowIndex) => row.map((cell, colIndex) => result.grid[rowIndex][colIndex].includes(\"number\") ? cell :\n          // Keep \"numberX\"\n          cell !== \" \" && cell !== \"\" ? \"1\" : \"\" // Non-empty to \"1\", empty stays \"\"\n          ));\n          setInitialGrid(blankGrid);\n        }\n      }\n      if (initialGrid) {\n        setGrid(initialGrid);\n      }\n    };\n    generateInitialGrid();\n  }, [hintWordArray, obstacleWord, initialGrid]);\n  const menuRef = useRef(null);\n  const isSelectMounted = useRef(false);\n  const isIncorrectMounted = useRef(false);\n  const isCorrectMounted = useRef(false);\n  const revealCells = (rowIndex, colIndex, action, hintWordNumber) => {\n    if (!isHost) return;\n    const hintWordIndex = hintWordNumber ? parseInt(hintWordNumber) : -1;\n    const hintWord = hintWords.find(word => word.index === hintWordIndex);\n    console.log(\"hintWord\", hintWord);\n    console.log(\"hintWords\", hintWords);\n    if (!hintWord) return;\n    const isRow = hintWord.dir === 1;\n    console.log(hintWord, \"is\", hintWord.dir);\n    const wordLength = hintWord.string.length - 3;\n    const startIndex = isRow ? colIndex + 1 : rowIndex + 1;\n    const handleNextQuestion = async (testName, hintWordIndex, round, roomId) => {\n      await getNextQuestion(testName, hintWordIndex, round, roomId);\n    };\n    setCellStyles(prev => {\n      const newStyles = {\n        ...prev\n      };\n      if (isRow) {\n        for (let col = startIndex; col < startIndex + wordLength; col++) {\n          if (col == GRID_SIZE) break;\n          const key = `${rowIndex}-${col}`;\n          // Skip number cells to preserve their appearance\n          console.log(\"grid[rowIndex][col]\", grid[rowIndex][col]);\n          console.log(\"rowIndex\", rowIndex);\n          console.log(\"col\", col);\n          if (!grid[rowIndex][col].includes(\"number\")) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) {\n                setSelectedRow(roomId, hintWordNumber, true, wordLength);\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId);\n              }\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-black\"\n              };\n              let indexInTarget = [];\n              if (hintWordArray) for (let i = 2; i < wordLength; i++) {\n                const char = hintWord.char[i];\n                if (obstacleWord) {\n                  if (obstacleWord.includes(char)) {\n                    indexInTarget.push(i);\n                  }\n                }\n              }\n              if (hintWordArray && hintWordNumber) {\n                console.log(\"hintWordNumber\", hintWordNumber);\n                console.log(\"hintWord\", hintWord);\n                console.log(\"hintWord.string.slice(2, hintWord.string.length-1)\", hintWord.string.slice(2, hintWord.string.length - 1));\n                setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), true, wordLength);\n              }\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setIncorectRow(roomId, hintWordNumber, true, wordLength);\n            }\n          }\n        }\n      } else {\n        for (let row = startIndex; row < startIndex + wordLength; row++) {\n          if (row == GRID_SIZE) break;\n          const key = `${row}-${colIndex}`;\n          console.log(\"grid[row][colIndex]\", grid[row][colIndex]);\n          console.log(\"colIndex\", colIndex);\n          console.log(\"row\", row);\n          // Skip number cells to preserve their appearance\n          if (!grid[row][colIndex].includes(\"number\")) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) {\n                setSelectedRow(roomId, hintWordNumber, false, wordLength);\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId);\n              }\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-black\"\n              };\n              let indexInTarget = [];\n              if (hintWordArray) for (let i = 0; i < hintWordArray[hintWordIndex].length; i++) {\n                const char = hintWordArray[hintWordIndex][i];\n                if (obstacleWord) {\n                  if (obstacleWord.includes(char)) {\n                    indexInTarget.push(i);\n                  }\n                }\n              }\n              if (hintWordArray && hintWordNumber) setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), false, wordLength);\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setIncorectRow(roomId, hintWordNumber, false, wordLength);\n            }\n          }\n        }\n      }\n      return newStyles;\n    });\n\n    // if (action === \"correct\" || action === \"incorrect\") {\n    //   setSelectedRow(roomId, isRow ? rowIndex.toString() : colIndex.toString());\n    // }\n  };\n  const revealCellsForPlayer = (rowIndex, colIndex, action, selectedRowNumber, markedCharacterIndex, isRow, wordLength, correctAnswer // For correct\n  ) => {\n    if (isHost) return; // Ensure this runs only for players\n\n    // Determine word length\n    const length = action === \"correct\" ? (correctAnswer === null || correctAnswer === void 0 ? void 0 : correctAnswer.length) || 0 : wordLength || 0;\n    if (length === 0) {\n      console.warn(`No valid word length for row ${selectedRowNumber}`);\n      return;\n    }\n    setCellStyles(prev => {\n      const newStyles = {\n        ...prev\n      };\n      if (isRow) {\n        // Horizontal: style cells from colIndex + 1 to colIndex + length\n        for (let col = colIndex + 1; col <= colIndex + length; col++) {\n          var _grid$rowIndex$col;\n          const key = `${rowIndex}-${col}`;\n          // Skip empty and number cells\n          if (grid[rowIndex][col] !== \"\" && !((_grid$rowIndex$col = grid[rowIndex][col]) !== null && _grid$rowIndex$col !== void 0 && _grid$rowIndex$col.includes(\"number\"))) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: JSON.parse(decodeURIComponent(markedCharacterIndex)).includes(col) ? \"text-red-600\" : \"text-black\"\n              };\n            }\n          }\n        }\n      } else {\n        // Vertical: style cells from rowIndex + 1 to rowIndex + length\n        for (let row = rowIndex + 1; row <= rowIndex + length; row++) {\n          var _grid$row$colIndex;\n          const key = `${row}-${colIndex}`;\n          // Skip empty and number cells\n          if (grid[row][colIndex] !== \"\" && !((_grid$row$colIndex = grid[row][colIndex]) !== null && _grid$row$colIndex !== void 0 && _grid$row$colIndex.includes(\"number\"))) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: JSON.parse(decodeURIComponent(markedCharacterIndex)).includes(row) ? \"text-red-600\" : \"text-black\"\n              };\n            }\n          }\n        }\n      }\n      return newStyles;\n    });\n\n    // For \"correct\", update grid to show the actual word\n    if (action === \"correct\" && correctAnswer) {\n      setGrid(prevGrid => {\n        const newGrid = prevGrid.map(row => [...row]);\n        if (isRow) {\n          for (let col = colIndex + 1, i = 0; col <= colIndex + length && i < correctAnswer.length; col++, i++) {\n            newGrid[rowIndex][col] = correctAnswer[i];\n          }\n        } else {\n          for (let row = rowIndex + 1, i = 0; row <= rowIndex + length && i < correctAnswer.length; row++, i++) {\n            newGrid[row][colIndex] = correctAnswer[i];\n          }\n        }\n        return newGrid;\n      });\n    }\n  };\n  // useEffect(() => {\n  //   if (hintWordArray) {\n  //     hintWordArray.forEach((word, index) => {\n  //       console.log(`Word ${index}: '${word}' has length: ${word.length}`);\n  //       console.log([...word]);\n  //     });\n  //     const lengthArray = hintWordArray.map((word) => word.length);\n  //     setHintWordsLength(lengthArray);\n  //   }\n  // }, [hintWordArray]);\n\n  useEffect(() => {\n    const unsubscribePlayers = listenToObstacle(roomId, obstacle => {\n      // setCurrentQuestion(question)\n      // console.log(\"current question\", question)\n      const obstacleRevealed = {\n        \"question\": obstacle\n      };\n      setCurrentQuestion(obstacleRevealed);\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col].includes(\"number\")) {\n            revealCellsForPlayer(row, col, \"correct\", grid[row][col].replace(\"number\", \"\"), \"\");\n          }\n        }\n      }\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToQuestions(roomId, question => {\n      setCurrentQuestion(question);\n      console.log(\"current question\", question);\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  // Listen for \"open\" (select) signal\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeSelect = listenToSelectRow(roomId, data => {\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      let rowIndex = -1;\n      let colIndex = -1;\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"open\", data.selected_row_number, data.is_row, data.word_length);\n    });\n    return () => {\n      unsubscribeSelect();\n    };\n  }, [roomId, grid]);\n\n  // Listen for \"incorrect\" signal\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeIncorrect = listenToIncorrectRow(roomId, data => {\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      let rowIndex = -1;\n      let colIndex = -1;\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"incorrect\", data.selected_row_number, data.is_row, data.word_length);\n    });\n    return () => {\n      unsubscribeIncorrect();\n    };\n  }, [roomId, grid]);\n\n  // Listen for \"correct\" signal\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeCorrect = listenToCorrectRow(roomId, data => {\n      console.log(\"isInitialCall\", isInitialCall);\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      console.log(\"isInitialCall after\", isInitialCall);\n      let rowIndex = -1;\n      let colIndex = -1;\n      console.log(\"grid\", grid);\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"correct\", data.selected_row_number, data.is_row, undefined, data.correct_answer, data.marked_character_index);\n    });\n    return () => {\n      unsubscribeCorrect();\n    };\n  }, [roomId, grid]);\n\n  // Reveal cells in a row or column\n\n  // Handle number click to show menu\n  const handleNumberClick = (rowIndex, colIndex) => {\n    if (!isHost) return;\n    setMenu({\n      visible: true,\n      rowIndex,\n      colIndex\n    });\n  };\n\n  // Handle menu actions\n  const handleMenuAction = (action, rowIndex, colIndex, hintWordNumber) => {\n    revealCells(rowIndex, colIndex, action, hintWordNumber);\n    setMenu({\n      visible: false\n    });\n  };\n\n  // Handle cell click to reveal\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (!isHost) return;\n    revealCells(rowIndex, colIndex, \"open\");\n  };\n  const handleOpenObstacle = async () => {\n    if (!isHost || !hintWords || !hintWordArray) return;\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (Number.isFinite(Number(grid[row][col]))) {\n          revealCells(row, col, \"correct\", grid[row][col]);\n        }\n      }\n    }\n    if (obstacleWord) {\n      await openObstacle(roomId, obstacleWord);\n    }\n  };\n\n  // Close menu on outside click\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setMenu({\n          visible: false\n        });\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6 relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\",\n      children: typeof (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question) === \"string\" ? currentQuestion.question : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\",\n      children: !grid || !Array.isArray(grid) || !grid.every(row => Array.isArray(row)) ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Invalid grid data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 11\n      }, this) : grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map((cell, colIndex) => {\n          const cellKey = `${rowIndex}-${colIndex}`;\n          const cellStyle = cellStyles[cellKey] || {\n            background: cell === \"\" || cell === \" \" ? \"bg-white\" : \"bg-gray-50\",\n            textColor: cell.includes(\"number\") ? \"text-blue-500\" : \"text-transparent\"\n          };\n          const showMenu = menu.visible && menu.rowIndex === rowIndex && menu.colIndex === colIndex && cell.includes(\"number\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `w-10 h-10 flex items-center justify-center text-lg font-semibold select-none\n                      ${cell.includes(\"number\") ? \"text-blue-500 border-none\" : \"\"}\n                      ${cell.includes(\"number\") ? \"\" : cellStyle.background}\n                      ${cell.includes(\"number\") ? \"text-blue-500\" : cellStyle.textColor}\n                      ${obstacleWord !== null && obstacleWord !== void 0 && obstacleWord.includes(cell) && cellStyle.textColor === \"text-black\" && !cell.includes(\"number\") && isNaN(Number(cell)) ? \"font-bold text-red-500\" : \"\"}\n                    `,\n              onClick: () => {\n                if (isHost) {\n                  if (cell.includes(\"number\")) {\n                    handleNumberClick(rowIndex, colIndex);\n                  } else {\n                    handleCellClick(rowIndex, colIndex);\n                  }\n                }\n              },\n              style: {\n                cursor: isHost && (cell.includes(\"number\") || hintWords.some(word => word.y === rowIndex || word.x === colIndex)) ? \"pointer\" : \"default\"\n              },\n              children: typeof cell === \"string\" || typeof cell === \"number\" ? cell.includes(\"number\") ? cell.replace(\"number\", \"\") : cell : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 21\n            }, this), showMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: menuRef,\n              className: \"absolute left-12 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\",\n                onClick: () => handleMenuAction(\"open\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"SELECT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 623,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600\",\n                onClick: () => handleMenuAction(\"correct\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"Correct\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 631,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600\",\n                onClick: () => handleMenuAction(\"incorrect\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"Incorrect\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 639,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 23\n            }, this)]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 19\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }, this), isHost && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        alert('Mở cnv!');\n        handleOpenObstacle();\n      },\n      className: \"bg-green-500 text-white p-2 flex-1 rounded-md\",\n      children: \"M\\u1EDF CNV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 552,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionBoxRound2, \"fgg2EFTFVPaIbEqe4w8Yu+I4gyg=\", false, function () {\n  return [useSearchParams, usePlayer];\n});\n_c = QuestionBoxRound2;\nexport default QuestionBoxRound2;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound2\");","map":{"version":3,"names":["React","useState","useEffect","useRef","usePlayer","setSelectedRow","setCorrectRow","setIncorectRow","listenToCorrectRow","listenToIncorrectRow","listenToSelectRow","listenToQuestions","listenToObstacle","useSearchParams","getNextQuestion","openObstacle","generateGrid","jsxDEV","_jsxDEV","mainKeyword","QuestionBoxRound2","obstacleWord","hintWordArray","initialGrid","isHost","_s","console","log","searchParams","setInitialGrid","roomId","get","testName","GRID_SIZE","grid","setGrid","hintWords","setHintWords","currentQuestion","setCurrentQuestion","markedCharacters","setMarkedCharacter","cellStyles","setCellStyles","menu","setMenu","visible","hintWordsLength","setHintWordsLength","markedCharactersArray","word","generateInitialGrid","result","placementArray","blankGrid","map","row","rowIndex","cell","colIndex","includes","menuRef","isSelectMounted","isIncorrectMounted","isCorrectMounted","revealCells","action","hintWordNumber","hintWordIndex","parseInt","hintWord","find","index","isRow","dir","wordLength","string","length","startIndex","handleNextQuestion","round","prev","newStyles","col","key","background","textColor","toString","indexInTarget","i","char","push","slice","encodeURIComponent","JSON","stringify","revealCellsForPlayer","selectedRowNumber","markedCharacterIndex","correctAnswer","warn","_grid$rowIndex$col","parse","decodeURIComponent","_grid$row$colIndex","prevGrid","newGrid","unsubscribePlayers","obstacle","obstacleRevealed","replace","question","isInitialCall","unsubscribeSelect","data","selected_row_number","is_row","word_length","unsubscribeIncorrect","unsubscribeCorrect","undefined","correct_answer","marked_character_index","handleNumberClick","handleMenuAction","handleCellClick","handleOpenObstacle","Number","isFinite","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","every","Fragment","cellKey","cellStyle","showMenu","isNaN","onClick","style","cursor","some","y","x","ref","alert","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round2.tsx"],"sourcesContent":["import Play from \"../Play\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { renderGrid } from \"./utils\";\r\nimport { usePlayer } from \"../../context/playerContext\";\r\nimport { setSelectedRow, setCorrectRow, setIncorectRow } from \"../../components/services\";\r\nimport { listenToCorrectRow, listenToIncorrectRow, listenToSelectRow, listenToQuestions, listenToObstacle } from \"../../services/firebaseServices\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { getNextQuestion } from \"../../pages/Host/Test/service\";\r\nimport { openObstacle } from \"../../components/services\";\r\nimport { generateGrid } from \"../../pages/User/Round2/utils\";\r\n\r\n\r\n\r\ninterface HintWord {\r\n  word: string;\r\n  x: number;\r\n  y: number;\r\n  direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\n\r\n\r\ninterface MatchPosition {\r\n  x: number;\r\n  y: number;\r\n  dir: number;\r\n}\r\n\r\ninterface WordObj {\r\n  string: string;\r\n  char: string[];\r\n  totalMatches: number;\r\n  effectiveMatches: number;\r\n  successfulMatches: MatchPosition[];\r\n  x: number;\r\n  y: number;\r\n  dir: number;\r\n  index: number;\r\n};\r\n\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n  obstacleWord?: string;\r\n  hintWordArray?: string[];\r\n  isHost?: boolean;\r\n  initialGrid?: string[][];\r\n}\r\n\r\ninterface QuestionBoxProps {\r\n  question: string;\r\n  imageUrl?: string;\r\n  isHost?: boolean\r\n}\r\n\r\nconst mainKeyword = \"BÒCÔNGANH\";\r\n\r\nconst QuestionBoxRound2: React.FC<ObstacleQuestionBoxProps> = ({\r\n  obstacleWord,\r\n  hintWordArray,\r\n  initialGrid,\r\n  isHost = false,\r\n}) => {\r\n  console.log(\"initialGrid inside player\", initialGrid);\r\n  const [searchParams] = useSearchParams();\r\n  const { setInitialGrid } = usePlayer();\r\n  const roomId = searchParams.get(\"roomId\") || \"\";\r\n  const testName = searchParams.get(\"testName\") || \"\"\r\n  const GRID_SIZE = 20;\r\n\r\n  const [grid, setGrid] = useState<string[][]>([[]]);\r\n  const [hintWords, setHintWords] = useState<WordObj[]>([]);\r\n  const [currentQuestion, setCurrentQuestion] = useState<QuestionBoxProps>()\r\n  const [markedCharacters, setMarkedCharacter] = useState({})\r\n  const [cellStyles, setCellStyles] = useState<\r\n    Record<string, { background: string; textColor: string }>\r\n  >({}); // Tracks background and text styles\r\n  const [menu, setMenu] = useState<{\r\n    visible: boolean;\r\n    rowIndex?: number;\r\n    colIndex?: number;\r\n  }>({ visible: false });\r\n  const [hintWordsLength, setHintWordsLength] = useState<number[]>([]);\r\n  useEffect(()=> {\r\n    const markedCharactersArray = {}\r\n    if(hintWordArray){\r\n      for (var word of hintWordArray) {\r\n        \r\n      }\r\n    }\r\n  },[])\r\n\r\n  useEffect(() => {\r\n    const generateInitialGrid = async () => {\r\n      if (hintWordArray) {\r\n        if (isHost) {\r\n          console.log(\"hintWordArray\", hintWordArray);\r\n          console.log(\"obstacle\", obstacleWord);\r\n\r\n          const result = await generateGrid(hintWordArray, 20)\r\n          console.log(\"board\", result.grid);\r\n          setHintWords(result.placementArray)\r\n          setGrid(result.grid)\r\n\r\n          const blankGrid = result.grid.map((row, rowIndex) =>\r\n            row.map((cell, colIndex) =>\r\n              result.grid[rowIndex][colIndex].includes(\"number\") ? cell : // Keep \"numberX\"\r\n                (cell !== \" \" && cell !== \"\") ? \"1\" : \"\" // Non-empty to \"1\", empty stays \"\"\r\n            )\r\n          );\r\n          setInitialGrid(blankGrid)\r\n        }\r\n      }\r\n\r\n      if (initialGrid) {\r\n        setGrid(initialGrid)\r\n      }\r\n    }\r\n\r\n    generateInitialGrid()\r\n  }, [hintWordArray, obstacleWord, initialGrid])\r\n\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n  const isSelectMounted = useRef(false);\r\n  const isIncorrectMounted = useRef(false);\r\n  const isCorrectMounted = useRef(false);\r\n  const revealCells = (\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    action: \"open\" | \"correct\" | \"incorrect\",\r\n    hintWordNumber?: string\r\n  ) => {\r\n    if (!isHost) return;\r\n\r\n    const hintWordIndex = hintWordNumber ? parseInt(hintWordNumber) : -1;\r\n    const hintWord = hintWords.find(\r\n      (word) =>\r\n        (word.index === hintWordIndex)\r\n    );\r\n\r\n    console.log(\"hintWord\", hintWord);\r\n    console.log(\"hintWords\", hintWords);\r\n\r\n\r\n    if (!hintWord) return;\r\n\r\n    const isRow = hintWord.dir === 1;\r\n    console.log(hintWord, \"is\", hintWord.dir);\r\n\r\n    const wordLength = hintWord.string.length - 3;\r\n    const startIndex = isRow ? colIndex + 1 : rowIndex + 1;\r\n\r\n    const handleNextQuestion = async (testName: string, hintWordIndex: string, round: string, roomId: string) => {\r\n      await getNextQuestion(testName, hintWordIndex, round, roomId)\r\n    }\r\n\r\n    setCellStyles((prev) => {\r\n      const newStyles = { ...prev };\r\n      if (isRow) {\r\n        for (let col = startIndex; col < startIndex + wordLength; col++) {\r\n          if (col == GRID_SIZE) break\r\n          const key = `${rowIndex}-${col}`;\r\n          // Skip number cells to preserve their appearance\r\n          console.log(\"grid[rowIndex][col]\", grid[rowIndex][col])\r\n          console.log(\"rowIndex\", rowIndex);\r\n          console.log(\"col\", col);\r\n\r\n          if (!grid[rowIndex][col].includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber) {\r\n                setSelectedRow(roomId, hintWordNumber, true, wordLength)\r\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId)\r\n              }\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-black\" };\r\n              let indexInTarget = []\r\n              if (hintWordArray)\r\n                for (let i = 2; i < wordLength; i++) {\r\n                  const char = hintWord.char[i];\r\n                  if (obstacleWord) {\r\n                    if(obstacleWord.includes(char)) {\r\n                      indexInTarget.push(i)\r\n                    }\r\n                  }\r\n                }\r\n              if (hintWordArray && hintWordNumber) {\r\n                console.log(\"hintWordNumber\", hintWordNumber);\r\n                console.log(\"hintWord\", hintWord);\r\n                console.log(\"hintWord.string.slice(2, hintWord.string.length-1)\", hintWord.string.slice(2, hintWord.string.length - 1));\r\n\r\n\r\n                setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), true, wordLength)\r\n              }\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setIncorectRow(roomId, hintWordNumber, true, wordLength)\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        for (let row = startIndex; row < startIndex + wordLength; row++) {\r\n          if (row == GRID_SIZE) break\r\n          const key = `${row}-${colIndex}`;\r\n          console.log(\"grid[row][colIndex]\", grid[row][colIndex])\r\n          console.log(\"colIndex\", colIndex);\r\n          console.log(\"row\", row);\r\n          // Skip number cells to preserve their appearance\r\n          if (!grid[row][colIndex].includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber) {\r\n                setSelectedRow(roomId, hintWordNumber, false, wordLength)\r\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId)\r\n              }\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-black\" };\r\n              let indexInTarget = []\r\n              if (hintWordArray)\r\n                for (let i = 0; i < hintWordArray[hintWordIndex].length; i++) {\r\n                  const char = hintWordArray[hintWordIndex][i];\r\n                  if (obstacleWord) {\r\n                    if(obstacleWord.includes(char)) {\r\n                      indexInTarget.push(i)\r\n                    }\r\n                  }\r\n\r\n\r\n                }\r\n              if (hintWordArray && hintWordNumber)\r\n                setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), false, wordLength)\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setIncorectRow(roomId, hintWordNumber, false, wordLength)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return newStyles;\r\n    });\r\n\r\n    // if (action === \"correct\" || action === \"incorrect\") {\r\n    //   setSelectedRow(roomId, isRow ? rowIndex.toString() : colIndex.toString());\r\n    // }\r\n  };\r\n\r\n\r\n  const revealCellsForPlayer = (\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    action: \"open\" | \"incorrect\" | \"correct\",\r\n    selectedRowNumber: string,\r\n    markedCharacterIndex: string,\r\n    isRow?: boolean,\r\n    wordLength?: number, // For open and incorrect\r\n    correctAnswer?: string, // For correct\r\n  ) => {\r\n    if (isHost) return; // Ensure this runs only for players\r\n\r\n    // Determine word length\r\n    const length = action === \"correct\" ? correctAnswer?.length || 0 : wordLength || 0;\r\n\r\n    if (length === 0) {\r\n      console.warn(`No valid word length for row ${selectedRowNumber}`);\r\n      return;\r\n    }\r\n\r\n    setCellStyles((prev) => {\r\n      const newStyles = { ...prev };\r\n      if (isRow) {\r\n        // Horizontal: style cells from colIndex + 1 to colIndex + length\r\n        for (let col = colIndex + 1; col <= colIndex + length; col++) {\r\n          const key = `${rowIndex}-${col}`;\r\n          // Skip empty and number cells\r\n          if (grid[rowIndex][col] !== \"\" && !grid[rowIndex][col]?.includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = {\r\n                background: \"bg-yellow-200\",\r\n                textColor: JSON.parse(decodeURIComponent(markedCharacterIndex)).includes(col) ? \"text-red-600\" : \"text-black\"\r\n              };\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // Vertical: style cells from rowIndex + 1 to rowIndex + length\r\n        for (let row = rowIndex + 1; row <= rowIndex + length; row++) {\r\n          const key = `${row}-${colIndex}`;\r\n          // Skip empty and number cells\r\n          if (grid[row][colIndex] !== \"\" && !grid[row][colIndex]?.includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = {\r\n                background: \"bg-yellow-200\",\r\n                textColor: JSON.parse(decodeURIComponent(markedCharacterIndex)).includes(row) ? \"text-red-600\" : \"text-black\"\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return newStyles;\r\n    });\r\n\r\n    // For \"correct\", update grid to show the actual word\r\n    if (action === \"correct\" && correctAnswer) {\r\n      setGrid((prevGrid) => {\r\n        const newGrid = prevGrid.map((row) => [...row]);\r\n        if (isRow) {\r\n          for (let col = colIndex + 1, i = 0; col <= colIndex + length && i < correctAnswer.length; col++, i++) {\r\n            newGrid[rowIndex][col] = correctAnswer[i];\r\n          }\r\n        } else {\r\n          for (let row = rowIndex + 1, i = 0; row <= rowIndex + length && i < correctAnswer.length; row++, i++) {\r\n            newGrid[row][colIndex] = correctAnswer[i];\r\n          }\r\n        }\r\n        return newGrid;\r\n      });\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   if (hintWordArray) {\r\n  //     hintWordArray.forEach((word, index) => {\r\n  //       console.log(`Word ${index}: '${word}' has length: ${word.length}`);\r\n  //       console.log([...word]);\r\n  //     });\r\n  //     const lengthArray = hintWordArray.map((word) => word.length);\r\n  //     setHintWordsLength(lengthArray);\r\n  //   }\r\n  // }, [hintWordArray]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const unsubscribePlayers = listenToObstacle(roomId, (obstacle) => {\r\n      // setCurrentQuestion(question)\r\n      // console.log(\"current question\", question)\r\n      const obstacleRevealed = {\r\n        \"question\": obstacle\r\n      }\r\n\r\n      setCurrentQuestion(obstacleRevealed)\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col].includes(\"number\")) {\r\n            revealCellsForPlayer(row, col, \"correct\", grid[row][col].replace(\"number\", \"\"), \"\")\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // No need to set state here; it's handled by useState initializer\r\n    return () => {\r\n      unsubscribePlayers();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const unsubscribePlayers = listenToQuestions(roomId, (question) => {\r\n      setCurrentQuestion(question)\r\n      console.log(\"current question\", question)\r\n\r\n    });\r\n\r\n    // No need to set state here; it's handled by useState initializer\r\n    return () => {\r\n      unsubscribePlayers();\r\n    };\r\n  }, []);\r\n  // Listen for \"open\" (select) signal\r\n  useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeSelect = listenToSelectRow(roomId, (data) => {\r\n\r\n      if (isInitialCall) {\r\n        isInitialCall = false;\r\n        return; // Skip the initial snapshot\r\n      }\r\n\r\n\r\n      let rowIndex = -1;\r\n      let colIndex = -1;\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col] === `number${data.selected_row_number}`) {\r\n            rowIndex = row;\r\n            colIndex = col;\r\n            break;\r\n          }\r\n        }\r\n        if (rowIndex !== -1) break;\r\n      }\r\n\r\n      if (rowIndex === -1 || colIndex === -1) {\r\n        console.warn(`Number cell number${data.selected_row_number} not found`);\r\n        return;\r\n      }\r\n\r\n      revealCellsForPlayer(rowIndex, colIndex, \"open\", data.selected_row_number, data.is_row, data.word_length);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeSelect();\r\n    };\r\n  }, [roomId, grid]);\r\n\r\n  // Listen for \"incorrect\" signal\r\n  useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeIncorrect = listenToIncorrectRow(roomId, (data) => {\r\n      if (isInitialCall) {\r\n        isInitialCall = false;\r\n        return; // Skip the initial snapshot\r\n      }\r\n\r\n      let rowIndex = -1;\r\n      let colIndex = -1;\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col] === `number${data.selected_row_number}`) {\r\n            rowIndex = row;\r\n            colIndex = col;\r\n            break;\r\n          }\r\n        }\r\n        if (rowIndex !== -1) break;\r\n      }\r\n\r\n      if (rowIndex === -1 || colIndex === -1) {\r\n        console.warn(`Number cell number${data.selected_row_number} not found`);\r\n        return;\r\n      }\r\n\r\n      revealCellsForPlayer(rowIndex, colIndex, \"incorrect\", data.selected_row_number, data.is_row, data.word_length);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeIncorrect();\r\n    };\r\n  }, [roomId, grid]);\r\n\r\n  // Listen for \"correct\" signal\r\n  useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeCorrect = listenToCorrectRow(\r\n      roomId,\r\n      (data) => {\r\n        console.log(\"isInitialCall\", isInitialCall);\r\n\r\n        if (isInitialCall) {\r\n          isInitialCall = false;\r\n          return; // Skip the initial snapshot\r\n        }\r\n\r\n        console.log(\"isInitialCall after\", isInitialCall);\r\n        let rowIndex = -1;\r\n        let colIndex = -1;\r\n        console.log(\"grid\", grid);\r\n\r\n        for (let row = 0; row < grid.length; row++) {\r\n          for (let col = 0; col < grid[row].length; col++) {\r\n            if (grid[row][col] === `number${data.selected_row_number}`) {\r\n              rowIndex = row;\r\n              colIndex = col;\r\n              break;\r\n            }\r\n          }\r\n          if (rowIndex !== -1) break;\r\n        }\r\n\r\n        if (rowIndex === -1 || colIndex === -1) {\r\n          console.warn(`Number cell number${data.selected_row_number} not found`);\r\n          return;\r\n        }\r\n\r\n        revealCellsForPlayer(rowIndex, colIndex, \"correct\", data.selected_row_number, data.is_row, undefined, data.correct_answer, data.marked_character_index);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribeCorrect();\r\n    };\r\n  }, [roomId, grid]);\r\n\r\n\r\n  // Reveal cells in a row or column\r\n\r\n\r\n  // Handle number click to show menu\r\n  const handleNumberClick = (rowIndex: number, colIndex: number) => {\r\n    if (!isHost) return;\r\n    setMenu({\r\n      visible: true,\r\n      rowIndex,\r\n      colIndex,\r\n    });\r\n  };\r\n\r\n  // Handle menu actions\r\n  const handleMenuAction = (\r\n    action: \"open\" | \"correct\" | \"incorrect\",\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    hintWordNumber: string\r\n  ) => {\r\n    revealCells(rowIndex, colIndex, action, hintWordNumber);\r\n    setMenu({ visible: false });\r\n  };\r\n\r\n  // Handle cell click to reveal\r\n  const handleCellClick = (rowIndex: number, colIndex: number) => {\r\n    if (!isHost) return;\r\n    revealCells(rowIndex, colIndex, \"open\");\r\n  };\r\n\r\n  const handleOpenObstacle = async () => {\r\n    if (!isHost || !hintWords || !hintWordArray) return;\r\n\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid[row].length; col++) {\r\n        if (Number.isFinite(Number(grid[row][col]))) {\r\n          revealCells(row, col, \"correct\", grid[row][col])\r\n        }\r\n      }\r\n    }\r\n    if (obstacleWord) {\r\n\r\n      await openObstacle(roomId, obstacleWord)\r\n    }\r\n  }\r\n\r\n  // Close menu on outside click\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n        setMenu({ visible: false });\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6 relative\">\r\n      <div className=\"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\">\r\n        {typeof currentQuestion?.question === \"string\"\r\n          ? currentQuestion.question\r\n          : \"\"}\r\n      </div>\r\n      <div className=\"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\">\r\n\r\n\r\n        {(!grid || !Array.isArray(grid) || !grid.every(row => Array.isArray(row))) ?\r\n          <div>Invalid grid data</div>\r\n          :\r\n          grid.map((row, rowIndex) => (\r\n            <React.Fragment key={rowIndex}>\r\n              {row.map((cell, colIndex) => {\r\n                const cellKey = `${rowIndex}-${colIndex}`;\r\n                const cellStyle = cellStyles[cellKey] || {\r\n                  background: cell === \"\" || cell === \" \" ? \"bg-white\" : \"bg-gray-50\",\r\n                  textColor: cell.includes(\"number\") ? \"text-blue-500\" : \"text-transparent\",\r\n                };\r\n\r\n                const showMenu =\r\n                  menu.visible &&\r\n                  menu.rowIndex === rowIndex &&\r\n                  menu.colIndex === colIndex &&\r\n                  cell.includes(\"number\");\r\n\r\n                return (\r\n                  <div className=\"relative flex items-center\" key={colIndex}>\r\n                    <div\r\n                      className={`w-10 h-10 flex items-center justify-center text-lg font-semibold select-none\r\n                      ${cell.includes(\"number\") ? \"text-blue-500 border-none\" : \"\"}\r\n                      ${cell.includes(\"number\") ? \"\" : cellStyle.background}\r\n                      ${cell.includes(\"number\") ? \"text-blue-500\" : cellStyle.textColor}\r\n                      ${obstacleWord?.includes(cell) &&\r\n                          cellStyle.textColor === \"text-black\" &&\r\n                          !cell.includes(\"number\") &&\r\n                          isNaN(Number(cell))\r\n                          ? \"font-bold text-red-500\"\r\n                          : \"\"}\r\n                    `}\r\n                      onClick={() => {\r\n                        if (isHost) {\r\n                          if (cell.includes(\"number\")) {\r\n                            handleNumberClick(rowIndex, colIndex);\r\n                          } else {\r\n                            handleCellClick(rowIndex, colIndex);\r\n                          }\r\n                        }\r\n                      }}\r\n                      style={{\r\n                        cursor:\r\n                          isHost &&\r\n                            (cell.includes(\"number\") ||\r\n                              hintWords.some((word) => word.y === rowIndex || word.x === colIndex))\r\n                            ? \"pointer\"\r\n                            : \"default\",\r\n                      }}\r\n                    >\r\n\r\n                      {typeof cell === \"string\" || typeof cell === \"number\"\r\n                        ? (cell.includes(\"number\") ? cell.replace(\"number\", \"\") : cell)\r\n                        : \"\"}\r\n                    </div>\r\n\r\n\r\n                    {showMenu && (\r\n                      <div\r\n                        ref={menuRef}\r\n                        className=\"absolute left-12 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\"\r\n                      >\r\n                        <button\r\n                          className=\"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n                          onClick={() =>\r\n                            handleMenuAction(\"open\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                          }\r\n                        >\r\n                          SELECT\r\n                        </button>\r\n                        <button\r\n                          className=\"px-2 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600\"\r\n                          onClick={() =>\r\n                            handleMenuAction(\"correct\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                          }\r\n                        >\r\n                          Correct\r\n                        </button>\r\n                        <button\r\n                          className=\"px-2 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600\"\r\n                          onClick={() =>\r\n                            handleMenuAction(\"incorrect\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                          }\r\n                        >\r\n                          Incorrect\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n            </React.Fragment>\r\n          ))}\r\n      </div>\r\n      {\r\n        isHost &&\r\n        <button\r\n          onClick={() => {\r\n            alert('Mở cnv!')\r\n            handleOpenObstacle()\r\n          }}\r\n          className=\"bg-green-500 text-white p-2 flex-1 rounded-md\"\r\n        >\r\n          Mở CNV\r\n        </button>\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionBoxRound2;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}