{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round3.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { getPacketNames } from '../../components/services';\nimport { useSearchParams } from 'react-router-dom';\nimport { listenToPackets, listenToQuestions, listenToCurrentQuestionsNumber } from '../../services/firebaseServices';\nimport { usePlayer } from '../../context/playerContext';\nimport { setCurrentPacketQuestion } from '../../components/services';\nimport { useTimeStart } from '../../context/timeListenerContext';\nimport { setSelectedPacketToPlayer } from '../services';\n// const topics = [\n//     { name: \"Xuân\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\n//     { name: \"Hạ\", questions: [\"Question 2.1\", \"Question 2.2\", \"Question 2.3\", \"Question 2.4\", \"Question 2.5\", \"Question 2.6\", \"Question 2.7\", \"Question 2.8\", \"Question 2.9\", \"Question 2.10\", \"Question 2.11\", \"Question 2.12\", \"Question 2.13\", \"Question 2.14\", \"Question 2.15\"] },\n//     { name: \"Thu\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\n//     { name: \"Đông\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionBoxRound3 = ({\n  isHost = false\n}) => {\n  _s();\n  const [topics, setTopics] = useState([]);\n  //const [selectedTopic, setSelectedTopic] = useState<string | null>(null);\n  const [hiddenTopics, setHiddenTopics] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const {\n    selectedTopic,\n    setSelectedTopic,\n    currentQuestion,\n    setCurrentQuestion\n  } = usePlayer();\n  const [searchParams] = useSearchParams();\n  const testName = searchParams.get(\"testName\") || \"\";\n  const roomId = searchParams.get(\"roomId\") || \"\";\n  const isFirstMounted = useRef(true);\n  const {\n    timeLeft,\n    startTimer\n  } = useTimeStart();\n  const salt = \"HTMNBK2025\";\n  function decodeQuestion(encoded) {\n    const decoded = atob(encoded);\n    if (!decoded.startsWith(salt)) throw new Error(\"Tampered data!\");\n    return decoded.slice(salt.length);\n  }\n  useEffect(() => {\n    if (!selectedTopic) return;\n\n    // Start timer when selectedTopic changes\n    startTimer(30);\n\n    // Side effects based on timer reaching 0\n  }, []);\n  useEffect(() => {\n    console.log(\"timeLeft\", timeLeft);\n    if (timeLeft === 0) {\n      // When timer runs out, do your clean up / game logic:\n      if (isHost) {\n        setCurrentPacketQuestion(roomId, 1);\n      }\n      setCurrentQuestion(\"\");\n      setSelectedTopic(null);\n      localStorage.removeItem(\"questions\");\n\n      // If you want to reset timer, call startTimer again here or leave stopped\n    }\n  }, [timeLeft]);\n  useEffect(() => {\n    if (!isHost) return;\n    const getTopic = async () => {\n      const topics = await getPacketNames(testName, roomId);\n      setTopics(topics);\n    };\n    getTopic();\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToPackets(roomId, packets => {\n      console.log(\"packets\", packets);\n      setTopics(packets);\n      // setSelectedTopic(packets)\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToQuestions(roomId, questions => {\n      console.log(\"questions\", data);\n      if (!isHost) {\n        setSelectedTopic(questions[0].packetName);\n        localStorage.setItem(\"questions\", questions);\n      }\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToCurrentQuestionsNumber(roomId, questionNumber => {\n      console.log(\"questionNumber outside\", questionNumber);\n      if (localStorage.getItem(\"questions\")) {\n        const question = JSON.parse(localStorage.getItem(\"questions\") || \"\")[questionNumber - 1];\n        if (question) {\n          console.log(\"decodeQuestion(question.question)\", decodeQuestion(question.question));\n          setCurrentQuestion(decodeQuestion(question.question));\n          if (questionNumber === 12) {\n            {\n              console.log(\"questionNumber inside\", questionNumber);\n              setCurrentPacketQuestion(roomId, 1);\n              setCurrentQuestion(\"\");\n              setSelectedTopic(null);\n              localStorage.removeItem(\"questions\");\n            }\n          }\n        }\n      }\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  const handleTopicSelect = async topic => {\n    console.log(\"topic\", topic);\n    if (isHost) {\n      const questions = await setSelectedPacketToPlayer(roomId, topic, testName);\n      localStorage.setItem(\"questions\", JSON.stringify(questions));\n    }\n    if (!isHost) return; // Non-host users cannot select topics\n    setSelectedTopic(topic);\n    setHiddenTopics(prev => [...prev, topic]); // Add the selected topic to the hidden list\n    setCurrentQuestionIndex(0);\n  };\n\n  // useEffect(() => {\n  //     if (selectedTopic && timeLeft > 0) {\n  //         const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n  //         return () => clearTimeout(timer);\n  //     } else if (timeLeft === 0 && isHost) {\n  //         // Automatically navigate back for hosts\n  //         const resetTimer = setTimeout(() => {\n  //             setSelectedTopic(null);\n  //         }, 3000);\n  //         return () => clearTimeout(resetTimer);\n  //     }\n  // }, [timeLeft, selectedTopic, isHost]);\n\n  const handleHostCommand = () => {\n    if (!isHost) return; // Non-host users cannot change questions\n    setCurrentQuestionIndex(prevIndex => prevIndex < 14 ? prevIndex + 1 : prevIndex);\n  };\n\n  //const currentQuestions = topics.find((topic) => topic.name === selectedTopic)?.questions;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center\",\n    children: !selectedTopic ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-4 gap-4\",\n      children: topics.filter(topic => !hiddenTopics.includes(topic)) // Hide already chosen topics\n      .map(topic => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `bg-blue-500 text-white p-2 rounded-lg shadow-md hover:bg-blue-700 ${!isHost ? \"cursor-not-allowed opacity-50\" : \"\"}`,\n        onClick: () => handleTopicSelect(topic),\n        disabled: !isHost // Disable for non-host users\n        ,\n        children: topic\n      }, topic, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 29\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold\",\n        children: selectedTopic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-4\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg mt-2\",\n          children: currentQuestion ? currentQuestion : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this), isHost && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-4 bg-green-500 text-white p-2 rounded-lg\",\n        onClick: handleHostCommand,\n        children: \"Show Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n};\n\n// const Round3: React.FC<RoundBase> = ({ isHost }) => {\n//     return (\n//         <Play\n//             questionComponent={<QuestionComponent isHost={isHost}/>}\n//             isHost={isHost}\n//         />\n//     );\n// }\n_s(QuestionBoxRound3, \"FWxJkLtGhTMLcKd2H+q10wao/MM=\", false, function () {\n  return [usePlayer, useSearchParams, useTimeStart];\n});\n_c = QuestionBoxRound3;\nexport default QuestionBoxRound3;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound3\");","map":{"version":3,"names":["React","useState","useEffect","useRef","getPacketNames","useSearchParams","listenToPackets","listenToQuestions","listenToCurrentQuestionsNumber","usePlayer","setCurrentPacketQuestion","useTimeStart","setSelectedPacketToPlayer","jsxDEV","_jsxDEV","QuestionBoxRound3","isHost","_s","topics","setTopics","hiddenTopics","setHiddenTopics","currentQuestionIndex","setCurrentQuestionIndex","selectedTopic","setSelectedTopic","currentQuestion","setCurrentQuestion","searchParams","testName","get","roomId","isFirstMounted","timeLeft","startTimer","salt","decodeQuestion","encoded","decoded","atob","startsWith","Error","slice","length","console","log","localStorage","removeItem","getTopic","unsubscribePlayers","packets","questions","data","packetName","setItem","questionNumber","getItem","question","JSON","parse","handleTopicSelect","topic","stringify","prev","handleHostCommand","prevIndex","className","children","filter","includes","map","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round3.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Play from '../Play';\r\nimport { RoundBase } from '../../type';\r\nimport { getPacketNames } from '../../components/services';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { listenToPackets, listenToQuestions, listenToCurrentQuestionsNumber, listenToTimeStart } from '../../services/firebaseServices';\r\nimport { usePlayer } from '../../context/playerContext';\r\nimport { setCurrentPacketQuestion } from '../../components/services';\r\nimport { useTimeStart } from '../../context/timeListenerContext';\r\nimport { setSelectedPacketToPlayer } from '../services';\r\n// const topics = [\r\n//     { name: \"Xuân\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\r\n//     { name: \"Hạ\", questions: [\"Question 2.1\", \"Question 2.2\", \"Question 2.3\", \"Question 2.4\", \"Question 2.5\", \"Question 2.6\", \"Question 2.7\", \"Question 2.8\", \"Question 2.9\", \"Question 2.10\", \"Question 2.11\", \"Question 2.12\", \"Question 2.13\", \"Question 2.14\", \"Question 2.15\"] },\r\n//     { name: \"Thu\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\r\n//     { name: \"Đông\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\r\n// ];\r\n\r\ninterface QuestionComponentProps {\r\n    isHost?: boolean; // Determines if the user is a host or not\r\n}\r\n\r\n\r\n\r\nconst QuestionBoxRound3: React.FC<QuestionComponentProps> = ({ isHost = false }) => {\r\n    const [topics, setTopics] = useState<string[]>([]);\r\n    //const [selectedTopic, setSelectedTopic] = useState<string | null>(null);\r\n    const [hiddenTopics, setHiddenTopics] = useState<string[]>([]);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const { selectedTopic, setSelectedTopic, currentQuestion, setCurrentQuestion } = usePlayer()\r\n    const [searchParams] = useSearchParams()\r\n    const testName = searchParams.get(\"testName\") || \"\"\r\n    const roomId = searchParams.get(\"roomId\") || \"\"\r\n    const isFirstMounted = useRef(true)\r\n    const { timeLeft, startTimer } = useTimeStart();\r\n    const salt = \"HTMNBK2025\";\r\n    function decodeQuestion(encoded:string) {\r\n        const decoded = atob(encoded);\r\n        if (!decoded.startsWith(salt)) throw new Error(\"Tampered data!\");\r\n        return decoded.slice(salt.length);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!selectedTopic) return;\r\n\r\n        // Start timer when selectedTopic changes\r\n        startTimer(30);\r\n\r\n        // Side effects based on timer reaching 0\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log(\"timeLeft\", timeLeft);\r\n\r\n        if (timeLeft === 0) {\r\n            // When timer runs out, do your clean up / game logic:\r\n            if (isHost) {\r\n                setCurrentPacketQuestion(roomId, 1);\r\n            }\r\n            setCurrentQuestion(\"\");\r\n            setSelectedTopic(null);\r\n            localStorage.removeItem(\"questions\");\r\n\r\n            // If you want to reset timer, call startTimer again here or leave stopped\r\n        }\r\n    }, [timeLeft]);\r\n\r\n    useEffect(() => {\r\n        if (!isHost) return\r\n        const getTopic = async () => {\r\n            const topics = await getPacketNames(testName, roomId)\r\n            setTopics(topics)\r\n        }\r\n\r\n        getTopic()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const unsubscribePlayers = listenToPackets(roomId, (packets) => {\r\n            console.log(\"packets\", packets);\r\n\r\n            setTopics(packets)\r\n            // setSelectedTopic(packets)\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToQuestions(roomId, (questions) => {\r\n            console.log(\"questions\", data);\r\n\r\n            if (!isHost) {\r\n                setSelectedTopic(questions[0].packetName)\r\n                localStorage.setItem(\"questions\", questions)\r\n            }         \r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToCurrentQuestionsNumber(roomId, (questionNumber) => {\r\n            console.log(\"questionNumber outside\", questionNumber);\r\n            if (localStorage.getItem(\"questions\")) {\r\n                const question = JSON.parse(localStorage.getItem(\"questions\") || \"\")[questionNumber - 1]\r\n                if (question) {\r\n                    console.log(\"decodeQuestion(question.question)\",decodeQuestion(question.question));\r\n                    \r\n                    setCurrentQuestion(decodeQuestion(question.question))\r\n\r\n                    if (questionNumber === 12) {\r\n                        {\r\n                            console.log(\"questionNumber inside\", questionNumber);\r\n                            setCurrentPacketQuestion(roomId, 1)\r\n                            setCurrentQuestion(\"\")\r\n                            setSelectedTopic(null)\r\n                            localStorage.removeItem(\"questions\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    const handleTopicSelect = async (topic: string) => {\r\n        console.log(\"topic\", topic);\r\n        if (isHost) {\r\n            const questions = await setSelectedPacketToPlayer(roomId, topic, testName)\r\n            localStorage.setItem(\"questions\", JSON.stringify(questions))\r\n        }\r\n        if (!isHost) return; // Non-host users cannot select topics\r\n        setSelectedTopic(topic);\r\n        setHiddenTopics((prev) => [...prev, topic]); // Add the selected topic to the hidden list\r\n        setCurrentQuestionIndex(0);\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     if (selectedTopic && timeLeft > 0) {\r\n    //         const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n    //         return () => clearTimeout(timer);\r\n    //     } else if (timeLeft === 0 && isHost) {\r\n    //         // Automatically navigate back for hosts\r\n    //         const resetTimer = setTimeout(() => {\r\n    //             setSelectedTopic(null);\r\n    //         }, 3000);\r\n    //         return () => clearTimeout(resetTimer);\r\n    //     }\r\n    // }, [timeLeft, selectedTopic, isHost]);\r\n\r\n    const handleHostCommand = () => {\r\n        if (!isHost) return; // Non-host users cannot change questions\r\n        setCurrentQuestionIndex((prevIndex) =>\r\n            prevIndex < 14 ? prevIndex + 1 : prevIndex\r\n        );\r\n    };\r\n\r\n    //const currentQuestions = topics.find((topic) => topic.name === selectedTopic)?.questions;\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center\">\r\n            {!selectedTopic ? (\r\n                <div className=\"grid grid-cols-4 gap-4\">\r\n                    {topics\r\n                        .filter((topic) => !hiddenTopics.includes(topic)) // Hide already chosen topics\r\n                        .map((topic) => (\r\n                            <button\r\n                                key={topic}\r\n                                className={`bg-blue-500 text-white p-2 rounded-lg shadow-md hover:bg-blue-700 ${!isHost ? \"cursor-not-allowed opacity-50\" : \"\"\r\n                                    }`}\r\n                                onClick={() => handleTopicSelect(topic)}\r\n                                disabled={!isHost} // Disable for non-host users\r\n                            >\r\n                                {topic}\r\n                            </button>\r\n                        ))}\r\n                </div>\r\n            ) : (\r\n                <div className=\"w-full text-center\">\r\n                    <h2 className=\"text-xl font-bold\">{selectedTopic}</h2>\r\n                    <div className=\"my-4\">\r\n                        <p className=\"text-lg mt-2\">\r\n                            {currentQuestion ? currentQuestion : \"\"}\r\n                        </p>\r\n                    </div>\r\n                    {/* Simulated host control button for testing */}\r\n                    {isHost && (\r\n                        <button\r\n                            className=\"mt-4 bg-green-500 text-white p-2 rounded-lg\"\r\n                            onClick={handleHostCommand}\r\n                        >\r\n                            Show Next Question\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// const Round3: React.FC<RoundBase> = ({ isHost }) => {\r\n//     return (\r\n//         <Play\r\n//             questionComponent={<QuestionComponent isHost={isHost}/>}\r\n//             isHost={isHost}\r\n//         />\r\n//     );\r\n// }\r\n\r\nexport default QuestionBoxRound3"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAG1D,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,eAAe,QAAQ,kBAAkB;AAClD,SAASC,eAAe,EAAEC,iBAAiB,EAAEC,8BAA8B,QAA2B,iCAAiC;AACvI,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,wBAAwB,QAAQ,2BAA2B;AACpE,SAASC,YAAY,QAAQ,mCAAmC;AAChE,SAASC,yBAAyB,QAAQ,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQA,MAAMC,iBAAmD,GAAGA,CAAC;EAAEC,MAAM,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EAChF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAW,EAAE,CAAC;EAClD;EACA,MAAM,CAACmB,YAAY,EAAEC,eAAe,CAAC,GAAGpB,QAAQ,CAAW,EAAE,CAAC;EAC9D,MAAM,CAACqB,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM;IAAEuB,aAAa;IAAEC,gBAAgB;IAAEC,eAAe;IAAEC;EAAmB,CAAC,GAAGlB,SAAS,CAAC,CAAC;EAC5F,MAAM,CAACmB,YAAY,CAAC,GAAGvB,eAAe,CAAC,CAAC;EACxC,MAAMwB,QAAQ,GAAGD,YAAY,CAACE,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE;EACnD,MAAMC,MAAM,GAAGH,YAAY,CAACE,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE;EAC/C,MAAME,cAAc,GAAG7B,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM;IAAE8B,QAAQ;IAAEC;EAAW,CAAC,GAAGvB,YAAY,CAAC,CAAC;EAC/C,MAAMwB,IAAI,GAAG,YAAY;EACzB,SAASC,cAAcA,CAACC,OAAc,EAAE;IACpC,MAAMC,OAAO,GAAGC,IAAI,CAACF,OAAO,CAAC;IAC7B,IAAI,CAACC,OAAO,CAACE,UAAU,CAACL,IAAI,CAAC,EAAE,MAAM,IAAIM,KAAK,CAAC,gBAAgB,CAAC;IAChE,OAAOH,OAAO,CAACI,KAAK,CAACP,IAAI,CAACQ,MAAM,CAAC;EACrC;EAEAzC,SAAS,CAAC,MAAM;IACZ,IAAI,CAACsB,aAAa,EAAE;;IAEpB;IACAU,UAAU,CAAC,EAAE,CAAC;;IAEd;EACJ,CAAC,EAAE,EAAE,CAAC;EAENhC,SAAS,CAAC,MAAM;IACZ0C,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEZ,QAAQ,CAAC;IAEjC,IAAIA,QAAQ,KAAK,CAAC,EAAE;MAChB;MACA,IAAIjB,MAAM,EAAE;QACRN,wBAAwB,CAACqB,MAAM,EAAE,CAAC,CAAC;MACvC;MACAJ,kBAAkB,CAAC,EAAE,CAAC;MACtBF,gBAAgB,CAAC,IAAI,CAAC;MACtBqB,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;;MAEpC;IACJ;EACJ,CAAC,EAAE,CAACd,QAAQ,CAAC,CAAC;EAEd/B,SAAS,CAAC,MAAM;IACZ,IAAI,CAACc,MAAM,EAAE;IACb,MAAMgC,QAAQ,GAAG,MAAAA,CAAA,KAAY;MACzB,MAAM9B,MAAM,GAAG,MAAMd,cAAc,CAACyB,QAAQ,EAAEE,MAAM,CAAC;MACrDZ,SAAS,CAACD,MAAM,CAAC;IACrB,CAAC;IAED8B,QAAQ,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN9C,SAAS,CAAC,MAAM;IACZ,MAAM+C,kBAAkB,GAAG3C,eAAe,CAACyB,MAAM,EAAGmB,OAAO,IAAK;MAC5DN,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEK,OAAO,CAAC;MAE/B/B,SAAS,CAAC+B,OAAO,CAAC;MAClB;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACTD,kBAAkB,CAAC,CAAC;IACxB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN/C,SAAS,CAAC,MAAM;IAEZ,MAAM+C,kBAAkB,GAAG1C,iBAAiB,CAACwB,MAAM,EAAGoB,SAAS,IAAK;MAChEP,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEO,IAAI,CAAC;MAE9B,IAAI,CAACpC,MAAM,EAAE;QACTS,gBAAgB,CAAC0B,SAAS,CAAC,CAAC,CAAC,CAACE,UAAU,CAAC;QACzCP,YAAY,CAACQ,OAAO,CAAC,WAAW,EAAEH,SAAS,CAAC;MAChD;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACTF,kBAAkB,CAAC,CAAC;IACxB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN/C,SAAS,CAAC,MAAM;IAEZ,MAAM+C,kBAAkB,GAAGzC,8BAA8B,CAACuB,MAAM,EAAGwB,cAAc,IAAK;MAClFX,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEU,cAAc,CAAC;MACrD,IAAIT,YAAY,CAACU,OAAO,CAAC,WAAW,CAAC,EAAE;QACnC,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACb,YAAY,CAACU,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAACD,cAAc,GAAG,CAAC,CAAC;QACxF,IAAIE,QAAQ,EAAE;UACVb,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAACT,cAAc,CAACqB,QAAQ,CAACA,QAAQ,CAAC,CAAC;UAElF9B,kBAAkB,CAACS,cAAc,CAACqB,QAAQ,CAACA,QAAQ,CAAC,CAAC;UAErD,IAAIF,cAAc,KAAK,EAAE,EAAE;YACvB;cACIX,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEU,cAAc,CAAC;cACpD7C,wBAAwB,CAACqB,MAAM,EAAE,CAAC,CAAC;cACnCJ,kBAAkB,CAAC,EAAE,CAAC;cACtBF,gBAAgB,CAAC,IAAI,CAAC;cACtBqB,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;YACxC;UACJ;QACJ;MACJ;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACTE,kBAAkB,CAAC,CAAC;IACxB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMW,iBAAiB,GAAG,MAAOC,KAAa,IAAK;IAC/CjB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEgB,KAAK,CAAC;IAC3B,IAAI7C,MAAM,EAAE;MACR,MAAMmC,SAAS,GAAG,MAAMvC,yBAAyB,CAACmB,MAAM,EAAE8B,KAAK,EAAEhC,QAAQ,CAAC;MAC1EiB,YAAY,CAACQ,OAAO,CAAC,WAAW,EAAEI,IAAI,CAACI,SAAS,CAACX,SAAS,CAAC,CAAC;IAChE;IACA,IAAI,CAACnC,MAAM,EAAE,OAAO,CAAC;IACrBS,gBAAgB,CAACoC,KAAK,CAAC;IACvBxC,eAAe,CAAE0C,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEF,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7CtC,uBAAuB,CAAC,CAAC,CAAC;EAC9B,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMyC,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAAChD,MAAM,EAAE,OAAO,CAAC;IACrBO,uBAAuB,CAAE0C,SAAS,IAC9BA,SAAS,GAAG,EAAE,GAAGA,SAAS,GAAG,CAAC,GAAGA,SACrC,CAAC;EACL,CAAC;;EAED;;EAEA,oBACInD,OAAA;IAAKoD,SAAS,EAAC,4BAA4B;IAAAC,QAAA,EACtC,CAAC3C,aAAa,gBACXV,OAAA;MAAKoD,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EAClCjD,MAAM,CACFkD,MAAM,CAAEP,KAAK,IAAK,CAACzC,YAAY,CAACiD,QAAQ,CAACR,KAAK,CAAC,CAAC,CAAC;MAAA,CACjDS,GAAG,CAAET,KAAK,iBACP/C,OAAA;QAEIoD,SAAS,EAAE,qEAAqE,CAAClD,MAAM,GAAG,+BAA+B,GAAG,EAAE,EACvH;QACPuD,OAAO,EAAEA,CAAA,KAAMX,iBAAiB,CAACC,KAAK,CAAE;QACxCW,QAAQ,EAAE,CAACxD,MAAO,CAAC;QAAA;QAAAmD,QAAA,EAElBN;MAAK,GANDA,KAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAON,CACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,gBAEN9D,OAAA;MAAKoD,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBAC/BrD,OAAA;QAAIoD,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAAE3C;MAAa;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACtD9D,OAAA;QAAKoD,SAAS,EAAC,MAAM;QAAAC,QAAA,eACjBrD,OAAA;UAAGoD,SAAS,EAAC,cAAc;UAAAC,QAAA,EACtBzC,eAAe,GAAGA,eAAe,GAAG;QAAE;UAAA+C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAEL5D,MAAM,iBACHF,OAAA;QACIoD,SAAS,EAAC,6CAA6C;QACvDK,OAAO,EAAEP,iBAAkB;QAAAG,QAAA,EAC9B;MAED;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACX;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EACR;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA3D,EAAA,CAlMMF,iBAAmD;EAAA,QAK4BN,SAAS,EACnEJ,eAAe,EAILM,YAAY;AAAA;AAAAkE,EAAA,GAV3C9D,iBAAmD;AAoMzD,eAAeA,iBAAiB;AAAA,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}