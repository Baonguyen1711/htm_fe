{"ast":null,"code":"// src/services/firebaseService.ts\nimport { ref, onValue, set, database } from \"../firebase-config\";\n\n// Định nghĩa kiểu dữ liệu cho player và scores\n\nlet lastStartTime = localStorage.getItem(\"lastStartTime\") ? Number(localStorage.getItem(\"lastStartTime\")) : null;\n\n// Listen for real-time updates to players in a room\nexport const listenToPlayers = (roomId, callback) => {\n  const playersRef = ref(database, `rooms/${roomId}/players`);\n  console.log(\"player ref\", playersRef);\n  const unsubscribe = onValue(playersRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToQuestions = (roomId, callback) => {\n  const questionsRef = ref(database, `rooms/${roomId}/questions`);\n  console.log(\"questiónsRef ref\", questionsRef);\n  const unsubscribe = onValue(questionsRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToAnswers = (roomId, callback) => {\n  const answerRef = ref(database, `rooms/${roomId}/answers`);\n  console.log(\"answerRef\", answerRef);\n  const unsubscribe = onValue(answerRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToTimeStart = (roomId, callback) => {\n  const timerRef = ref(database, `rooms/${roomId}/times`);\n  console.log(\"timerRef\", timerRef);\n  const unsubscribe = onValue(timerRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    const startTime = data;\n    if (startTime && startTime !== lastStartTime) {\n      lastStartTime = startTime;\n      localStorage.setItem(\"lastStartTime\", startTime.toString()); // Persist the new value\n      callback();\n    }\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\n\n// Listen for real-time updates to scores in a room\nexport const listenToScores = (roomId, callback) => {\n  const scoresRef = ref(database, `rooms/${roomId}/scores`);\n  const unsubscribe = onValue(scoresRef, snapshot => {\n    const data = snapshot.val() || {};\n    callback(data);\n  });\n  return unsubscribe;\n};\nexport const listenToBroadcastedAnswer = (roomId, callback) => {\n  const scoresRef = ref(database, `rooms/${roomId}/broadcast`);\n  const unsubscribe = onValue(scoresRef, snapshot => {\n    const data = snapshot.val() || {};\n    callback(data);\n  });\n  return unsubscribe;\n};\nexport const listenToScore = (roomId, callback) => {\n  const scoresRef = ref(database, `rooms/${roomId}/scores`);\n  const unsubscribe = onValue(scoresRef, snapshot => {\n    const data = snapshot.val() || {};\n    callback(data);\n  });\n  return unsubscribe;\n};\n// Add a user to the players list in a room\nexport const addPlayerToRoom = async (roomId, uid, playerData) => {\n  const playerRef = ref(database, `rooms/${roomId}/players/${uid}`);\n  await set(playerRef, {\n    joined_at: Date.now(),\n    data: playerData // e.g., { username: \"Player1\", points: 10 }\n  });\n};","map":{"version":3,"names":["ref","onValue","set","database","lastStartTime","localStorage","getItem","Number","listenToPlayers","roomId","callback","playersRef","console","log","unsubscribe","snapshot","data","val","listenToQuestions","questionsRef","listenToAnswers","answerRef","listenToTimeStart","timerRef","startTime","setItem","toString","listenToScores","scoresRef","listenToBroadcastedAnswer","listenToScore","addPlayerToRoom","uid","playerData","playerRef","joined_at","Date","now"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/services/firebaseServices.ts"],"sourcesContent":["// src/services/firebaseService.ts\r\nimport { ref, onValue, set, database } from \"../firebase-config\"\r\nimport { DatabaseReference, Unsubscribe } from \"firebase/database\";\r\nimport { User, Question, Answer } from \"../type\";\r\n\r\n// Định nghĩa kiểu dữ liệu cho player và scores\r\ninterface PlayerData {\r\n  username: string;\r\n  points: number;\r\n  [key: string]: any; // Cho phép các thuộc tính bổ sung\r\n}\r\n\r\ninterface Player {\r\n  joined_at: number;\r\n  data: PlayerData;\r\n}\r\n\r\ninterface Players {\r\n  [uid: string]: Player;\r\n}\r\n\r\ninterface Scores {\r\n  [uid: string]: number;\r\n}\r\n\r\nlet lastStartTime = localStorage.getItem(\"lastStartTime\")\r\n  ? Number(localStorage.getItem(\"lastStartTime\"))\r\n  : null;\r\n\r\n// Listen for real-time updates to players in a room\r\nexport const listenToPlayers = (roomId: string, callback: (data: User) => void): Unsubscribe => {\r\n  const playersRef: DatabaseReference = ref(database, `rooms/${roomId}/players`);\r\n  console.log(\"player ref\", playersRef)\r\n  const unsubscribe: Unsubscribe = onValue(playersRef, (snapshot) => {\r\n    const data: User = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToQuestions = (roomId: string, callback: (data: Question) => void): Unsubscribe => {\r\n  const questionsRef: DatabaseReference = ref(database, `rooms/${roomId}/questions`);\r\n  console.log(\"questiónsRef ref\", questionsRef)\r\n  const unsubscribe: Unsubscribe = onValue(questionsRef, (snapshot) => {\r\n    const data: Question = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToAnswers = (roomId: string, callback: (data: string) => void): Unsubscribe => {\r\n  const answerRef: DatabaseReference = ref(database, `rooms/${roomId}/answers`);\r\n  console.log(\"answerRef\", answerRef)\r\n  const unsubscribe: Unsubscribe = onValue(answerRef, (snapshot) => {\r\n    const data: string = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToTimeStart = (roomId: string, callback: () => void): Unsubscribe => {\r\n  const timerRef: DatabaseReference = ref(database, `rooms/${roomId}/times`);\r\n  console.log(\"timerRef\", timerRef)\r\n  const unsubscribe: Unsubscribe = onValue(timerRef, (snapshot) => {\r\n    const data: number = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    const startTime = data;\r\n      if (startTime && startTime !== lastStartTime) {\r\n        lastStartTime = startTime;\r\n        localStorage.setItem(\"lastStartTime\", startTime.toString()); // Persist the new value\r\n        callback()\r\n      }\r\n\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\n// Listen for real-time updates to scores in a room\r\nexport const listenToScores = (roomId: string, callback: (data: Scores) => void): Unsubscribe => {\r\n  const scoresRef: DatabaseReference = ref(database, `rooms/${roomId}/scores`);\r\n  const unsubscribe: Unsubscribe = onValue(scoresRef, (snapshot) => {\r\n    const data: Scores = snapshot.val() || {};\r\n    callback(data);\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\n\r\nexport const listenToBroadcastedAnswer = (roomId: string, callback: (data: Answer[]) => void): Unsubscribe => {\r\n  const scoresRef: DatabaseReference = ref(database, `rooms/${roomId}/broadcast`);\r\n  const unsubscribe: Unsubscribe = onValue(scoresRef, (snapshot) => {\r\n    const data: Answer = snapshot.val() || {};\r\n    callback(data);\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\nexport const listenToScore = (roomId: string, callback: (data: Answer[]) => void): Unsubscribe => {\r\n  const scoresRef: DatabaseReference = ref(database, `rooms/${roomId}/scores`);\r\n  const unsubscribe: Unsubscribe = onValue(scoresRef, (snapshot) => {\r\n    const data: Answer[] = snapshot.val() || {};\r\n    callback(data);\r\n  });\r\n  return unsubscribe;\r\n}\r\n// Add a user to the players list in a room\r\nexport const addPlayerToRoom = async (roomId: string, uid: string, playerData: PlayerData): Promise<void> => {\r\n  const playerRef: DatabaseReference = ref(database, `rooms/${roomId}/players/${uid}`);\r\n  await set(playerRef, {\r\n    joined_at: Date.now(),\r\n    data: playerData, // e.g., { username: \"Player1\", points: 10 }\r\n  });\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}