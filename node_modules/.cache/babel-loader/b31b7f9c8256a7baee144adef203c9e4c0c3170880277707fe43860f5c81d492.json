{"ast":null,"code":"import { ref, onValue, set, database, serverTimestamp } from \"../firebase-config\";\nimport { onDisconnect, remove } from \"firebase/database\";\nimport axios from \"axios\";\n\n// Định nghĩa kiểu dữ liệu cho player và scores\n\n// interface Scores {\n//   [uid: string]: number;\n// }\n\nlet lastStartTime = localStorage.getItem(\"lastStartTime\") ? Number(localStorage.getItem(\"lastStartTime\")) : null;\nexport const setupOnDisconnect = (roomId, userId, userData, onDisconnectCallback) => {\n  const userRef = ref(database, `rooms/${roomId}/players/${userId}`);\n  const disconnectHandler = onDisconnect(userRef);\n\n  // Remove the user from players when disconnect happens\n  disconnectHandler.remove().then(() => {\n    console.log(`onDisconnect handler set for user ${userId} in room ${roomId}`);\n    if (onDisconnectCallback) onDisconnectCallback();\n  }).catch(error => {\n    console.error(\"Failed to set onDisconnect handler:\", error);\n  });\n\n  // Start heartbeat to keep user online and update lastActive\n  const interval = setInterval(() => {\n    set(userRef, {\n      ...userData,\n      lastActive: serverTimestamp()\n    });\n  }, 5000);\n\n  // Cleanup: cancel onDisconnect and clear heartbeat\n  return () => {\n    clearInterval(interval);\n    disconnectHandler.cancel().then(() => console.log(`onDisconnect handler canceled for user ${userId}`)).catch(err => console.error(\"Failed to cancel onDisconnect handler:\", err));\n  };\n};\n\n// Listen for real-time updates to players in a room\nexport const listenToPlayers = (roomId, callback) => {\n  console.log(\"roomId\", roomId);\n  const playersRef = ref(database, `rooms/${roomId}/players`);\n  console.log(\"player ref\", playersRef);\n  const unsubscribe = onValue(playersRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToQuestions = (roomId, callback) => {\n  const questionsRef = ref(database, `rooms/${roomId}/questions`);\n  console.log(\"questiónsRef ref\", questionsRef);\n  const unsubscribe = onValue(questionsRef, snapshot => {\n    if (!snapshot.exists()) {\n      console.log(\"Path deleted or does not exist.\");\n      return;\n    }\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToSelectedCell = (roomId, callback) => {\n  const cellsRef = ref(database, `rooms/${roomId}/cell`);\n  console.log(\"cellsRef\", cellsRef);\n  const unsubscribe = onValue(cellsRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToCellColor = (roomId, callback) => {\n  const colorsRef = ref(database, `rooms/${roomId}/color`);\n  console.log(\"colorsRef\", colorsRef);\n  const unsubscribe = onValue(colorsRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToCurrentQuestionsNumber = (roomId, callback) => {\n  const currentQuestionsNumbeRef = ref(database, `rooms/${roomId}/currentQuestions`);\n  console.log(\"questiónsRef ref\", currentQuestionsNumbeRef);\n  const unsubscribe = onValue(currentQuestionsNumbeRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToBuzzing = (roomId, callback) => {\n  const questionsRef = ref(database, `rooms/${roomId}/buzzedPlayer`);\n  console.log(\"questiónsRef ref\", questionsRef);\n  const unsubscribe = onValue(questionsRef, snapshot => {\n    if (!snapshot.exists()) {\n      console.log(\"Path deleted or does not exist.\");\n      return;\n    }\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToStar = (roomId, callback) => {\n  const starRef = ref(database, `rooms/${roomId}/star`);\n  console.log(\"starRef\", starRef);\n  const unsubscribe = onValue(starRef, snapshot => {\n    if (!snapshot.exists()) {\n      console.log(\"Path deleted or does not exist.\");\n      return;\n    }\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToObstacle = (roomId, callback) => {\n  const obstaclessRef = ref(database, `rooms/${roomId}/obstacles`);\n  console.log(\"questiónsRef ref\", obstaclessRef);\n  const unsubscribe = onValue(obstaclessRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToPackets = (roomId, callback) => {\n  const packetsRef = ref(database, `rooms/${roomId}/packets`);\n  console.log(\"packetsRef\", packetsRef);\n  const unsubscribe = onValue(packetsRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToAnswers = (roomId, callback) => {\n  const answerRef = ref(database, `rooms/${roomId}/answers`);\n  console.log(\"answerRef\", answerRef);\n  const unsubscribe = onValue(answerRef, snapshot => {\n    if (!snapshot.exists()) {\n      console.log(\"Path deleted or does not exist.\");\n      return;\n    }\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToSound = (roomId, callback) => {\n  const soundRef = ref(database, `rooms/${roomId}/sound`);\n  console.log(\"soundRef\", soundRef);\n  const unsubscribe = onValue(soundRef, snapshot => {\n    if (!snapshot.exists()) {\n      console.log(\"Path deleted or does not exist.\");\n      return;\n    }\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToOpenBuzz = (roomId, callback) => {\n  const buzzRef = ref(database, `rooms/${roomId}/openBuzzed`);\n  console.log(\"buzzRef\", buzzRef);\n  const unsubscribe = onValue(buzzRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\n\n// export const listenToTimeStart = (roomId: string, callback: (data: string) => void): Unsubscribe => {\n//   const timerRef: DatabaseReference = ref(database, `rooms/${roomId}/times`);\n//   console.log(\"timerRef\", timerRef)\n//   const unsubscribe: Unsubscribe = onValue(timerRef, (snapshot) => {\n//     const data: string = snapshot.val() || {};\n//     console.log(\"data\", data)\n//     callback(data);\n//   });\n//   return unsubscribe; // Trả về hàm unsubscribe để cleanup\n// };\n\nexport const listenToTimeStart = (roomId, callback) => {\n  console.log(\"START LISTENING TO TIME START\");\n  const timerRef = ref(database, `rooms/${roomId}/times`);\n  let lastStartTime = Number(localStorage.getItem(\"lastStartTime\")) || 0;\n  let isFirstCall = true; // Flag to skip first execution\n  console.log(\"timerRef\", timerRef);\n  console.log(\"lastStartTime\", lastStartTime);\n  const unsubscribe = onValue(timerRef, snapshot => {\n    console.log(\"snapshot.val()\", snapshot.val());\n    const startTime = snapshot.val();\n    console.log(\"time\", startTime);\n    console.log(\"abc 1\");\n    if (isFirstCall) {\n      isFirstCall = false; // Skip the first execution\n      return;\n    }\n    console.log(\"abc 2\");\n    if (startTime && startTime !== lastStartTime) {\n      console.log(\"abc 3\");\n      lastStartTime = startTime;\n      localStorage.setItem(\"lastStartTime\", startTime.toString());\n      callback();\n    }\n  });\n  return unsubscribe;\n};\n\n// Listen for real-time updates to scores in a room\nexport const listenToScores = (roomId, callback) => {\n  const scoresRef = ref(database, `rooms/${roomId}/scores`);\n  const unsubscribe = onValue(scoresRef, snapshot => {\n    const data = snapshot.val() || {};\n    callback(data);\n  });\n  return unsubscribe;\n};\nexport const listenToGrid = (roomId, callback) => {\n  const scoresRef = ref(database, `rooms/${roomId}/grid`);\n  const unsubscribe = onValue(scoresRef, snapshot => {\n    const data = snapshot.val() || {};\n    callback(data);\n  });\n  return unsubscribe;\n};\nexport const listenToRoundStart = (roomId, callback) => {\n  const roundsRef = ref(database, `rooms/${roomId}/rounds`);\n  const unsubscribe = onValue(roundsRef, snapshot => {\n    const data = snapshot.val() || {};\n    // console.log(\"round\", data)\n    callback(data);\n  });\n  return unsubscribe;\n};\nexport const listenToSelectRow = (roomId, callback) => {\n  const rowsRef = ref(database, `rooms/${roomId}/select`);\n  const unsubscribe = onValue(rowsRef, snapshot => {\n    const data = snapshot.val() || {};\n    // console.log(\"round\", data)\n    callback(data);\n  });\n  return unsubscribe;\n};\nexport const listenToIncorrectRow = (roomId, callback) => {\n  const rowsRef = ref(database, `rooms/${roomId}/incorrect`);\n  const unsubscribe = onValue(rowsRef, snapshot => {\n    const data = snapshot.val() || {};\n    // console.log(\"round\", data)\n    callback(data);\n  });\n  return unsubscribe;\n};\nexport const listenToCorrectRow = (roomId, callback) => {\n  const rowsRef = ref(database, `rooms/${roomId}/correct`);\n  const unsubscribe = onValue(rowsRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"correct row\", data);\n    // console.log(\"round\", data)\n    callback(data);\n  });\n  return unsubscribe;\n};\nexport const listenToBroadcastedAnswer = (roomId, callback) => {\n  const answerListRef = ref(database, `rooms/${roomId}/answerLists`);\n  const unsubscribe = onValue(answerListRef, snapshot => {\n    const data = snapshot.val() || {};\n    callback(data);\n  });\n  return unsubscribe;\n};\nexport const listenToSpectatorJoin = (roomId, callback) => {\n  const spectatorRef = ref(database, `rooms/${roomId}/spectator/join`);\n  const unsubscribe = onValue(spectatorRef, snapshot => {\n    console.log(\"snapshot size\", snapshot.size);\n    const count = snapshot.size;\n    callback(count);\n  });\n  return unsubscribe;\n};\n\n// export const listenToScore = (roomId: string, callback: (data: Answer[]) => void): Unsubscribe => {\n//   const scoresRef: DatabaseReference = ref(database, `rooms/${roomId}/scores`);\n//   const unsubscribe: Unsubscribe = onValue(scoresRef, (snapshot) => {\n//     const data: Answer[] = snapshot.val() || {};\n//     callback(data);\n//   });\n//   return unsubscribe;\n// }\n// Add a user to the players list in a room\nexport const addPlayerToRoom = async (roomId, uid, playerData) => {\n  const playerRef = ref(database, `rooms/${roomId}/players/${uid}`);\n  await set(playerRef, {\n    joined_at: Date.now(),\n    data: playerData // e.g., { username: \"Player1\", points: 10 }\n  });\n};\nexport const removeSpectator = async path => {\n  const spectatorRef = ref(database, path);\n  const disconnectHandler = onDisconnect(spectatorRef);\n  disconnectHandler.remove().then(() => {\n    console.log(`onDisconnect handler set for user with path ${path}`);\n  }).catch(error => {\n    console.error(\"Failed to set onDisconnect handler:\", error);\n  });\n};\nexport const authenticateUser = async token => {\n  try {\n    const response = await axios.post(\"http://localhost:8000/api/auth\", JSON.stringify({\n      token\n    }), {\n      withCredentials: true,\n      // Important for cookies\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const listenToGridActions = (roomId, callback) => {\n  const roundsRef = ref(database, `rooms/${roomId}/rounds`);\n  const unsubscribe = onValue(roundsRef, snapshot => {\n    const data = snapshot.val() || {};\n    // console.log(\"round\", data)\n    callback(data);\n  });\n  return unsubscribe;\n};\nexport const deletePath = async (roomId, path) => {\n  const pathRef = ref(database, `rooms/${roomId}/${path}`);\n  console.log(\"delete path ref\", pathRef);\n  return remove(pathRef).then(() => {\n    console.log(`${path} for room ${roomId} deleted successfully.`);\n  }).catch(error => {\n    console.error(`Failed to delete ${path} for room ${roomId}:`, error);\n  });\n};","map":{"version":3,"names":["ref","onValue","set","database","serverTimestamp","onDisconnect","remove","axios","lastStartTime","localStorage","getItem","Number","setupOnDisconnect","roomId","userId","userData","onDisconnectCallback","userRef","disconnectHandler","then","console","log","catch","error","interval","setInterval","lastActive","clearInterval","cancel","err","listenToPlayers","callback","playersRef","unsubscribe","snapshot","data","val","listenToQuestions","questionsRef","exists","listenToSelectedCell","cellsRef","listenToCellColor","colorsRef","listenToCurrentQuestionsNumber","currentQuestionsNumbeRef","listenToBuzzing","listenToStar","starRef","listenToObstacle","obstaclessRef","listenToPackets","packetsRef","listenToAnswers","answerRef","listenToSound","soundRef","listenToOpenBuzz","buzzRef","listenToTimeStart","timerRef","isFirstCall","startTime","setItem","toString","listenToScores","scoresRef","listenToGrid","listenToRoundStart","roundsRef","listenToSelectRow","rowsRef","listenToIncorrectRow","listenToCorrectRow","listenToBroadcastedAnswer","answerListRef","listenToSpectatorJoin","spectatorRef","size","count","addPlayerToRoom","uid","playerData","playerRef","joined_at","Date","now","removeSpectator","path","authenticateUser","token","response","post","JSON","stringify","withCredentials","headers","status","Error","listenToGridActions","deletePath","pathRef"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/services/firebaseServices.ts"],"sourcesContent":["import { ref, onValue, set, database, serverTimestamp } from \"../firebase-config\"\r\nimport { DatabaseReference, Unsubscribe, onDisconnect, remove } from \"firebase/database\";\r\nimport { User, Question, Answer, Score } from \"../type\";\r\nimport axios from \"axios\";\r\nimport { useEffect } from \"react\";\r\n\r\n// Định nghĩa kiểu dữ liệu cho player và scores\r\ninterface PlayerData {\r\n  username: string;\r\n  points: number;\r\n  [key: string]: any; // Cho phép các thuộc tính bổ sung\r\n}\r\n\r\ninterface Player {\r\n  joined_at: number;\r\n  data: PlayerData;\r\n}\r\n\r\ninterface Players {\r\n  [uid: string]: Player;\r\n}\r\n\r\n// interface Scores {\r\n//   [uid: string]: number;\r\n// }\r\n\r\nlet lastStartTime = localStorage.getItem(\"lastStartTime\")\r\n  ? Number(localStorage.getItem(\"lastStartTime\"))\r\n  : null;\r\n\r\n\r\nexport const setupOnDisconnect = (\r\n  roomId: string,\r\n  userId: string,\r\n  userData: any,\r\n  onDisconnectCallback?: () => void\r\n) => {\r\n  const userRef = ref(database, `rooms/${roomId}/players/${userId}`);\r\n  const disconnectHandler = onDisconnect(userRef);\r\n\r\n  // Remove the user from players when disconnect happens\r\n  disconnectHandler\r\n    .remove()\r\n    .then(() => {\r\n      console.log(`onDisconnect handler set for user ${userId} in room ${roomId}`);\r\n      if (onDisconnectCallback) onDisconnectCallback();\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Failed to set onDisconnect handler:\", error);\r\n    });\r\n\r\n  // Start heartbeat to keep user online and update lastActive\r\n  const interval = setInterval(() => {\r\n    set(userRef, { ...userData, lastActive: serverTimestamp() });\r\n  }, 5000);\r\n\r\n  // Cleanup: cancel onDisconnect and clear heartbeat\r\n  return () => {\r\n    clearInterval(interval);\r\n    disconnectHandler\r\n      .cancel()\r\n      .then(() => console.log(`onDisconnect handler canceled for user ${userId}`))\r\n      .catch((err) => console.error(\"Failed to cancel onDisconnect handler:\", err));\r\n  };\r\n};\r\n\r\n// Listen for real-time updates to players in a room\r\nexport const listenToPlayers = (roomId: string, callback: (data: User) => void): Unsubscribe => {\r\n  console.log(\"roomId\", roomId);\r\n\r\n  const playersRef: DatabaseReference = ref(database, `rooms/${roomId}/players`);\r\n  console.log(\"player ref\", playersRef)\r\n  const unsubscribe: Unsubscribe = onValue(playersRef, (snapshot) => {\r\n    const data: User = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToQuestions = (roomId: string, callback: (data: any) => void): Unsubscribe => {\r\n  const questionsRef: DatabaseReference = ref(database, `rooms/${roomId}/questions`);\r\n  console.log(\"questiónsRef ref\", questionsRef)\r\n\r\n\r\n  const unsubscribe: Unsubscribe = onValue(questionsRef, (snapshot) => {\r\n\r\n    if (!snapshot.exists()) {\r\n\r\n      console.log(\"Path deleted or does not exist.\");\r\n      return;\r\n    }\r\n    const data: any = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\n\r\nexport const listenToSelectedCell = (roomId: string, callback: (data: any) => void): Unsubscribe => {\r\n  const cellsRef: DatabaseReference = ref(database, `rooms/${roomId}/cell`);\r\n  console.log(\"cellsRef\", cellsRef)\r\n  const unsubscribe: Unsubscribe = onValue(cellsRef, (snapshot) => {\r\n    const data: any = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToCellColor = (roomId: string, callback: (data: any) => void): Unsubscribe => {\r\n  const colorsRef: DatabaseReference = ref(database, `rooms/${roomId}/color`);\r\n  console.log(\"colorsRef\", colorsRef)\r\n  const unsubscribe: Unsubscribe = onValue(colorsRef, (snapshot) => {\r\n    const data: any = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToCurrentQuestionsNumber = (roomId: string, callback: (data: number) => void): Unsubscribe => {\r\n  const currentQuestionsNumbeRef: DatabaseReference = ref(database, `rooms/${roomId}/currentQuestions`);\r\n  console.log(\"questiónsRef ref\", currentQuestionsNumbeRef)\r\n  const unsubscribe: Unsubscribe = onValue(currentQuestionsNumbeRef, (snapshot) => {\r\n    const data: number = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToBuzzing = (roomId: string, callback: (data: string) => void): Unsubscribe => {\r\n  const questionsRef: DatabaseReference = ref(database, `rooms/${roomId}/buzzedPlayer`);\r\n  console.log(\"questiónsRef ref\", questionsRef)\r\n  const unsubscribe: Unsubscribe = onValue(questionsRef, (snapshot) => {\r\n    if (!snapshot.exists()) {\r\n\r\n      console.log(\"Path deleted or does not exist.\");\r\n      return;\r\n    }\r\n    const data: string = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToStar = (roomId: string, callback: (data: string) => void): Unsubscribe => {\r\n  const starRef: DatabaseReference = ref(database, `rooms/${roomId}/star`);\r\n  console.log(\"starRef\", starRef)\r\n  const unsubscribe: Unsubscribe = onValue(starRef, (snapshot) => {\r\n    if (!snapshot.exists()) {\r\n\r\n      console.log(\"Path deleted or does not exist.\");\r\n      return;\r\n    }\r\n    const data: string = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToObstacle = (roomId: string, callback: (data: any) => void): Unsubscribe => {\r\n  const obstaclessRef: DatabaseReference = ref(database, `rooms/${roomId}/obstacles`);\r\n  console.log(\"questiónsRef ref\", obstaclessRef)\r\n  const unsubscribe: Unsubscribe = onValue(obstaclessRef, (snapshot) => {\r\n    const data: any = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToPackets = (roomId: string, callback: (data: string[]) => void): Unsubscribe => {\r\n  const packetsRef: DatabaseReference = ref(database, `rooms/${roomId}/packets`);\r\n  console.log(\"packetsRef\", packetsRef)\r\n  const unsubscribe: Unsubscribe = onValue(packetsRef, (snapshot) => {\r\n    const data: string[] = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\n\r\nexport const listenToAnswers = (roomId: string, callback: (data: string) => void): Unsubscribe => {\r\n  const answerRef: DatabaseReference = ref(database, `rooms/${roomId}/answers`);\r\n  console.log(\"answerRef\", answerRef)\r\n  const unsubscribe: Unsubscribe = onValue(answerRef, (snapshot) => {\r\n    if (!snapshot.exists()) {\r\n\r\n      console.log(\"Path deleted or does not exist.\");\r\n      return;\r\n    }\r\n    const data: string = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToSound = (roomId: string, callback: (data: string) => void): Unsubscribe => {\r\n  const soundRef: DatabaseReference = ref(database, `rooms/${roomId}/sound`);\r\n  console.log(\"soundRef\", soundRef)\r\n  const unsubscribe: Unsubscribe = onValue(soundRef, (snapshot) => {\r\n    if (!snapshot.exists()) {\r\n\r\n      console.log(\"Path deleted or does not exist.\");\r\n      return;\r\n    }\r\n    const data: string = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToOpenBuzz = (roomId: string, callback: (data: string) => void): Unsubscribe => {\r\n  const buzzRef: DatabaseReference = ref(database, `rooms/${roomId}/openBuzzed`);\r\n  console.log(\"buzzRef\", buzzRef)\r\n  const unsubscribe: Unsubscribe = onValue(buzzRef, (snapshot) => {\r\n    const data: string = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\n// export const listenToTimeStart = (roomId: string, callback: (data: string) => void): Unsubscribe => {\r\n//   const timerRef: DatabaseReference = ref(database, `rooms/${roomId}/times`);\r\n//   console.log(\"timerRef\", timerRef)\r\n//   const unsubscribe: Unsubscribe = onValue(timerRef, (snapshot) => {\r\n//     const data: string = snapshot.val() || {};\r\n//     console.log(\"data\", data)\r\n//     callback(data);\r\n//   });\r\n//   return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n// };\r\n\r\nexport const listenToTimeStart = (roomId: string, callback: () => void): Unsubscribe => {\r\n  console.log(\"START LISTENING TO TIME START\");\r\n\r\n  const timerRef: DatabaseReference = ref(database, `rooms/${roomId}/times`);\r\n  let lastStartTime = Number(localStorage.getItem(\"lastStartTime\")) || 0;\r\n  let isFirstCall = true; // Flag to skip first execution\r\n  console.log(\"timerRef\", timerRef);\r\n  console.log(\"lastStartTime\", lastStartTime);\r\n\r\n\r\n\r\n  const unsubscribe: Unsubscribe = onValue(timerRef, (snapshot) => {\r\n    console.log(\"snapshot.val()\", snapshot.val());\r\n\r\n    const startTime = snapshot.val();\r\n    console.log(\"time\", startTime);\r\n    console.log(\"abc 1\");\r\n    if (isFirstCall) {\r\n      isFirstCall = false; // Skip the first execution\r\n      return;\r\n    }\r\n    console.log(\"abc 2\");\r\n\r\n    if (startTime && startTime !== lastStartTime) {\r\n      console.log(\"abc 3\");\r\n\r\n      lastStartTime = startTime;\r\n      localStorage.setItem(\"lastStartTime\", startTime.toString());\r\n      callback();\r\n    }\r\n  });\r\n\r\n  return unsubscribe;\r\n};\r\n\r\n// Listen for real-time updates to scores in a room\r\nexport const listenToScores = (roomId: string, callback: (data: Score[]) => void): Unsubscribe => {\r\n  const scoresRef: DatabaseReference = ref(database, `rooms/${roomId}/scores`);\r\n  const unsubscribe: Unsubscribe = onValue(scoresRef, (snapshot) => {\r\n    const data: Score[] = snapshot.val() || {};\r\n    callback(data);\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\nexport const listenToGrid = (roomId: string, callback: (data: string[][]) => void): Unsubscribe => {\r\n  const scoresRef: DatabaseReference = ref(database, `rooms/${roomId}/grid`);\r\n  const unsubscribe: Unsubscribe = onValue(scoresRef, (snapshot) => {\r\n    const data: string[][] = snapshot.val() || {};\r\n    callback(data);\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\n\r\nexport const listenToRoundStart = (roomId: string, callback: (data: any) => void): Unsubscribe => {\r\n  const roundsRef: DatabaseReference = ref(database, `rooms/${roomId}/rounds`);\r\n  const unsubscribe: Unsubscribe = onValue(roundsRef, (snapshot) => {\r\n    const data: any = snapshot.val() || {};\r\n    // console.log(\"round\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\n\r\nexport const listenToSelectRow = (roomId: string, callback: (data: any) => void): Unsubscribe => {\r\n  const rowsRef: DatabaseReference = ref(database, `rooms/${roomId}/select`);\r\n  const unsubscribe: Unsubscribe = onValue(rowsRef, (snapshot) => {\r\n    const data: any = snapshot.val() || {};\r\n    // console.log(\"round\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\nexport const listenToIncorrectRow = (roomId: string, callback: (data: any) => void): Unsubscribe => {\r\n  const rowsRef: DatabaseReference = ref(database, `rooms/${roomId}/incorrect`);\r\n  const unsubscribe: Unsubscribe = onValue(rowsRef, (snapshot) => {\r\n    const data: any = snapshot.val() || {};\r\n    // console.log(\"round\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\nexport const listenToCorrectRow = (roomId: string, callback: (data: any) => void): Unsubscribe => {\r\n  const rowsRef: DatabaseReference = ref(database, `rooms/${roomId}/correct`);\r\n  \r\n  \r\n  \r\n  const unsubscribe: Unsubscribe = onValue(rowsRef, (snapshot) => {\r\n\r\n    const data: any = snapshot.val() || {};\r\n    console.log(\"correct row\", data);\r\n    // console.log(\"round\", data)\r\n    callback(data);\r\n\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\n\r\n\r\nexport const listenToBroadcastedAnswer = (roomId: string, callback: (data: Answer[]) => void): Unsubscribe => {\r\n  const answerListRef: DatabaseReference = ref(database, `rooms/${roomId}/answerLists`);\r\n  const unsubscribe: Unsubscribe = onValue(answerListRef, (snapshot) => {\r\n    const data: Answer[] = snapshot.val() || {};\r\n    callback(data);\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\nexport const listenToSpectatorJoin = (roomId: string, callback: (count: number) => void): Unsubscribe => {\r\n  const spectatorRef: DatabaseReference = ref(database, `rooms/${roomId}/spectator/join`);\r\n  const unsubscribe: Unsubscribe = onValue(spectatorRef, (snapshot) => {\r\n    console.log(\"snapshot size\", snapshot.size);\r\n    \r\n    const count = snapshot.size;\r\n    callback(count);\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\n// export const listenToScore = (roomId: string, callback: (data: Answer[]) => void): Unsubscribe => {\r\n//   const scoresRef: DatabaseReference = ref(database, `rooms/${roomId}/scores`);\r\n//   const unsubscribe: Unsubscribe = onValue(scoresRef, (snapshot) => {\r\n//     const data: Answer[] = snapshot.val() || {};\r\n//     callback(data);\r\n//   });\r\n//   return unsubscribe;\r\n// }\r\n// Add a user to the players list in a room\r\nexport const addPlayerToRoom = async (roomId: string, uid: string, playerData: PlayerData): Promise<void> => {\r\n  const playerRef: DatabaseReference = ref(database, `rooms/${roomId}/players/${uid}`);\r\n  await set(playerRef, {\r\n    joined_at: Date.now(),\r\n    data: playerData, // e.g., { username: \"Player1\", points: 10 }\r\n  });\r\n};\r\n\r\nexport const removeSpectator = async (path: string): Promise<void> => {\r\n  const spectatorRef: DatabaseReference = ref(database, path)\r\n  const disconnectHandler = onDisconnect(spectatorRef);\r\n\r\n  disconnectHandler\r\n    .remove()\r\n    .then(() => {\r\n      console.log(`onDisconnect handler set for user with path ${path}`);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Failed to set onDisconnect handler:\", error);\r\n    });\r\n};\r\n\r\n\r\nexport const authenticateUser = async (token: string) => {\r\n  try {\r\n    const response = await axios.post(\"http://localhost:8000/api/auth\",\r\n      JSON.stringify({ token }),\r\n      {\r\n        withCredentials: true, // Important for cookies\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    )\r\n\r\n    if (response.status !== 200) {\r\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\r\n    }\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nexport const listenToGridActions = (roomId: string, callback: (data: any) => void): Unsubscribe => {\r\n  const roundsRef: DatabaseReference = ref(database, `rooms/${roomId}/rounds`);\r\n  const unsubscribe: Unsubscribe = onValue(roundsRef, (snapshot) => {\r\n    const data: any = snapshot.val() || {};\r\n    // console.log(\"round\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\nexport const deletePath = async (roomId: string, path: string): Promise<void> => {\r\n\r\n  const pathRef = ref(database, `rooms/${roomId}/${path}`);\r\n  console.log(\"delete path ref\", pathRef);\r\n\r\n  return remove(pathRef)\r\n    .then(() => {\r\n      console.log(`${path} for room ${roomId} deleted successfully.`);\r\n    })\r\n    .catch((error) => {\r\n      console.error(`Failed to delete ${path} for room ${roomId}:`, error);\r\n    });\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}