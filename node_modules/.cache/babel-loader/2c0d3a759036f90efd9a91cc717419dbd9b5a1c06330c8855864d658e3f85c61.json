{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { usePlayer } from \"../../context/playerContext\";\nimport { setSelectedRow, setCorrectRow, setIncorectRow } from \"../../components/services\";\nimport { deletePath, listenToTimeStart, listenToBuzzing, listenToSound, listenToCorrectRow, listenToIncorrectRow, listenToSelectRow, listenToQuestions, listenToObstacle } from \"../../services/firebaseServices\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { getNextQuestion } from \"../../pages/Host/Test/service\";\nimport { openObstacle } from \"../../components/services\";\nimport { generateGrid } from \"../../pages/User/Round2/utils\";\nimport PlayerAnswerInput from \"../../components/ui/PlayerAnswerInput\";\nimport { useSounds } from \"../../context/soundContext\";\nimport { resetBuzz } from \"../../components/services\";\nimport { useTimeStart } from \"../../context/timeListenerContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nconst mainKeyword = \"BÒCÔNGANH\";\nconst QuestionBoxRound2 = ({\n  obstacleWord,\n  hintWordArray,\n  initialGrid,\n  isSpectator = false,\n  isHost = false\n}) => {\n  _s();\n  var _grid$;\n  console.log(\"initialGrid inside player\", initialGrid);\n  const {\n    startTimer,\n    timeLeft,\n    setTimeLeft\n  } = useTimeStart();\n  const sounds = useSounds();\n  const [searchParams] = useSearchParams();\n  const {\n    setInitialGrid,\n    animationKey,\n    setAnimationKey\n  } = usePlayer();\n  const roomId = searchParams.get(\"roomId\") || \"\";\n  const testName = searchParams.get(\"testName\") || \"\";\n  const GRID_SIZE = 30;\n  const [grid, setGrid] = useState([[]]);\n  const [hintWords, setHintWords] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState();\n  const [buzzedPlayer, setBuzzedPlayer] = useState(\"\");\n  const [cellStyles, setCellStyles] = useState({}); // Tracks background and text styles\n  const [menu, setMenu] = useState({\n    visible: false\n  });\n  const [hintWordsLength, setHintWordsLength] = useState([]);\n  const [markedCharacters, setMarkedCharacters] = useState({});\n  const [highlightedCharacters, setHighlightedCharacters] = useState({});\n  const [showModal, setShowModal] = useState(false);\n  useEffect(() => {\n    console.log(\"timeLeft\", timeLeft);\n    if (timeLeft === 0) {\n      setAnimationKey(prev => prev + 1);\n\n      // If you want to reset timer, call startTimer again here or leave stopped\n    }\n  }, [timeLeft]);\n  const isInitialMount = useRef(false);\n  useEffect(() => {\n    const unsubscribe = listenToTimeStart(roomId, async () => {\n      // Skip the timer setting on the first mount, but allow future calls to run\n      if (isInitialMount.current) {\n        isInitialMount.current = false;\n        return;\n      }\n      startTimer(15);\n      return () => {\n        unsubscribe();\n      };\n    });\n  }, []);\n  const handleSuffleGrid = async () => {\n    if (isHost && hintWordArray) {\n      const result = await generateGrid(hintWordArray, 30);\n      console.log(\"board\", result.grid);\n      let topBound = 0;\n      let bottomBound = 0;\n      setHintWords(result.placementArray);\n      setGrid(result.grid);\n      const blankGrid = result.grid.map((row, rowIndex) => row.map((cell, colIndex) => result.grid[rowIndex][colIndex].includes(\"number\") ? cell :\n      // Keep \"numberX\"\n      cell !== \" \" && cell !== \"\" ? \"1\" : \"\" // Non-empty to \"1\", empty stays \"\"\n      ));\n      setInitialGrid(blankGrid);\n    }\n  };\n\n  // const isInitialMount = true;\n  // useEffect(() => {\n  //       if (isInitialMount) return\n\n  //       // Start timer when selectedTopic changes\n  //       startTimer(15);\n\n  //       return () => {  \n\n  //       }\n\n  //       // Side effects based on timer reaching 0\n  //   }, []);\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    // Optionally clear buzzedPlayer if you want to reset it\n    setBuzzedPlayer(\"\");\n    if (isHost) {\n      resetBuzz(roomId);\n    }\n  };\n  useEffect(() => {\n    let hasMounted = false;\n    const unsubscribeBuzzing = listenToBuzzing(roomId, playerName => {\n      // if (!hasMounted) {\n      //     hasMounted = true; // skip initial\n      //     return;\n      // }\n      const audio = sounds['buzz'];\n      if (audio) {\n        audio.play();\n      }\n      console.log(\"playerName on host\", playerName);\n      console.log(\"listening on buzzing\");\n      if (playerName && playerName !== \"\") {\n        setBuzzedPlayer(playerName);\n        console.log(\"playerName\", typeof playerName);\n        console.log(playerName, \"đã bấm chuông\");\n        setShowModal(true); // Show modal when a player buzzes\n      }\n    });\n    return () => {\n      unsubscribeBuzzing();\n    };\n  }, [roomId]);\n  useEffect(() => {\n    const unsubscribePlayers = listenToSound(roomId, async type => {\n      const audio = sounds[`${type}`];\n      if (audio) {\n        audio.play();\n      }\n      console.log(\"sound type\", type);\n      await deletePath(roomId, \"sound\");\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const markedCharactersMap = {};\n    const highlightedMap = {};\n    if (hintWordArray) {\n      for (const word of hintWordArray) {\n        const presentArray = [];\n        for (let i = 0; i < word.length; i++) {\n          if (obstacleWord !== null && obstacleWord !== void 0 && obstacleWord.includes(word[i])) {\n            presentArray.push(i);\n          }\n        }\n        markedCharactersMap[word] = presentArray;\n\n        // Randomly pick up to 2 indices\n        const shuffled = [...presentArray].sort(() => Math.random() - 0.5);\n        highlightedMap[word] = shuffled.slice(0, 2);\n      }\n      setMarkedCharacters(markedCharactersMap);\n      setHighlightedCharacters(highlightedMap);\n    }\n  }, [hintWordArray, obstacleWord]);\n  useEffect(() => {\n    const generateInitialGrid = async () => {\n      if (hintWordArray) {\n        if (isHost) {\n          console.log(\"hintWordArray\", hintWordArray);\n          console.log(\"obstacle\", obstacleWord);\n          const result = await generateGrid(hintWordArray, 30);\n          console.log(\"board\", result.grid);\n          setHintWords(result.placementArray);\n          setGrid(result.grid);\n          const blankGrid = result.grid.map((row, rowIndex) => row.map((cell, colIndex) => result.grid[rowIndex][colIndex].includes(\"number\") ? cell :\n          // Keep \"numberX\"\n          cell !== \" \" && cell !== \"\" ? \"1\" : \"\" // Non-empty to \"1\", empty stays \"\"\n          ));\n          setInitialGrid(blankGrid);\n        }\n      }\n      if (initialGrid) {\n        setGrid(initialGrid);\n      }\n    };\n    generateInitialGrid();\n  }, [hintWordArray, obstacleWord, initialGrid]);\n  const menuRef = useRef(null);\n  const revealCells = (rowIndex, colIndex, action, hintWordNumber) => {\n    if (!isHost) return;\n    const hintWordIndex = hintWordNumber ? parseInt(hintWordNumber) : -1;\n    const hintWord = hintWords.find(word => word.index === hintWordIndex);\n    console.log(\"hintWord\", hintWord);\n    console.log(\"hintWords\", hintWords);\n    if (!hintWord) return;\n    const isRow = hintWord.dir === 1;\n    console.log(hintWord, \"is\", hintWord.dir);\n    const wordLength = hintWord.string.length - 3;\n    const startIndex = isRow ? colIndex + 1 : rowIndex + 1;\n    const handleNextQuestion = async (testName, hintWordIndex, round, roomId) => {\n      await getNextQuestion(testName, hintWordIndex, round, roomId);\n    };\n    setCellStyles(prev => {\n      const newStyles = {\n        ...prev\n      };\n      if (isRow) {\n        for (let col = startIndex; col < startIndex + wordLength; col++) {\n          if (col == GRID_SIZE) break;\n          const key = `${rowIndex}-${col}`;\n          // Skip number cells to preserve their appearance\n          console.log(\"grid[rowIndex][col]\", grid[rowIndex][col]);\n          console.log(\"rowIndex\", rowIndex);\n          console.log(\"col\", col);\n          if (!grid[rowIndex][col].includes(\"number\")) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) {\n                setSelectedRow(roomId, hintWordNumber, true, wordLength);\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId);\n              }\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-black\"\n              };\n              let indexInTarget = [];\n              if (hintWordArray) for (let i = 2; i <= wordLength + 1; i++) {\n                const char = hintWord.char[i];\n                if (obstacleWord) {\n                  if (obstacleWord.includes(char)) {\n                    console.log(\"obstacleWord\", obstacleWord);\n                    console.log(\"char\", char);\n                    console.log(\"obstacleWord.includes(char)\", obstacleWord.includes(char));\n                    console.log(\"i\", i);\n                    console.log(\"i-2\", i - 2);\n                    indexInTarget.push(i - 2);\n                  }\n                }\n              }\n              if (hintWordArray && hintWordNumber) {\n                console.log(\"hintWordNumber\", hintWordNumber);\n                console.log(\"hintWord\", hintWord);\n                console.log(\"hintWord.string.slice(2, hintWord.string.length-1)\", hintWord.string.slice(2, hintWord.string.length - 1));\n                console.log(\"indexInTarget\", indexInTarget);\n                console.log(\"encodeURIComponent(JSON.stringify(indexInTarget))\", encodeURIComponent(JSON.stringify(indexInTarget)));\n                setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), true, wordLength);\n              }\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setIncorectRow(roomId, hintWordNumber, true, wordLength);\n            }\n          }\n        }\n      } else {\n        for (let row = startIndex; row < startIndex + wordLength; row++) {\n          if (row == GRID_SIZE) break;\n          const key = `${row}-${colIndex}`;\n          console.log(\"grid[row][colIndex]\", grid[row][colIndex]);\n          console.log(\"colIndex\", colIndex);\n          console.log(\"row\", row);\n          // Skip number cells to preserve their appearance\n          if (!grid[row][colIndex].includes(\"number\")) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) {\n                setSelectedRow(roomId, hintWordNumber, false, wordLength);\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId);\n              }\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-black\"\n              };\n              let indexInTarget = [];\n              if (hintWordArray) for (let i = 2; i <= wordLength + 1; i++) {\n                const char = hintWord.char[i];\n                if (obstacleWord) {\n                  if (obstacleWord.includes(char)) {\n                    console.log(\"obstacleWord\", obstacleWord);\n                    console.log(\"char\", char);\n                    console.log(\"obstacleWord.includes(char)\", obstacleWord.includes(char));\n                    console.log(\"i\", i);\n                    console.log(\"i-2\", i - 2);\n                    indexInTarget.push(i - 2);\n                  }\n                }\n              }\n              if (hintWordArray && hintWordNumber) setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), false, wordLength);\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setIncorectRow(roomId, hintWordNumber, false, wordLength);\n            }\n          }\n        }\n      }\n      return newStyles;\n    });\n\n    // if (action === \"correct\" || action === \"incorrect\") {\n    //   setSelectedRow(roomId, isRow ? rowIndex.toString() : colIndex.toString());\n    // }\n  };\n  const revealCellsForPlayer = (rowIndex, colIndex, action, selectedRowNumber, markedCharacterIndex, isRow, wordLength, correctAnswer // For correct\n  ) => {\n    if (isHost) return; // Ensure this runs only for players\n\n    // Determine word length\n    const length = action === \"correct\" ? (correctAnswer === null || correctAnswer === void 0 ? void 0 : correctAnswer.length) || 0 : wordLength || 0;\n    if (length === 0) {\n      console.warn(`No valid word length for row ${selectedRowNumber}`);\n      return;\n    }\n    setCellStyles(prev => {\n      const newStyles = {\n        ...prev\n      };\n      if (isRow) {\n        // Horizontal: style cells from colIndex + 1 to colIndex + length\n        for (let col = colIndex + 1; col <= colIndex + length; col++) {\n          var _grid$rowIndex$col;\n          const key = `${rowIndex}-${col}`;\n          console.log(\"markedCharacterIndex\", markedCharacterIndex);\n          console.log(\"col\", col);\n          console.log(\"col-colIndex\", col - colIndex - 1);\n          console.log(\"markedCharacterIndex.includes(col)\", markedCharacterIndex.includes(col - colIndex));\n\n          // Skip empty and number cells\n          if (grid[rowIndex][col] !== \"\" && !((_grid$rowIndex$col = grid[rowIndex][col]) !== null && _grid$rowIndex$col !== void 0 && _grid$rowIndex$col.includes(\"number\"))) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: markedCharacterIndex.includes(col - colIndex - 1) ? \"text-red-600\" : \"text-black\"\n              };\n            }\n          }\n        }\n      } else {\n        // Vertical: style cells from rowIndex + 1 to rowIndex + length\n        for (let row = rowIndex + 1; row <= rowIndex + length; row++) {\n          var _grid$row$colIndex;\n          const key = `${row}-${colIndex}`;\n          console.log(\"markedCharacterIndex\", markedCharacterIndex);\n          console.log(\"col\", row);\n          console.log(\"row-rowIndex\", row - rowIndex - 1);\n          console.log(\"markedCharacterIndex.includes(col)\", markedCharacterIndex.includes(row - rowIndex));\n          // Skip empty and number cells\n          if (grid[row][colIndex] !== \"\" && !((_grid$row$colIndex = grid[row][colIndex]) !== null && _grid$row$colIndex !== void 0 && _grid$row$colIndex.includes(\"number\"))) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: markedCharacterIndex.includes(row - rowIndex - 1) ? \"text-red-600\" : \"text-black\"\n              };\n            }\n          }\n        }\n      }\n      return newStyles;\n    });\n\n    // For \"correct\", update grid to show the actual word\n    if (action === \"correct\" && correctAnswer) {\n      setGrid(prevGrid => {\n        const newGrid = prevGrid.map(row => [...row]);\n        if (isRow) {\n          for (let col = colIndex + 1, i = 0; col <= colIndex + length && i < correctAnswer.length; col++, i++) {\n            newGrid[rowIndex][col] = correctAnswer[i];\n          }\n        } else {\n          for (let row = rowIndex + 1, i = 0; row <= rowIndex + length && i < correctAnswer.length; row++, i++) {\n            newGrid[row][colIndex] = correctAnswer[i];\n          }\n        }\n        return newGrid;\n      });\n    }\n  };\n  // useEffect(() => {\n  //   if (hintWordArray) {\n  //     hintWordArray.forEach((word, index) => {\n  //       console.log(`Word ${index}: '${word}' has length: ${word.length}`);\n  //       console.log([...word]);\n  //     });\n  //     const lengthArray = hintWordArray.map((word) => word.length);\n  //     setHintWordsLength(lengthArray);\n  //   }\n  // }, [hintWordArray]);\n\n  useEffect(() => {\n    const unsubscribePlayers = listenToObstacle(roomId, obstacle => {\n      // setCurrentQuestion(question)\n      // console.log(\"current question\", question)\n      const obstacleRevealed = {\n        \"question\": obstacle\n      };\n      setCurrentQuestion(obstacleRevealed);\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col].includes(\"number\")) {\n            revealCellsForPlayer(row, col, \"correct\", grid[row][col].replace(\"number\", \"\"), []);\n          }\n        }\n      }\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToQuestions(roomId, question => {\n      setCurrentQuestion(question);\n      console.log(\"current question\", question);\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  // Listen for \"open\" (select) signal\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeSelect = listenToSelectRow(roomId, data => {\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      let rowIndex = -1;\n      let colIndex = -1;\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"open\", data.selected_row_number, [], data.is_row, data.word_length);\n    });\n    return () => {\n      unsubscribeSelect();\n    };\n  }, [roomId, grid]);\n\n  // Listen for \"incorrect\" signal\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeIncorrect = listenToIncorrectRow(roomId, data => {\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      const audio = sounds['wrong_2'];\n      if (audio) {\n        audio.play();\n      }\n      let rowIndex = -1;\n      let colIndex = -1;\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"incorrect\", data.selected_row_number, [], data.is_row, data.word_length);\n    });\n    return () => {\n      unsubscribeIncorrect();\n    };\n  }, [roomId, grid]);\n\n  // Listen for \"correct\" signal\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeCorrect = listenToCorrectRow(roomId, data => {\n      console.log(\"isInitialCall\", isInitialCall);\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      const audio = sounds['correct_2'];\n      if (audio) {\n        audio.play();\n      }\n      console.log(\"isInitialCall after\", isInitialCall);\n      let rowIndex = -1;\n      let colIndex = -1;\n      console.log(\"grid\", grid);\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"correct\", data.selected_row_number, data.marked_character_index, data.is_row, undefined, data.correct_answer);\n    });\n    return () => {\n      unsubscribeCorrect();\n    };\n  }, [roomId, grid]);\n\n  // Reveal cells in a row or column\n\n  // Handle number click to show menu\n  const handleNumberClick = (rowIndex, colIndex) => {\n    if (!isHost) return;\n    setMenu({\n      visible: true,\n      rowIndex,\n      colIndex\n    });\n  };\n\n  // Handle menu actions\n  const handleMenuAction = (action, rowIndex, colIndex, hintWordNumber) => {\n    revealCells(rowIndex, colIndex, action, hintWordNumber);\n    setMenu({\n      visible: false\n    });\n  };\n\n  // Handle cell click to reveal\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (!isHost) return;\n    revealCells(rowIndex, colIndex, \"open\");\n  };\n  const handleOpenObstacle = async () => {\n    if (!isHost || !hintWords || !hintWordArray) return;\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (Number.isFinite(Number(grid[row][col]))) {\n          revealCells(row, col, \"correct\", grid[row][col]);\n        }\n      }\n    }\n    if (obstacleWord) {\n      await openObstacle(roomId, obstacleWord);\n    }\n  };\n\n  // Close menu on outside click\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setMenu({\n          visible: false\n        });\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-slate-800/80 backdrop-blur-sm rounded-xl border border-blue-400/30 shadow-2xl p-6 mb-4 relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-white text-xl font-semibold text-center mb-4 max-w-[90%]\",\n      children: typeof (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question) === \"string\" ? currentQuestion.question : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 744,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid  [grid-template-columns:repeat(var(--cols),32px)] [grid-auto-rows:max-content]  gap-1 max-h-[750px] overflow-y-auto overflow-visible\",\n      style: {\n        '--cols': ((_grid$ = grid[0]) === null || _grid$ === void 0 ? void 0 : _grid$.length) || 1\n      },\n      children: !grid || !Array.isArray(grid) || !grid.every(row => Array.isArray(row)) ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-white\",\n        children: \"Invalid grid data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 11\n      }, this) : grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map((cell, colIndex) => {\n          const cellKey = `${rowIndex}-${colIndex}`;\n          const cellStyle = cellStyles[cellKey] || {\n            background: cell === \"\" || cell === \" \" ? \"transparent\" : \"bg-white\",\n            textColor: cell.includes(\"number\") ? \"text-blue-400\" : \"text-transparent\"\n          };\n          const showMenu = menu.visible && menu.rowIndex === rowIndex && menu.colIndex === colIndex && cell.includes(\"number\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative w-8 h-8 flex items-center justify-center overflow-visible\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `w-8 h-8 flex items-center justify-center text-lg font-semibold select-none rounded-lg overflow-visible   \n                  ${cell.includes(\"number\") ? \"text-blue-400 border-none\" : \"\"}\n                  ${cell.includes(\"number\") ? \"\" : cellStyle.background}\n                  ${cell.includes(\"number\") ? \"text-blue-400\" : cellStyle.textColor}\n                  ${obstacleWord !== null && obstacleWord !== void 0 && obstacleWord.includes(cell) && cellStyle.textColor === \"text-black\" && !cell.includes(\"number\") && isNaN(Number(cell)) ? \"font-bold text-red-400\" : \"\"}\n                `,\n              onClick: () => {\n                if (isHost) {\n                  if (cell.includes(\"number\")) {\n                    handleNumberClick(rowIndex, colIndex);\n                  } else {\n                    handleCellClick(rowIndex, colIndex);\n                  }\n                }\n              },\n              style: {\n                cursor: isHost && (cell.includes(\"number\") || hintWords.some(word => word.y === rowIndex || word.x === colIndex)) ? \"pointer\" : \"default\"\n              },\n              children: typeof cell === \"string\" || typeof cell === \"number\" ? cell.includes(\"number\") ? cell.replace(\"number\", \"\") : cell : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 774,\n              columnNumber: 21\n            }, this), showMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: menuRef,\n              className: \"absolute left-12 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-slate-900 border border-blue-400/50 rounded shadow-lg p-1 z-10\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\",\n                onClick: () => handleMenuAction(\"open\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"SELECT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 816,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600\",\n                onClick: () => handleMenuAction(\"correct\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"Correct\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 824,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600\",\n                onClick: () => handleMenuAction(\"incorrect\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"Incorrect\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 832,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 812,\n              columnNumber: 23\n            }, this)]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 773,\n            columnNumber: 19\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 7\n    }, this), !isSpectator && /*#__PURE__*/_jsxDEV(PlayerAnswerInput, {\n      isHost: isHost,\n      question: currentQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 850,\n      columnNumber: 11\n    }, this), isHost && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 mt-4 w-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          alert('Mở cnv!');\n          handleOpenObstacle();\n        },\n        className: \"bg-indigo-600 hover:bg-indigo-700 text-white p-2 flex-1 rounded-md whitespace-nowrap\",\n        children: \"M\\u1EDF CNV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleSuffleGrid();\n        },\n        className: \"bg-indigo-600 hover:bg-indigo-700 text-white p-2 flex-1 rounded-md whitespace-nowrap\",\n        children: \"X\\xE1o tr\\u1ED9n h\\xE0ng ngang\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 869,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 859,\n      columnNumber: 11\n    }, this), showModal && buzzedPlayer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg p-6 w-80 shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold text-gray-800 mb-4 text-center\",\n          children: `${buzzedPlayer} đã nhấn chuông trả lời`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 884,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCloseModal,\n            className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400\",\n            children: \"\\u0110\\xF3ng\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 888,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 883,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 882,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 743,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionBoxRound2, \"Cr38Y101K0eeUNyCUYq5G32TTP4=\", false, function () {\n  return [useTimeStart, useSounds, useSearchParams, usePlayer];\n});\n_c = QuestionBoxRound2;\nexport default QuestionBoxRound2;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound2\");","map":{"version":3,"names":["React","useState","useEffect","useRef","usePlayer","setSelectedRow","setCorrectRow","setIncorectRow","deletePath","listenToTimeStart","listenToBuzzing","listenToSound","listenToCorrectRow","listenToIncorrectRow","listenToSelectRow","listenToQuestions","listenToObstacle","useSearchParams","getNextQuestion","openObstacle","generateGrid","PlayerAnswerInput","useSounds","resetBuzz","useTimeStart","jsxDEV","_jsxDEV","mainKeyword","QuestionBoxRound2","obstacleWord","hintWordArray","initialGrid","isSpectator","isHost","_s","_grid$","console","log","startTimer","timeLeft","setTimeLeft","sounds","searchParams","setInitialGrid","animationKey","setAnimationKey","roomId","get","testName","GRID_SIZE","grid","setGrid","hintWords","setHintWords","currentQuestion","setCurrentQuestion","buzzedPlayer","setBuzzedPlayer","cellStyles","setCellStyles","menu","setMenu","visible","hintWordsLength","setHintWordsLength","markedCharacters","setMarkedCharacters","highlightedCharacters","setHighlightedCharacters","showModal","setShowModal","prev","isInitialMount","unsubscribe","current","handleSuffleGrid","result","topBound","bottomBound","placementArray","blankGrid","map","row","rowIndex","cell","colIndex","includes","handleCloseModal","hasMounted","unsubscribeBuzzing","playerName","audio","play","unsubscribePlayers","type","markedCharactersMap","highlightedMap","word","presentArray","i","length","push","shuffled","sort","Math","random","slice","generateInitialGrid","menuRef","revealCells","action","hintWordNumber","hintWordIndex","parseInt","hintWord","find","index","isRow","dir","wordLength","string","startIndex","handleNextQuestion","round","newStyles","col","key","background","textColor","toString","indexInTarget","char","encodeURIComponent","JSON","stringify","revealCellsForPlayer","selectedRowNumber","markedCharacterIndex","correctAnswer","warn","_grid$rowIndex$col","_grid$row$colIndex","prevGrid","newGrid","obstacle","obstacleRevealed","replace","question","isInitialCall","unsubscribeSelect","data","selected_row_number","is_row","word_length","unsubscribeIncorrect","unsubscribeCorrect","marked_character_index","undefined","correct_answer","handleNumberClick","handleMenuAction","handleCellClick","handleOpenObstacle","Number","isFinite","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","Array","isArray","every","Fragment","cellKey","cellStyle","showMenu","isNaN","onClick","cursor","some","y","x","ref","alert","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round2.tsx"],"sourcesContent":["import Play from \"../Play\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { renderGrid } from \"./utils\";\r\nimport { usePlayer } from \"../../context/playerContext\";\r\nimport { setSelectedRow, setCorrectRow, setIncorectRow } from \"../../components/services\";\r\nimport { deletePath, listenToTimeStart, listenToBuzzing, listenToSound, listenToCorrectRow, listenToIncorrectRow, listenToSelectRow, listenToQuestions, listenToObstacle } from \"../../services/firebaseServices\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { getNextQuestion } from \"../../pages/Host/Test/service\";\r\nimport { openObstacle } from \"../../components/services\";\r\nimport { generateGrid } from \"../../pages/User/Round2/utils\";\r\nimport PlayerAnswerInput from \"../../components/ui/PlayerAnswerInput\";\r\nimport { Question } from \"../../type\";\r\nimport { useSounds } from \"../../context/soundContext\";\r\nimport { resetBuzz } from \"../../components/services\";\r\nimport { useTimeStart } from \"../../context/timeListenerContext\";\r\n\r\ninterface HintWord {\r\n  word: string;\r\n  x: number;\r\n  y: number;\r\n  direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\n\r\n\r\ninterface MatchPosition {\r\n  x: number;\r\n  y: number;\r\n  dir: number;\r\n}\r\n\r\ninterface WordObj {\r\n  string: string;\r\n  char: string[];\r\n  totalMatches: number;\r\n  effectiveMatches: number;\r\n  successfulMatches: MatchPosition[];\r\n  x: number;\r\n  y: number;\r\n  dir: number;\r\n  index: number;\r\n};\r\n\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n  obstacleWord?: string;\r\n  hintWordArray?: string[];\r\n  isHost?: boolean;\r\n  initialGrid?: string[][];\r\n  isSpectator?: boolean;\r\n}\r\n\r\ninterface QuestionBoxProps {\r\n  question: string;\r\n  imageUrl?: string;\r\n  isHost?: boolean\r\n}\r\n\r\nconst mainKeyword = \"BÒCÔNGANH\";\r\n\r\nconst QuestionBoxRound2: React.FC<ObstacleQuestionBoxProps> = ({\r\n  obstacleWord,\r\n  hintWordArray,\r\n  initialGrid,\r\n  isSpectator = false,\r\n  isHost = false,\r\n}) => {\r\n  console.log(\"initialGrid inside player\", initialGrid);\r\n  const { startTimer, timeLeft, setTimeLeft } = useTimeStart();\r\n  const sounds = useSounds();\r\n  const [searchParams] = useSearchParams();\r\n  const { setInitialGrid, animationKey, setAnimationKey } = usePlayer();\r\n  const roomId = searchParams.get(\"roomId\") || \"\";\r\n  const testName = searchParams.get(\"testName\") || \"\"\r\n  const GRID_SIZE = 30;\r\n\r\n  const [grid, setGrid] = useState<string[][]>([[]]);\r\n  const [hintWords, setHintWords] = useState<WordObj[]>([]);\r\n  const [currentQuestion, setCurrentQuestion] = useState<Question>()\r\n  const [buzzedPlayer, setBuzzedPlayer] = useState<string>(\"\");\r\n\r\n  const [cellStyles, setCellStyles] = useState<\r\n    Record<string, { background: string; textColor: string }>\r\n  >({}); // Tracks background and text styles\r\n  const [menu, setMenu] = useState<{\r\n    visible: boolean;\r\n    rowIndex?: number;\r\n    colIndex?: number;\r\n  }>({ visible: false });\r\n  const [hintWordsLength, setHintWordsLength] = useState<number[]>([]);\r\n  const [markedCharacters, setMarkedCharacters] = useState<Record<string, number[]>>({});\r\n  const [highlightedCharacters, setHighlightedCharacters] = useState<Record<string, number[]>>({});\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log(\"timeLeft\", timeLeft);\r\n\r\n    if (timeLeft === 0) {\r\n      setAnimationKey((prev: number) => prev + 1);\r\n      \r\n      // If you want to reset timer, call startTimer again here or leave stopped\r\n    }\r\n  }, [timeLeft]);\r\n\r\n  const isInitialMount = useRef(false)\r\n  useEffect(() => {\r\n    const unsubscribe = listenToTimeStart(roomId, async () => {\r\n\r\n\r\n      // Skip the timer setting on the first mount, but allow future calls to run\r\n      if (isInitialMount.current) {\r\n        isInitialMount.current = false;\r\n        return;\r\n      }\r\n      startTimer(15)\r\n      return () => {\r\n        unsubscribe();\r\n\r\n      };\r\n    })\r\n\r\n  }, [])\r\n  const handleSuffleGrid = async () => {\r\n    if (isHost && hintWordArray) {\r\n      const result = await generateGrid(hintWordArray, 30)\r\n      console.log(\"board\", result.grid);\r\n      let topBound = 0\r\n      let bottomBound = 0\r\n\r\n      setHintWords(result.placementArray)\r\n      setGrid(result.grid)\r\n\r\n      const blankGrid = result.grid.map((row, rowIndex) =>\r\n        row.map((cell, colIndex) =>\r\n          result.grid[rowIndex][colIndex].includes(\"number\") ? cell : // Keep \"numberX\"\r\n            (cell !== \" \" && cell !== \"\") ? \"1\" : \"\" // Non-empty to \"1\", empty stays \"\"\r\n        )\r\n      );\r\n      setInitialGrid(blankGrid)\r\n    }\r\n\r\n  }\r\n\r\n  // const isInitialMount = true;\r\n  // useEffect(() => {\r\n  //       if (isInitialMount) return\r\n\r\n\r\n  //       // Start timer when selectedTopic changes\r\n  //       startTimer(15);\r\n\r\n  //       return () => {  \r\n\r\n\r\n  //       }\r\n\r\n  //       // Side effects based on timer reaching 0\r\n  //   }, []);\r\n\r\n  const handleCloseModal = () => {\r\n    setShowModal(false);\r\n    // Optionally clear buzzedPlayer if you want to reset it\r\n    setBuzzedPlayer(\"\");\r\n\r\n    if (isHost) {\r\n      resetBuzz(roomId)\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n\r\n    let hasMounted = false;\r\n    const unsubscribeBuzzing = listenToBuzzing(roomId, (playerName) => {\r\n      // if (!hasMounted) {\r\n      //     hasMounted = true; // skip initial\r\n      //     return;\r\n      // }\r\n      const audio = sounds['buzz'];\r\n      if (audio) {\r\n        audio.play();\r\n      }\r\n      console.log(\"playerName on host\", playerName);\r\n\r\n      console.log(\"listening on buzzing\");\r\n\r\n      if (playerName && playerName !== \"\") {\r\n        setBuzzedPlayer(playerName);\r\n        console.log(\"playerName\", typeof playerName);\r\n\r\n        console.log(playerName, \"đã bấm chuông\")\r\n        setShowModal(true); // Show modal when a player buzzes\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeBuzzing();\r\n    };\r\n  }, [roomId]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const unsubscribePlayers = listenToSound(roomId, async (type) => {\r\n\r\n      const audio = sounds[`${type}`];\r\n      if (audio) {\r\n        audio.play();\r\n      }\r\n      console.log(\"sound type\", type)\r\n      await deletePath(roomId, \"sound\")\r\n    });\r\n\r\n    // No need to set state here; it's handled by useState initializer\r\n    return () => {\r\n      unsubscribePlayers();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const markedCharactersMap: Record<string, number[]> = {};\r\n    const highlightedMap: Record<string, number[]> = {};\r\n\r\n    if (hintWordArray) {\r\n      for (const word of hintWordArray) {\r\n        const presentArray: number[] = [];\r\n\r\n        for (let i = 0; i < word.length; i++) {\r\n          if (obstacleWord?.includes(word[i])) {\r\n            presentArray.push(i);\r\n          }\r\n        }\r\n\r\n        markedCharactersMap[word] = presentArray;\r\n\r\n        // Randomly pick up to 2 indices\r\n        const shuffled = [...presentArray].sort(() => Math.random() - 0.5);\r\n        highlightedMap[word] = shuffled.slice(0, 2);\r\n      }\r\n\r\n      setMarkedCharacters(markedCharactersMap);\r\n      setHighlightedCharacters(highlightedMap);\r\n    }\r\n  }, [hintWordArray, obstacleWord]);\r\n\r\n  useEffect(() => {\r\n    const generateInitialGrid = async () => {\r\n      if (hintWordArray) {\r\n        if (isHost) {\r\n          console.log(\"hintWordArray\", hintWordArray);\r\n          console.log(\"obstacle\", obstacleWord);\r\n\r\n          const result = await generateGrid(hintWordArray, 30)\r\n          console.log(\"board\", result.grid);\r\n          setHintWords(result.placementArray)\r\n          setGrid(result.grid)\r\n\r\n          const blankGrid = result.grid.map((row, rowIndex) =>\r\n            row.map((cell, colIndex) =>\r\n              result.grid[rowIndex][colIndex].includes(\"number\") ? cell : // Keep \"numberX\"\r\n                (cell !== \" \" && cell !== \"\") ? \"1\" : \"\" // Non-empty to \"1\", empty stays \"\"\r\n            )\r\n          );\r\n          setInitialGrid(blankGrid)\r\n        }\r\n      }\r\n\r\n      if (initialGrid) {\r\n        setGrid(initialGrid)\r\n      }\r\n    }\r\n\r\n    generateInitialGrid()\r\n  }, [hintWordArray, obstacleWord, initialGrid])\r\n\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n\r\n  const revealCells = (\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    action: \"open\" | \"correct\" | \"incorrect\",\r\n    hintWordNumber?: string\r\n  ) => {\r\n    if (!isHost) return;\r\n\r\n    const hintWordIndex = hintWordNumber ? parseInt(hintWordNumber) : -1;\r\n    const hintWord = hintWords.find(\r\n      (word) =>\r\n        (word.index === hintWordIndex)\r\n    );\r\n\r\n    console.log(\"hintWord\", hintWord);\r\n    console.log(\"hintWords\", hintWords);\r\n\r\n\r\n    if (!hintWord) return;\r\n\r\n    const isRow = hintWord.dir === 1;\r\n    console.log(hintWord, \"is\", hintWord.dir);\r\n\r\n    const wordLength = hintWord.string.length - 3;\r\n    const startIndex = isRow ? colIndex + 1 : rowIndex + 1;\r\n\r\n    const handleNextQuestion = async (testName: string, hintWordIndex: string, round: string, roomId: string) => {\r\n      await getNextQuestion(testName, hintWordIndex, round, roomId)\r\n    }\r\n\r\n    setCellStyles((prev) => {\r\n      const newStyles = { ...prev };\r\n      if (isRow) {\r\n        for (let col = startIndex; col < startIndex + wordLength; col++) {\r\n          if (col == GRID_SIZE) break\r\n          const key = `${rowIndex}-${col}`;\r\n          // Skip number cells to preserve their appearance\r\n          console.log(\"grid[rowIndex][col]\", grid[rowIndex][col])\r\n          console.log(\"rowIndex\", rowIndex);\r\n          console.log(\"col\", col);\r\n\r\n          if (!grid[rowIndex][col].includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber) {\r\n                setSelectedRow(roomId, hintWordNumber, true, wordLength)\r\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId)\r\n              }\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-black\" };\r\n              let indexInTarget = []\r\n              if (hintWordArray)\r\n                for (let i = 2; i <= wordLength + 1; i++) {\r\n                  const char = hintWord.char[i];\r\n\r\n\r\n                  if (obstacleWord) {\r\n                    if (obstacleWord.includes(char)) {\r\n                      console.log(\"obstacleWord\", obstacleWord);\r\n                      console.log(\"char\", char);\r\n                      console.log(\"obstacleWord.includes(char)\", obstacleWord.includes(char));\r\n                      console.log(\"i\", i);\r\n                      console.log(\"i-2\", i - 2);\r\n\r\n\r\n\r\n                      indexInTarget.push(i - 2)\r\n                    }\r\n                  }\r\n                }\r\n              if (hintWordArray && hintWordNumber) {\r\n                console.log(\"hintWordNumber\", hintWordNumber);\r\n                console.log(\"hintWord\", hintWord);\r\n                console.log(\"hintWord.string.slice(2, hintWord.string.length-1)\", hintWord.string.slice(2, hintWord.string.length - 1));\r\n                console.log(\"indexInTarget\", indexInTarget);\r\n                console.log(\"encodeURIComponent(JSON.stringify(indexInTarget))\", encodeURIComponent(JSON.stringify(indexInTarget)),);\r\n\r\n\r\n\r\n\r\n                setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), true, wordLength)\r\n              }\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setIncorectRow(roomId, hintWordNumber, true, wordLength)\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        for (let row = startIndex; row < startIndex + wordLength; row++) {\r\n          if (row == GRID_SIZE) break\r\n          const key = `${row}-${colIndex}`;\r\n          console.log(\"grid[row][colIndex]\", grid[row][colIndex])\r\n          console.log(\"colIndex\", colIndex);\r\n          console.log(\"row\", row);\r\n          // Skip number cells to preserve their appearance\r\n          if (!grid[row][colIndex].includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber) {\r\n                setSelectedRow(roomId, hintWordNumber, false, wordLength)\r\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId)\r\n              }\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-black\" };\r\n              let indexInTarget = []\r\n              if (hintWordArray)\r\n                for (let i = 2; i <= wordLength + 1; i++) {\r\n                  const char = hintWord.char[i];\r\n\r\n                  if (obstacleWord) {\r\n                    if (obstacleWord.includes(char)) {\r\n                      console.log(\"obstacleWord\", obstacleWord);\r\n                      console.log(\"char\", char);\r\n                      console.log(\"obstacleWord.includes(char)\", obstacleWord.includes(char));\r\n                      console.log(\"i\", i);\r\n                      console.log(\"i-2\", i - 2);\r\n\r\n                      indexInTarget.push(i - 2)\r\n                    }\r\n                  }\r\n                }\r\n              if (hintWordArray && hintWordNumber)\r\n                setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), false, wordLength)\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setIncorectRow(roomId, hintWordNumber, false, wordLength)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return newStyles;\r\n    });\r\n\r\n    // if (action === \"correct\" || action === \"incorrect\") {\r\n    //   setSelectedRow(roomId, isRow ? rowIndex.toString() : colIndex.toString());\r\n    // }\r\n  };\r\n\r\n\r\n  const revealCellsForPlayer = (\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    action: \"open\" | \"incorrect\" | \"correct\",\r\n    selectedRowNumber: string,\r\n    markedCharacterIndex: number[],\r\n    isRow?: boolean,\r\n    wordLength?: number, // For open and incorrect\r\n    correctAnswer?: string, // For correct\r\n  ) => {\r\n    if (isHost) return; // Ensure this runs only for players\r\n\r\n    // Determine word length\r\n    const length = action === \"correct\" ? correctAnswer?.length || 0 : wordLength || 0;\r\n\r\n    if (length === 0) {\r\n      console.warn(`No valid word length for row ${selectedRowNumber}`);\r\n      return;\r\n    }\r\n\r\n    setCellStyles((prev) => {\r\n      const newStyles = { ...prev };\r\n      if (isRow) {\r\n        // Horizontal: style cells from colIndex + 1 to colIndex + length\r\n        for (let col = colIndex + 1; col <= colIndex + length; col++) {\r\n          const key = `${rowIndex}-${col}`;\r\n          console.log(\"markedCharacterIndex\", markedCharacterIndex);\r\n          console.log(\"col\", col);\r\n          console.log(\"col-colIndex\", col - colIndex - 1);\r\n\r\n          console.log(\"markedCharacterIndex.includes(col)\", markedCharacterIndex.includes(col - colIndex));\r\n\r\n\r\n\r\n          // Skip empty and number cells\r\n          if (grid[rowIndex][col] !== \"\" && !grid[rowIndex][col]?.includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = {\r\n                background: \"bg-yellow-200\",\r\n                textColor: markedCharacterIndex.includes(col - colIndex - 1) ? \"text-red-600\" : \"text-black\"\r\n              };\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // Vertical: style cells from rowIndex + 1 to rowIndex + length\r\n        for (let row = rowIndex + 1; row <= rowIndex + length; row++) {\r\n          const key = `${row}-${colIndex}`;\r\n          console.log(\"markedCharacterIndex\", markedCharacterIndex);\r\n          console.log(\"col\", row);\r\n          console.log(\"row-rowIndex\", row - rowIndex - 1);\r\n          console.log(\"markedCharacterIndex.includes(col)\", markedCharacterIndex.includes(row - rowIndex));\r\n          // Skip empty and number cells\r\n          if (grid[row][colIndex] !== \"\" && !grid[row][colIndex]?.includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = {\r\n                background: \"bg-yellow-200\",\r\n                textColor: markedCharacterIndex.includes(row - rowIndex - 1) ? \"text-red-600\" : \"text-black\"\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return newStyles;\r\n    });\r\n\r\n    // For \"correct\", update grid to show the actual word\r\n    if (action === \"correct\" && correctAnswer) {\r\n      setGrid((prevGrid) => {\r\n        const newGrid = prevGrid.map((row) => [...row]);\r\n        if (isRow) {\r\n          for (let col = colIndex + 1, i = 0; col <= colIndex + length && i < correctAnswer.length; col++, i++) {\r\n            newGrid[rowIndex][col] = correctAnswer[i];\r\n          }\r\n        } else {\r\n          for (let row = rowIndex + 1, i = 0; row <= rowIndex + length && i < correctAnswer.length; row++, i++) {\r\n            newGrid[row][colIndex] = correctAnswer[i];\r\n          }\r\n        }\r\n        return newGrid;\r\n      });\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   if (hintWordArray) {\r\n  //     hintWordArray.forEach((word, index) => {\r\n  //       console.log(`Word ${index}: '${word}' has length: ${word.length}`);\r\n  //       console.log([...word]);\r\n  //     });\r\n  //     const lengthArray = hintWordArray.map((word) => word.length);\r\n  //     setHintWordsLength(lengthArray);\r\n  //   }\r\n  // }, [hintWordArray]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const unsubscribePlayers = listenToObstacle(roomId, (obstacle) => {\r\n      // setCurrentQuestion(question)\r\n      // console.log(\"current question\", question)\r\n      const obstacleRevealed = {\r\n        \"question\": obstacle\r\n      }\r\n\r\n      setCurrentQuestion(obstacleRevealed)\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col].includes(\"number\")) {\r\n            revealCellsForPlayer(row, col, \"correct\", grid[row][col].replace(\"number\", \"\"), [])\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // No need to set state here; it's handled by useState initializer\r\n    return () => {\r\n      unsubscribePlayers();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const unsubscribePlayers = listenToQuestions(roomId, (question) => {\r\n      setCurrentQuestion(question)\r\n      console.log(\"current question\", question)\r\n\r\n    });\r\n\r\n    // No need to set state here; it's handled by useState initializer\r\n    return () => {\r\n      unsubscribePlayers();\r\n    };\r\n  }, []);\r\n  // Listen for \"open\" (select) signal\r\n  useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeSelect = listenToSelectRow(roomId, (data) => {\r\n\r\n      if (isInitialCall) {\r\n        isInitialCall = false;\r\n        return; // Skip the initial snapshot\r\n      }\r\n\r\n\r\n      let rowIndex = -1;\r\n      let colIndex = -1;\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col] === `number${data.selected_row_number}`) {\r\n            rowIndex = row;\r\n            colIndex = col;\r\n            break;\r\n          }\r\n        }\r\n        if (rowIndex !== -1) break;\r\n      }\r\n\r\n      if (rowIndex === -1 || colIndex === -1) {\r\n        console.warn(`Number cell number${data.selected_row_number} not found`);\r\n        return;\r\n      }\r\n\r\n      revealCellsForPlayer(rowIndex, colIndex, \"open\", data.selected_row_number, [], data.is_row, data.word_length);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeSelect();\r\n    };\r\n  }, [roomId, grid]);\r\n\r\n  // Listen for \"incorrect\" signal\r\n  useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeIncorrect = listenToIncorrectRow(roomId, (data) => {\r\n      if (isInitialCall) {\r\n        isInitialCall = false;\r\n        return; // Skip the initial snapshot\r\n      }\r\n\r\n      const audio = sounds['wrong_2'];\r\n      if (audio) {\r\n        audio.play();\r\n      }\r\n      let rowIndex = -1;\r\n      let colIndex = -1;\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col] === `number${data.selected_row_number}`) {\r\n            rowIndex = row;\r\n            colIndex = col;\r\n            break;\r\n          }\r\n        }\r\n        if (rowIndex !== -1) break;\r\n      }\r\n\r\n      if (rowIndex === -1 || colIndex === -1) {\r\n        console.warn(`Number cell number${data.selected_row_number} not found`);\r\n        return;\r\n      }\r\n\r\n      revealCellsForPlayer(rowIndex, colIndex, \"incorrect\", data.selected_row_number, [], data.is_row, data.word_length);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeIncorrect();\r\n    };\r\n  }, [roomId, grid]);\r\n\r\n  // Listen for \"correct\" signal\r\n  useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeCorrect = listenToCorrectRow(\r\n      roomId,\r\n      (data) => {\r\n        console.log(\"isInitialCall\", isInitialCall);\r\n\r\n        if (isInitialCall) {\r\n          isInitialCall = false;\r\n          return; // Skip the initial snapshot\r\n        }\r\n\r\n        const audio = sounds['correct_2'];\r\n        if (audio) {\r\n          audio.play();\r\n        }\r\n\r\n        console.log(\"isInitialCall after\", isInitialCall);\r\n        let rowIndex = -1;\r\n        let colIndex = -1;\r\n        console.log(\"grid\", grid);\r\n\r\n        for (let row = 0; row < grid.length; row++) {\r\n          for (let col = 0; col < grid[row].length; col++) {\r\n            if (grid[row][col] === `number${data.selected_row_number}`) {\r\n              rowIndex = row;\r\n              colIndex = col;\r\n              break;\r\n            }\r\n          }\r\n          if (rowIndex !== -1) break;\r\n        }\r\n\r\n        if (rowIndex === -1 || colIndex === -1) {\r\n          console.warn(`Number cell number${data.selected_row_number} not found`);\r\n          return;\r\n        }\r\n\r\n        revealCellsForPlayer(rowIndex, colIndex, \"correct\", data.selected_row_number, data.marked_character_index, data.is_row, undefined, data.correct_answer);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribeCorrect();\r\n    };\r\n  }, [roomId, grid]);\r\n\r\n\r\n  // Reveal cells in a row or column\r\n\r\n\r\n  // Handle number click to show menu\r\n  const handleNumberClick = (rowIndex: number, colIndex: number) => {\r\n    if (!isHost) return;\r\n    setMenu({\r\n      visible: true,\r\n      rowIndex,\r\n      colIndex,\r\n    });\r\n  };\r\n\r\n  // Handle menu actions\r\n  const handleMenuAction = (\r\n    action: \"open\" | \"correct\" | \"incorrect\",\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    hintWordNumber: string\r\n  ) => {\r\n    revealCells(rowIndex, colIndex, action, hintWordNumber);\r\n    setMenu({ visible: false });\r\n  };\r\n\r\n  // Handle cell click to reveal\r\n  const handleCellClick = (rowIndex: number, colIndex: number) => {\r\n    if (!isHost) return;\r\n    revealCells(rowIndex, colIndex, \"open\");\r\n  };\r\n\r\n  const handleOpenObstacle = async () => {\r\n    if (!isHost || !hintWords || !hintWordArray) return;\r\n\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid[row].length; col++) {\r\n        if (Number.isFinite(Number(grid[row][col]))) {\r\n          revealCells(row, col, \"correct\", grid[row][col])\r\n        }\r\n      }\r\n    }\r\n    if (obstacleWord) {\r\n\r\n      await openObstacle(roomId, obstacleWord)\r\n    }\r\n  }\r\n\r\n  // Close menu on outside click\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n        setMenu({ visible: false });\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center bg-slate-800/80 backdrop-blur-sm rounded-xl border border-blue-400/30 shadow-2xl p-6 mb-4 relative\">\r\n      <div className=\"text-white text-xl font-semibold text-center mb-4 max-w-[90%]\">\r\n        {typeof currentQuestion?.question === \"string\"\r\n          ? currentQuestion.question\r\n          : \"\"}\r\n      </div>\r\n      <div className=\"grid  [grid-template-columns:repeat(var(--cols),32px)] [grid-auto-rows:max-content]  gap-1 max-h-[750px] overflow-y-auto overflow-visible\"\r\n        style={{ '--cols': grid[0]?.length || 1 } as React.CSSProperties}\r\n      >\r\n\r\n        {(!grid || !Array.isArray(grid) || !grid.every(row => Array.isArray(row))) ?\r\n          <div className=\"text-white\">Invalid grid data</div>\r\n          :\r\n          grid.map((row, rowIndex) => (\r\n            <React.Fragment key={rowIndex}>\r\n              {row.map((cell, colIndex) => {\r\n\r\n                const cellKey = `${rowIndex}-${colIndex}`;\r\n                const cellStyle = cellStyles[cellKey] || {\r\n                  background: cell === \"\" || cell === \" \" ? \"transparent\" : \"bg-white\",\r\n                  textColor: cell.includes(\"number\") ? \"text-blue-400\" : \"text-transparent\",\r\n                };\r\n\r\n                const showMenu =\r\n                  menu.visible &&\r\n                  menu.rowIndex === rowIndex &&\r\n                  menu.colIndex === colIndex &&\r\n                  cell.includes(\"number\");\r\n\r\n                return (\r\n                  <div className=\"relative w-8 h-8 flex items-center justify-center overflow-visible\" key={colIndex}>\r\n                    <div\r\n                      className={`w-8 h-8 flex items-center justify-center text-lg font-semibold select-none rounded-lg overflow-visible   \r\n                  ${cell.includes(\"number\") ? \"text-blue-400 border-none\" : \"\"}\r\n                  ${cell.includes(\"number\") ? \"\" : cellStyle.background}\r\n                  ${cell.includes(\"number\") ? \"text-blue-400\" : cellStyle.textColor}\r\n                  ${obstacleWord?.includes(cell) &&\r\n                          cellStyle.textColor === \"text-black\" &&\r\n                          !cell.includes(\"number\") &&\r\n                          isNaN(Number(cell))\r\n                          ? \"font-bold text-red-400\"\r\n                          : \"\"}\r\n                `}\r\n                      onClick={() => {\r\n                        if (isHost) {\r\n                          if (cell.includes(\"number\")) {\r\n                            handleNumberClick(rowIndex, colIndex);\r\n                          } else {\r\n                            handleCellClick(rowIndex, colIndex);\r\n                          }\r\n                        }\r\n                      }}\r\n                      style={{\r\n                        cursor:\r\n                          isHost &&\r\n                            (cell.includes(\"number\") ||\r\n                              hintWords.some((word) => word.y === rowIndex || word.x === colIndex))\r\n                            ? \"pointer\"\r\n                            : \"default\",\r\n                      }}\r\n                    >\r\n\r\n                      {typeof cell === \"string\" || typeof cell === \"number\"\r\n                        ? (cell.includes(\"number\") ? cell.replace(\"number\", \"\") : cell)\r\n                        : \"\"}\r\n                    </div>\r\n\r\n                    {showMenu && (\r\n\r\n                      <div\r\n                        ref={menuRef}\r\n                        className=\"absolute left-12 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-slate-900 border border-blue-400/50 rounded shadow-lg p-1 z-10\"\r\n                      >\r\n                        <button\r\n                          className=\"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n                          onClick={() =>\r\n                            handleMenuAction(\"open\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                          }\r\n                        >\r\n                          SELECT\r\n                        </button>\r\n                        <button\r\n                          className=\"px-2 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600\"\r\n                          onClick={() =>\r\n                            handleMenuAction(\"correct\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                          }\r\n                        >\r\n                          Correct\r\n                        </button>\r\n                        <button\r\n                          className=\"px-2 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600\"\r\n                          onClick={() =>\r\n                            handleMenuAction(\"incorrect\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                          }\r\n                        >\r\n                          Incorrect\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n            </React.Fragment>\r\n          ))}\r\n      </div>\r\n      {\r\n        !isSpectator && (\r\n          <PlayerAnswerInput\r\n            isHost={isHost}\r\n            question={currentQuestion}\r\n          />\r\n        )\r\n      }\r\n\r\n      {\r\n        isHost && (\r\n          <div className=\"flex gap-2 mt-4 w-full\">\r\n            <button\r\n              onClick={() => {\r\n                alert('Mở cnv!')\r\n                handleOpenObstacle()\r\n              }}\r\n              className=\"bg-indigo-600 hover:bg-indigo-700 text-white p-2 flex-1 rounded-md whitespace-nowrap\"\r\n            >\r\n              Mở CNV\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                handleSuffleGrid()\r\n              }}\r\n              className=\"bg-indigo-600 hover:bg-indigo-700 text-white p-2 flex-1 rounded-md whitespace-nowrap\"\r\n            >\r\n              Xáo trộn hàng ngang\r\n            </button>\r\n          </div>\r\n        )\r\n      }\r\n\r\n      {showModal && buzzedPlayer && (\r\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n          <div className=\"bg-white rounded-lg p-6 w-80 shadow-lg\">\r\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-4 text-center\">\r\n              {`${buzzedPlayer} đã nhấn chuông trả lời`}\r\n            </h2>\r\n            <div className=\"flex justify-center\">\r\n              <button\r\n                onClick={handleCloseModal}\r\n                className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n              >\r\n                Đóng\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default QuestionBoxRound2;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}