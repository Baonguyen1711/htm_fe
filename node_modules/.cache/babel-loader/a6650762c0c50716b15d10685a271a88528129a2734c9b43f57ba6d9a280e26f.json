{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\components\\\\PlayerAnswer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { usePlayer } from '../context/playerContext';\nimport { listenToBroadcastedAnswer, listenToOpenBuzz } from '../services/firebaseServices';\nimport { useSearchParams } from 'react-router-dom';\nimport { buzzing } from './services';\nimport { closeBuzz } from './services';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PlayerAnswer = () => {\n  _s();\n  const {\n    playersArray,\n    playerFlashes,\n    setPlayerFlashes,\n    roomId,\n    triggerPlayerFlash,\n    scoreList,\n    setScoreList,\n    position,\n    currentPlayerName\n  } = usePlayer();\n  const [answerList, setAnswerList] = useState([]);\n  const spots = [1, 2, 3, 4];\n  const [searchParams] = useSearchParams();\n  const round = searchParams.get(\"round\") || \"1\";\n  const isInitialMount = useRef(true);\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false; // Skip the initial mount\n      return;\n    }\n\n    // Start timer when selectedTopic changes\n    startTimer(30);\n\n    // Side effects based on timer reaching 0\n  }, []);\n  useEffect(() => {\n    console.log(\"timeLeft\", timeLeft);\n    if (timeLeft === 0) {\n      // When timer runs out, do your clean up / game logic:\n      submitAnswer(roomId, playerAnswerRef.current, position);\n      // If you want to reset timer, call startTimer again here or leave stopped\n    }\n  }, [timeLeft]);\n  useEffect(() => {\n    console.log(\"timeLeft on play\", timeLeft);\n  }, [timeLeft]);\n  const [isButtonEnabled, setIsButtonEnabled] = useState(round === \"2\");\n  const handleKeyDown = event => {\n    if (event.key === \"Enter\") {\n      const inputElement = event.target; // Type assertion\n      console.log(\"inputElement.value\", inputElement.value);\n      playerAnswerRef.current = inputElement.value;\n      inputElement.value = \"\"; // Clears input field\n    }\n  };\n  const handleBuzz = async () => {\n    console.log(\"currentPlayerName\", currentPlayerName);\n    await buzzing(roomId, currentPlayerName, position);\n  };\n  useEffect(() => {\n    const unsubscribeBroadcastedAnswer = listenToBroadcastedAnswer(roomId, answerList => {\n      setAnswerList(answerList);\n      console.log(\"answerList\", answerList);\n    });\n    return () => {\n      unsubscribeBroadcastedAnswer();\n    };\n  }, [roomId]);\n  useEffect(() => {\n    const unsubscribeOpenBuzz = listenToOpenBuzz(roomId, buzz => {\n      console.log(\"buzz\", buzz);\n      if (round === \"4\" && buzz === \"open\") {\n        setIsButtonEnabled(true);\n        const timeoutId = setTimeout(() => {\n          setIsButtonEnabled(false);\n          closeBuzz(roomId);\n        }, 4000);\n        return () => {\n          clearTimeout(timeoutId);\n        };\n      }\n    });\n    return () => {\n      unsubscribeOpenBuzz();\n    };\n  }, [roomId, round]);\n  useEffect(() => {\n    if (playerFlashes && playerFlashes.length > 0 && playerFlashes.some(p => p.flashColor)) {\n      const timeoutId = setTimeout(() => {\n        setPlayerFlashes(prevFlashes => prevFlashes.map(player => ({\n          ...player,\n          flashColor: undefined\n        })));\n      }, 3000);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [playerFlashes, setPlayerFlashes]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        alert('buzzed');\n        handleBuzz();\n      },\n      className: `p-2 flex-1 rounded-md text-white ${isButtonEnabled ? 'bg-green-500' : 'bg-gray-500 cursor-not-allowed'}`,\n      disabled: !isButtonEnabled,\n      children: round === \"2\" ? \"Trả lời CNV\" : round === \"4\" ? \"Giành quyền trả lời\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-around mt-4\",\n      children: spots.map(spotNumber => {\n        const storedPlayers = localStorage.getItem(\"playerList\");\n        {\n          console.log(\"storedPlayers\", storedPlayers);\n        }\n        {\n          console.log(\"playersArray\", playersArray);\n        }\n        const array = playersArray !== null ? playersArray : storedPlayers ? JSON.parse(storedPlayers) : [];\n        {\n          console.log(\"array\", array);\n        }\n        const player = array.find(p => parseInt(p.stt) === spotNumber);\n        const answer = Array.isArray(answerList) && answerList.length !== 0 ? answerList.find(answer => parseInt(answer.stt) === spotNumber) : null;\n        console.log(\"answer in spot\", answer);\n        if (player) {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-2 w-full\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"w-full h-14 border border-gray-300 rounded-lg px-4 text-lg text-center\",\n                placeholder: \"Type your answer...\",\n                onKeyDown: handleKeyDown\n                // value={playerAnswer} \n                // onChange={(e) => setPlayerAnswer(e.target.value)}\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"mt-2 text-lg\",\n                children: playerAnswerRef.current && `Your answer: ${playerAnswerRef.current}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `flex flex-col items-center \n                                ${playerFlashes[spotNumber - 1] ? playerFlashes[spotNumber - 1].flashColor : \"\"}`,\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: player.avatar,\n                alt: \"Player\",\n                className: \"w-16 h-16 rounded-full\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-white mt-2\",\n                children: answer && answer.answer\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-white\",\n                children: `player_${player.stt}: ${player.userName}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 37\n              }, this)]\n            }, spotNumber, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(PlayerAnswer, \"VCUN/qNZjTQoRNwxnDcab3cVCCc=\", false, function () {\n  return [usePlayer, useSearchParams];\n});\n_c = PlayerAnswer;\nexport default PlayerAnswer;\nvar _c;\n$RefreshReg$(_c, \"PlayerAnswer\");","map":{"version":3,"names":["React","useEffect","useState","usePlayer","listenToBroadcastedAnswer","listenToOpenBuzz","useSearchParams","buzzing","closeBuzz","jsxDEV","_jsxDEV","Fragment","_Fragment","PlayerAnswer","_s","playersArray","playerFlashes","setPlayerFlashes","roomId","triggerPlayerFlash","scoreList","setScoreList","position","currentPlayerName","answerList","setAnswerList","spots","searchParams","round","get","isInitialMount","useRef","current","startTimer","console","log","timeLeft","submitAnswer","playerAnswerRef","isButtonEnabled","setIsButtonEnabled","handleKeyDown","event","key","inputElement","target","value","handleBuzz","unsubscribeBroadcastedAnswer","unsubscribeOpenBuzz","buzz","timeoutId","setTimeout","clearTimeout","length","some","p","flashColor","prevFlashes","map","player","undefined","children","onClick","alert","className","disabled","fileName","_jsxFileName","lineNumber","columnNumber","spotNumber","storedPlayers","localStorage","getItem","array","JSON","parse","find","parseInt","stt","answer","Array","isArray","type","placeholder","onKeyDown","src","avatar","alt","userName","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/components/PlayerAnswer.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { usePlayer } from '../context/playerContext';\r\nimport { User, Answer, Score } from '../type';\r\nimport { listenToBroadcastedAnswer, listenToOpenBuzz } from '../services/firebaseServices';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { buzzing } from './services';\r\nimport { closeBuzz } from './services';\r\n\r\nconst PlayerAnswer: React.FC = () => {\r\n    const { playersArray, playerFlashes, setPlayerFlashes, roomId, triggerPlayerFlash, scoreList, setScoreList, position, currentPlayerName } = usePlayer()\r\n    const [answerList, setAnswerList] = useState<Answer[]>([])\r\n    const spots = [1, 2, 3, 4]\r\n    const [searchParams] = useSearchParams()\r\n    const round = searchParams.get(\"round\") || \"1\"\r\n\r\n    const isInitialMount = useRef(true);\r\n    useEffect(() => {\r\n        if (isInitialMount.current) {\r\n            isInitialMount.current = false; // Skip the initial mount\r\n            return;\r\n        }\r\n\r\n        // Start timer when selectedTopic changes\r\n        startTimer(30);\r\n\r\n        // Side effects based on timer reaching 0\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log(\"timeLeft\", timeLeft);\r\n\r\n        if (timeLeft === 0) {\r\n            // When timer runs out, do your clean up / game logic:\r\n            submitAnswer(roomId, playerAnswerRef.current, position)\r\n            // If you want to reset timer, call startTimer again here or leave stopped\r\n        }\r\n    }, [timeLeft]);\r\n    useEffect(() => {\r\n        console.log(\"timeLeft on play\", timeLeft)\r\n    }, [timeLeft]);\r\n \r\n    const [isButtonEnabled, setIsButtonEnabled] = useState(round === \"2\")\r\n        const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === \"Enter\") {\r\n            const inputElement = event.target as HTMLInputElement; // Type assertion\r\n            console.log(\"inputElement.value\", inputElement.value)\r\n            playerAnswerRef.current = inputElement.value\r\n            inputElement.value = \"\"; // Clears input field\r\n        }\r\n    };\r\n\r\n    const handleBuzz = async () => {\r\n        console.log(\"currentPlayerName\",currentPlayerName);\r\n        \r\n        await buzzing(roomId, currentPlayerName, position)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const unsubscribeBroadcastedAnswer = listenToBroadcastedAnswer(roomId, (answerList) => {\r\n            setAnswerList(answerList)\r\n            console.log(\"answerList\", answerList)\r\n        })\r\n\r\n        return () => {\r\n            unsubscribeBroadcastedAnswer();\r\n        };\r\n    }, [roomId]);\r\n\r\n    useEffect(() => {\r\n        const unsubscribeOpenBuzz = listenToOpenBuzz(roomId, (buzz) => {\r\n            console.log(\"buzz\", buzz);\r\n            \r\n            if (round === \"4\" && buzz===\"open\") {\r\n                setIsButtonEnabled(true)\r\n                const timeoutId = setTimeout(() => {\r\n                    setIsButtonEnabled(false)\r\n                    closeBuzz(roomId)\r\n                }, 4000)\r\n                return () => {\r\n                    \r\n                    clearTimeout(timeoutId)\r\n                }\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            unsubscribeOpenBuzz();\r\n        };\r\n    }, [roomId, round]);\r\n\r\n    useEffect(() => {\r\n        if (playerFlashes && playerFlashes.length > 0 && playerFlashes.some((p: Score) => p.flashColor)) {\r\n            const timeoutId = setTimeout(() => {\r\n                setPlayerFlashes((prevFlashes: Score[]) =>\r\n                    prevFlashes.map((player) => ({ ...player, flashColor: undefined }))\r\n                );\r\n            }, 3000);\r\n\r\n            return () => clearTimeout(timeoutId);\r\n        }\r\n    }, [playerFlashes, setPlayerFlashes]);\r\n\r\n    return (\r\n        <>\r\n            <button\r\n                onClick={() => {\r\n                    alert('buzzed')\r\n                    handleBuzz()\r\n                }}\r\n                className={`p-2 flex-1 rounded-md text-white ${\r\n                    isButtonEnabled ? 'bg-green-500' : 'bg-gray-500 cursor-not-allowed'\r\n                }`}\r\n                disabled={!isButtonEnabled}\r\n            >\r\n                {round === \"2\" ? \"Trả lời CNV\" : round === \"4\" ? \"Giành quyền trả lời\" : \"\"}\r\n            </button>\r\n            <div className=\"flex justify-around mt-4\">\r\n                {\r\n                    spots.map((spotNumber: number) => {\r\n                        const storedPlayers = localStorage.getItem(\"playerList\");\r\n                        { console.log(\"storedPlayers\", storedPlayers) }\r\n                        { console.log(\"playersArray\", playersArray) }\r\n                        const array = playersArray !== null\r\n                            ? playersArray\r\n                            : (storedPlayers ? JSON.parse(storedPlayers) : []);\r\n                        { console.log(\"array\", array) }\r\n                        const player = array.find((p: User) => parseInt(p.stt) === spotNumber);\r\n\r\n                        const answer = Array.isArray(answerList) && answerList.length !== 0 \r\n                            ? answerList.find((answer: Answer) => parseInt(answer.stt) === spotNumber) \r\n                            : null\r\n                        console.log(\"answer in spot\", answer);\r\n                        \r\n                        if (player) {\r\n                            return (\r\n                                <>\r\n                                <div className=\"mt-2 w-full\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"w-full h-14 border border-gray-300 rounded-lg px-4 text-lg text-center\"\r\n                                placeholder=\"Type your answer...\"\r\n                                onKeyDown={handleKeyDown}\r\n                            // value={playerAnswer} \r\n                            // onChange={(e) => setPlayerAnswer(e.target.value)}\r\n                            />\r\n                            <p className=\"mt-2 text-lg\">{playerAnswerRef.current && `Your answer: ${playerAnswerRef.current}`}</p>\r\n                        </div>\r\n\r\n                                <div key={spotNumber} className={`flex flex-col items-center \r\n                                ${playerFlashes[spotNumber - 1] ? playerFlashes[spotNumber - 1].flashColor : \"\"}`}>\r\n                                    <img\r\n                                        src={player.avatar}\r\n                                        alt=\"Player\"\r\n                                        className=\"w-16 h-16 rounded-full\"\r\n                                    />\r\n                                    <p className=\"text-white mt-2\">\r\n                                        {answer && answer.answer}\r\n                                    </p>\r\n                                    <p className=\"text-white\">{`player_${player.stt}: ${player.userName}`}</p>\r\n                                </div>\r\n                                </>\r\n                        \r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PlayerAnswer"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,0BAA0B;AAEpD,SAASC,yBAAyB,EAAEC,gBAAgB,QAAQ,8BAA8B;AAC1F,SAASC,eAAe,QAAQ,kBAAkB;AAClD,SAASC,OAAO,QAAQ,YAAY;AACpC,SAASC,SAAS,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEvC,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM;IAAEC,YAAY;IAAEC,aAAa;IAAEC,gBAAgB;IAAEC,MAAM;IAAEC,kBAAkB;IAAEC,SAAS;IAAEC,YAAY;IAAEC,QAAQ;IAAEC;EAAkB,CAAC,GAAGpB,SAAS,CAAC,CAAC;EACvJ,MAAM,CAACqB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAW,EAAE,CAAC;EAC1D,MAAMwB,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC1B,MAAM,CAACC,YAAY,CAAC,GAAGrB,eAAe,CAAC,CAAC;EACxC,MAAMsB,KAAK,GAAGD,YAAY,CAACE,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG;EAE9C,MAAMC,cAAc,GAAGC,MAAM,CAAC,IAAI,CAAC;EACnC9B,SAAS,CAAC,MAAM;IACZ,IAAI6B,cAAc,CAACE,OAAO,EAAE;MACxBF,cAAc,CAACE,OAAO,GAAG,KAAK,CAAC,CAAC;MAChC;IACJ;;IAEA;IACAC,UAAU,CAAC,EAAE,CAAC;;IAEd;EACJ,CAAC,EAAE,EAAE,CAAC;EAENhC,SAAS,CAAC,MAAM;IACZiC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEC,QAAQ,CAAC;IAEjC,IAAIA,QAAQ,KAAK,CAAC,EAAE;MAChB;MACAC,YAAY,CAACnB,MAAM,EAAEoB,eAAe,CAACN,OAAO,EAAEV,QAAQ,CAAC;MACvD;IACJ;EACJ,CAAC,EAAE,CAACc,QAAQ,CAAC,CAAC;EACdnC,SAAS,CAAC,MAAM;IACZiC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,QAAQ,CAAC;EAC7C,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAGtC,QAAQ,CAAC0B,KAAK,KAAK,GAAG,CAAC;EACjE,MAAMa,aAAa,GAAIC,KAA4C,IAAK;IACxE,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,EAAE;MACvB,MAAMC,YAAY,GAAGF,KAAK,CAACG,MAA0B,CAAC,CAAC;MACvDX,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAES,YAAY,CAACE,KAAK,CAAC;MACrDR,eAAe,CAACN,OAAO,GAAGY,YAAY,CAACE,KAAK;MAC5CF,YAAY,CAACE,KAAK,GAAG,EAAE,CAAC,CAAC;IAC7B;EACJ,CAAC;EAED,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3Bb,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAACZ,iBAAiB,CAAC;IAElD,MAAMhB,OAAO,CAACW,MAAM,EAAEK,iBAAiB,EAAED,QAAQ,CAAC;EACtD,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACZ,MAAM+C,4BAA4B,GAAG5C,yBAAyB,CAACc,MAAM,EAAGM,UAAU,IAAK;MACnFC,aAAa,CAACD,UAAU,CAAC;MACzBU,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEX,UAAU,CAAC;IACzC,CAAC,CAAC;IAEF,OAAO,MAAM;MACTwB,4BAA4B,CAAC,CAAC;IAClC,CAAC;EACL,CAAC,EAAE,CAAC9B,MAAM,CAAC,CAAC;EAEZjB,SAAS,CAAC,MAAM;IACZ,MAAMgD,mBAAmB,GAAG5C,gBAAgB,CAACa,MAAM,EAAGgC,IAAI,IAAK;MAC3DhB,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEe,IAAI,CAAC;MAEzB,IAAItB,KAAK,KAAK,GAAG,IAAIsB,IAAI,KAAG,MAAM,EAAE;QAChCV,kBAAkB,CAAC,IAAI,CAAC;QACxB,MAAMW,SAAS,GAAGC,UAAU,CAAC,MAAM;UAC/BZ,kBAAkB,CAAC,KAAK,CAAC;UACzBhC,SAAS,CAACU,MAAM,CAAC;QACrB,CAAC,EAAE,IAAI,CAAC;QACR,OAAO,MAAM;UAETmC,YAAY,CAACF,SAAS,CAAC;QAC3B,CAAC;MACL;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACTF,mBAAmB,CAAC,CAAC;IACzB,CAAC;EACL,CAAC,EAAE,CAAC/B,MAAM,EAAEU,KAAK,CAAC,CAAC;EAEnB3B,SAAS,CAAC,MAAM;IACZ,IAAIe,aAAa,IAAIA,aAAa,CAACsC,MAAM,GAAG,CAAC,IAAItC,aAAa,CAACuC,IAAI,CAAEC,CAAQ,IAAKA,CAAC,CAACC,UAAU,CAAC,EAAE;MAC7F,MAAMN,SAAS,GAAGC,UAAU,CAAC,MAAM;QAC/BnC,gBAAgB,CAAEyC,WAAoB,IAClCA,WAAW,CAACC,GAAG,CAAEC,MAAM,KAAM;UAAE,GAAGA,MAAM;UAAEH,UAAU,EAAEI;QAAU,CAAC,CAAC,CACtE,CAAC;MACL,CAAC,EAAE,IAAI,CAAC;MAER,OAAO,MAAMR,YAAY,CAACF,SAAS,CAAC;IACxC;EACJ,CAAC,EAAE,CAACnC,aAAa,EAAEC,gBAAgB,CAAC,CAAC;EAErC,oBACIP,OAAA,CAAAE,SAAA;IAAAkD,QAAA,gBACIpD,OAAA;MACIqD,OAAO,EAAEA,CAAA,KAAM;QACXC,KAAK,CAAC,QAAQ,CAAC;QACfjB,UAAU,CAAC,CAAC;MAChB,CAAE;MACFkB,SAAS,EAAE,oCACP1B,eAAe,GAAG,cAAc,GAAG,gCAAgC,EACpE;MACH2B,QAAQ,EAAE,CAAC3B,eAAgB;MAAAuB,QAAA,EAE1BlC,KAAK,KAAK,GAAG,GAAG,aAAa,GAAGA,KAAK,KAAK,GAAG,GAAG,qBAAqB,GAAG;IAAE;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvE,CAAC,eACT5D,OAAA;MAAKuD,SAAS,EAAC,0BAA0B;MAAAH,QAAA,EAEjCpC,KAAK,CAACiC,GAAG,CAAEY,UAAkB,IAAK;QAC9B,MAAMC,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;QACxD;UAAExC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEqC,aAAa,CAAC;QAAC;QAC9C;UAAEtC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEpB,YAAY,CAAC;QAAC;QAC5C,MAAM4D,KAAK,GAAG5D,YAAY,KAAK,IAAI,GAC7BA,YAAY,GACXyD,aAAa,GAAGI,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC,GAAG,EAAG;QACtD;UAAEtC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEwC,KAAK,CAAC;QAAC;QAC9B,MAAMf,MAAM,GAAGe,KAAK,CAACG,IAAI,CAAEtB,CAAO,IAAKuB,QAAQ,CAACvB,CAAC,CAACwB,GAAG,CAAC,KAAKT,UAAU,CAAC;QAEtE,MAAMU,MAAM,GAAGC,KAAK,CAACC,OAAO,CAAC3D,UAAU,CAAC,IAAIA,UAAU,CAAC8B,MAAM,KAAK,CAAC,GAC7D9B,UAAU,CAACsD,IAAI,CAAEG,MAAc,IAAKF,QAAQ,CAACE,MAAM,CAACD,GAAG,CAAC,KAAKT,UAAU,CAAC,GACxE,IAAI;QACVrC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE8C,MAAM,CAAC;QAErC,IAAIrB,MAAM,EAAE;UACR,oBACIlD,OAAA,CAAAE,SAAA;YAAAkD,QAAA,gBACApD,OAAA;cAAKuD,SAAS,EAAC,aAAa;cAAAH,QAAA,gBAChCpD,OAAA;gBACI0E,IAAI,EAAC,MAAM;gBACXnB,SAAS,EAAC,wEAAwE;gBAClFoB,WAAW,EAAC,qBAAqB;gBACjCC,SAAS,EAAE7C;gBACf;gBACA;cAAA;gBAAA0B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC,eACF5D,OAAA;gBAAGuD,SAAS,EAAC,cAAc;gBAAAH,QAAA,EAAExB,eAAe,CAACN,OAAO,IAAI,gBAAgBM,eAAe,CAACN,OAAO;cAAE;gBAAAmC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrG,CAAC,eAEE5D,OAAA;cAAsBuD,SAAS,EAAE;AACjE,kCAAkCjD,aAAa,CAACuD,UAAU,GAAG,CAAC,CAAC,GAAGvD,aAAa,CAACuD,UAAU,GAAG,CAAC,CAAC,CAACd,UAAU,GAAG,EAAE,EAAG;cAAAK,QAAA,gBAC9EpD,OAAA;gBACI6E,GAAG,EAAE3B,MAAM,CAAC4B,MAAO;gBACnBC,GAAG,EAAC,QAAQ;gBACZxB,SAAS,EAAC;cAAwB;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACrC,CAAC,eACF5D,OAAA;gBAAGuD,SAAS,EAAC,iBAAiB;gBAAAH,QAAA,EACzBmB,MAAM,IAAIA,MAAM,CAACA;cAAM;gBAAAd,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACzB,CAAC,eACJ5D,OAAA;gBAAGuD,SAAS,EAAC,YAAY;gBAAAH,QAAA,EAAE,UAAUF,MAAM,CAACoB,GAAG,KAAKpB,MAAM,CAAC8B,QAAQ;cAAE;gBAAAvB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA,GAVpEC,UAAU;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAWf,CAAC;UAAA,eACJ,CAAC;QAGX;MACJ,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEL,CAAC;EAAA,eACR,CAAC;AAEX,CAAC;AAAAxD,EAAA,CAjKKD,YAAsB;EAAA,QACoHV,SAAS,EAG9HG,eAAe;AAAA;AAAAqF,EAAA,GAJpC9E,YAAsB;AAmK5B,eAAeA,YAAY;AAAA,IAAA8E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}