{"ast":null,"code":"import axios from \"axios\";\nexport const sendAnswerToPlayer = async roomId => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/test/broadcast?room_id=${roomId}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const updateScore = async (roomId, scoreList, mode, round, stt, isCorrect, round_4_mode, difficulty, is_take_turn_correct, stt_take_turn, stt_taken) => {\n  try {\n    console.log(\"scoreList before sending\", scoreList);\n    const params = new URLSearchParams({\n      room_id: roomId,\n      mode,\n      round\n    });\n    if (stt) params.append(\"stt\", stt);\n    if (isCorrect) params.append(\"is_correct\", isCorrect);\n    if (round_4_mode) params.append(\"round_4_mode\", round_4_mode);\n    if (difficulty) params.append(\"difficulty\", difficulty);\n    if (is_take_turn_correct) params.append(\"is_take_turn_correct\", is_take_turn_correct);\n    if (stt_take_turn) params.append(\"stt_take_turn\", stt_take_turn);\n    if (stt_taken) params.append(\"stt_taken\", stt_taken);\n    const url = `http://localhost:8000/api/test/score?${params.toString()}`;\n    console.log();\n    const response = await axios.post(url, mode !== \"manual\" ? [] : scoreList, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const startTime = async roomId => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/test/time?room_id=${roomId}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const resetBuzz = async roomId => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/buzz/reset?room_id=${roomId}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};","map":{"version":3,"names":["axios","sendAnswerToPlayer","roomId","response","post","headers","withCredentials","status","Error","data","error","console","updateScore","scoreList","mode","round","stt","isCorrect","round_4_mode","difficulty","is_take_turn_correct","stt_take_turn","stt_taken","log","params","URLSearchParams","room_id","append","url","toString","startTime","resetBuzz"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/service.ts"],"sourcesContent":["import { Question, Score } from \"../../../type\";\r\nimport { getAxiosAuthContext } from \"../../../context/authContext\";\r\nimport axios from \"axios\";\r\n\r\nexport const sendAnswerToPlayer = async (roomId: string): Promise<any> => {\r\n  try {\r\n\r\n    const response = await axios.post(`http://localhost:8000/api/test/broadcast?room_id=${roomId}`, {}, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      withCredentials: true\r\n    });\r\n\r\n    if (response.status !== 200) {\r\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    return response.data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n\r\nexport const updateScore = async (roomId: string, scoreList: Score[], mode: string, round: string, stt?: string, isCorrect?: string,\r\n  round_4_mode?: \"main\" | \"nshv\" | \"take_turn\",\r\n  difficulty?: string,\r\n  is_take_turn_correct?: string,\r\n  stt_take_turn?: string,\r\n  stt_taken?: string): Promise<any> => {\r\n  try {\r\n    console.log(\"scoreList before sending\", scoreList);\r\n    const params = new URLSearchParams({\r\n      room_id: roomId,\r\n      mode,\r\n      round\r\n    });\r\n\r\n\r\n    if (stt) params.append(\"stt\", stt);\r\n    if (isCorrect) params.append(\"is_correct\", isCorrect);\r\n    if (round_4_mode) params.append(\"round_4_mode\", round_4_mode);\r\n    if (difficulty) params.append(\"difficulty\", difficulty);\r\n    if (is_take_turn_correct) params.append(\"is_take_turn_correct\", is_take_turn_correct);\r\n    if (stt_take_turn) params.append(\"stt_take_turn\", stt_take_turn);\r\n    if (stt_taken) params.append(\"stt_taken\", stt_taken);\r\n\r\n    const url = `http://localhost:8000/api/test/score?${params.toString()}`;\r\n\r\n    console.log();\r\n    \r\n\r\n    const response = await axios.post(url,\r\n      mode !== \"manual\" ? [] : scoreList\r\n      , {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        withCredentials: true\r\n      });\r\n\r\n    if (response.status !== 200) {\r\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    return response.data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n\r\nexport const startTime = async (roomId: string): Promise<any> => {\r\n  try {\r\n    const response = await axios.post(`http://localhost:8000/api/test/time?room_id=${roomId}`, {}, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      withCredentials: true\r\n    });\r\n\r\n    if (response.status !== 200) {\r\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    return response.data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n\r\nexport const resetBuzz = async (roomId: string) => {\r\n  try {\r\n    const response = await axios.post(`http://localhost:8000/api/buzz/reset?room_id=${roomId}`,\r\n      {\r\n\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        withCredentials: true,\r\n      });\r\n\r\n    if (response.status !== 200) {\r\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    return response.data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}