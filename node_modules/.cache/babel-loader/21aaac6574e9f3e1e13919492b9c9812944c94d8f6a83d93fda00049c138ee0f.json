{"ast":null,"code":"// T·∫°o t·ª´ kh√≥a g·ª£i √Ω v·ªõi v·ªã tr√≠ v√† h∆∞·ªõng random\n\nexport const findCommonLetterIndexes = (word1, word2) => {\n  const result = [];\n  for (let i = 0; i < word1.length; i++) {\n    for (let j = 0; j < word2.length; j++) {\n      if (word1[i] === word2[j]) {\n        result.push({\n          [word1]: i,\n          [word2]: j\n        });\n      }\n    }\n  }\n  return result;\n};\nexport const findCommonLetterPairs = (wordList, gridSize) => {\n  const REQUIRE_PAIRS = Math.floor(Math.random() * 2) + 1;\n  console.log(\"REQUIRE_PAIRS\", REQUIRE_PAIRS);\n  const tempWordList = [...wordList];\n  const commonPairs = [];\n  const placedWords = new Set();\n  const wordsCoordinate = [];\n  let found = false;\n  let pairs = 0;\n  let direction = \"horizontal\";\n  let nextPosition = {\n    x: 0,\n    y: 0\n  };\n  if (REQUIRE_PAIRS == 2) {\n    while (pairs < REQUIRE_PAIRS && !found) {\n      for (let i = 0; i < tempWordList.length; i++) {\n        if (pairs == REQUIRE_PAIRS || found == true) break;\n        const word1 = tempWordList[i];\n        if (placedWords.has(word1)) continue;\n        for (let j = 0; j < tempWordList.length; j++) {\n          if (tempWordList[j] === word1) continue;\n          if (placedWords.has(tempWordList[j])) continue;\n          const result = findCommonLetterIndexes(word1, tempWordList[j]);\n          if (result.length > 0) {\n            console.log(\"result\", result);\n            const index = Math.floor(Math.random() * result.length);\n            console.log(\"index\", index);\n            commonPairs.push(result[index]);\n            console.log(\"pairs\", pairs);\n            placedWords.add(word1);\n            placedWords.add(tempWordList[j]);\n            pairs = pairs + 1;\n            break;\n          }\n          if (i == tempWordList.length - 1 && j == tempWordList.length - 1) {\n            found = true;\n            break;\n          }\n        }\n      }\n    }\n  }\n  if (REQUIRE_PAIRS == 1) {\n    while (!found) {\n      for (let i = 0; i < tempWordList.length; i++) {\n        if (found == true) break;\n        const word1 = tempWordList[i];\n        if (placedWords.has(word1)) continue;\n        for (let j = 0; j < tempWordList.length; j++) {\n          if (tempWordList[j] === word1) continue;\n          const result = findCommonLetterIndexes(word1, tempWordList[j]);\n          if (result.length > 0) {\n            console.log(\"result\", result);\n            const index = Math.floor(Math.random() * result.length);\n            console.log(\"index\", index);\n            commonPairs.push(result[index]);\n            console.log(\"pairs\", pairs);\n            placedWords.add(word1);\n            placedWords.add(tempWordList[j]);\n          }\n          if (commonPairs.length == 2) {\n            found = true;\n            break;\n          }\n          if (i == tempWordList.length - 1 && j == tempWordList.length - 1) {\n            found = true;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  //loop until 2 pairs are found or go through all the array\n\n  // for (let pairs of commonPairs){\n  //     const keys = Object.keys(pairs);\n  //     const word1Coordinate: PlacedWord = {\n  //         word: keys[0],\n  //         x: pairs[keys[1]] + 1,\n  //         y: 1,\n  //         direction: \"horizontal\"\n  //     }\n\n  //     const word2Coordinate: PlacedWord = {\n  //         word: keys[1],\n  //         x: 1,\n  //         y: pairs[keys[0]] + 1,\n  //         direction: \"vertical\"\n  //     }\n\n  //     placedWords.add(word1Coordinate)\n  //     placedWords.add(word2Coordinate)\n\n  // }\n\n  return commonPairs;\n};\nexport const generateHintWords = (words, gridSize, obstacleWord) => {\n  const grid = Array(gridSize).fill(null).map(() => Array(gridSize).fill(\"\")); // M·∫£ng ki·ªÉm tra v·ªã tr√≠\n\n  const findCommonLetterPairs = words => {\n    let results = [];\n    let usedWords = new Set(); // L∆∞u l·∫°i c√°c t·ª´ ƒë√£ d√πng\n\n    let remainingPairs = [];\n    for (let i = 0; i < words.length; i++) {\n      for (let j = i + 1; j < words.length; j++) {\n        const word1 = words[i];\n        const word2 = words[j];\n\n        // T√¨m k√Ω t·ª± chung gi·ªØa 2 t·ª´\n        const commonLetters = [...new Set(word1)].filter(letter => word2.includes(letter));\n        if (commonLetters.length >= 2) {\n          // T√≠nh ƒëi·ªÉm ∆∞u ti√™n (ch·ªØ g·∫ßn trung t√¢m h∆°n)\n          const scoredLetters = commonLetters.map(letter => {\n            const index1 = word1.indexOf(letter);\n            const index2 = word2.indexOf(letter);\n            const center1 = word1.length / 2;\n            const center2 = word2.length / 2;\n            const score = Math.abs(index1 - center1) + Math.abs(index2 - center2);\n            return {\n              letter,\n              score\n            };\n          });\n\n          // S·∫Øp x·∫øp theo ƒëi·ªÉm ∆∞u ti√™n\n          scoredLetters.sort((a, b) => a.score - b.score);\n          const prioritizedLetters = scoredLetters.map(item => item.letter);\n          remainingPairs.push({\n            word1,\n            word2,\n            commonLetters: prioritizedLetters\n          });\n        }\n      }\n    }\n\n    // B∆∞·ªõc 2: Ch·ªçn t·ªëi ƒëa 2 c·∫∑p theo quy t·∫Øc\n    for (const pair of remainingPairs) {\n      if (results.length >= 2) break; // ƒê·ªß 2 c·∫∑p th√¨ d·ª´ng\n      if (!usedWords.has(pair.word1) && !usedWords.has(pair.word2)) {\n        results.push(pair);\n        usedWords.add(pair.word1);\n        usedWords.add(pair.word2);\n      }\n    }\n\n    // N·∫øu v·∫´n ch∆∞a ƒë·ªß 2 c·∫∑p, ch·ªçn ti·∫øp t·ª´ c√°c c·∫∑p c√≥ t·ª´ ƒë√£ d√πng\n    for (const pair of remainingPairs) {\n      if (results.length >= 2) break;\n      if (!usedWords.has(pair.word1) || !usedWords.has(pair.word2)) {\n        results.push(pair);\n        usedWords.add(pair.word1);\n        usedWords.add(pair.word2);\n      }\n    }\n    return results;\n  };\n\n  // üõ† Test\n  //const testwords = [\"B∆ØUCH√çNH\", \"5G\", \"BQP\", \"T·∫¨PƒêO√ÄN\", \"H√ÄN·ªòI\", \"RED\"];\n\n  const shuffledWords = [...words].sort(() => Math.random() - 0.5);\n  const placeWordsOnGrid = (words, gridSize) => {\n    while (true) {\n      let placedWords = [];\n      let occupiedPositions = new Set();\n      let placedSet = new Set(); // Set ƒë·ªÉ theo d√µi t·ª´ ƒë√£ ƒë·∫∑t\n      let allPlaced = true; // C·ªù ki·ªÉm tra xem t·∫•t c·∫£ t·ª´ c√≥ ƒë∆∞·ª£c ƒë·∫∑t hay kh√¥ng\n\n      const getKey = (x, y) => `${x},${y}`;\n      const canPlaceWord = (word, x, y, direction, index) => {\n        for (let i = 0; i < word.length; i++) {\n          if (i === x + index) continue;\n          let newX = direction === \"horizontal\" ? x + i : x;\n          let newY = direction === \"horizontal\" ? y : y + i;\n          if (newX < 0 || newY < 0 || newX >= gridSize || newY >= gridSize || occupiedPositions.has(getKey(newX, newY))) {\n            return false;\n          }\n        }\n        return true;\n      };\n      const commonLetterPairs = findCommonLetterPairs(words);\n      console.log(commonLetterPairs);\n      for (const {\n        word1,\n        word2,\n        commonLetters\n      } of commonLetterPairs) {\n        if (placedSet.has(word1) || placedSet.has(word2)) continue; // Ki·ªÉm tra n·∫øu ƒë√£ ƒë·∫∑t th√¨ b·ªè qua\n\n        const commonLetter = commonLetters[0];\n        const index1 = word1.indexOf(commonLetter);\n        const index2 = word2.indexOf(commonLetter);\n        let placed = false;\n        for (let attempt = 0; attempt < 100; attempt++) {\n          let x = Math.floor(Math.random() * (gridSize - word1.length)) + 1;\n          let y = Math.floor(Math.random() * (gridSize - index2) + index2) + 1;\n          if (canPlaceWord(word1, x, y, \"horizontal\", index1)) {\n            placedWords.push({\n              word: word1,\n              x,\n              y,\n              direction: \"horizontal\"\n            });\n            placedSet.add(word1);\n            let intersecrX = x + index1;\n            let intersectY = y;\n            if (canPlaceWord(word2, intersecrX, intersectY - index2, \"vertical\", index2)) {\n              for (let i = 0; i < word1.length; i++) occupiedPositions.add(getKey(x + i, y));\n              placedWords.push({\n                word: word2,\n                x: intersecrX,\n                y: intersectY - index2,\n                direction: \"vertical\"\n              });\n              placedSet.add(word2);\n              for (let i = 0; i < word2.length; i++) occupiedPositions.add(getKey(intersecrX, intersectY - index2 + i));\n              placed = true;\n              break;\n            } else {\n              placedWords.pop();\n            }\n          }\n        }\n        if (!placed) {\n          console.warn(`Kh√¥ng th·ªÉ ƒë·∫∑t c·∫∑p t·ª´: ${word1} - ${word2}`);\n          allPlaced = false;\n          break;\n        }\n      }\n      for (const word of words) {\n        if (placedSet.has(word)) continue;\n        let placed = false;\n        let found = false;\n        for (let j = placedWords.length - 1; j >= 0; j--) {\n          for (let attempt = 0; attempt < 10; attempt++) {\n            let direction = placedWords[j].direction === \"horizontal\" ? \"vertical\" : \"horizontal\";\n            const shift = Math.random() < 0.5 ? 1 : -1;\n            let x = placedWords[j].direction === \"horizontal\" ? placedWords[j].word.length + placedWords[j].x : placedWords[j].x + 1;\n            let y = placedWords[j].direction === \"horizontal\" ? placedWords[j].y + 2 : placedWords[j].word.length + placedWords[j].y;\n            if (canPlaceWord(word, x, y, direction, 0)) {\n              placedWords.push({\n                word,\n                x,\n                y,\n                direction\n              });\n              placedSet.add(word);\n              for (let i = 0; i < word.length; i++) {\n                let newX = direction === \"horizontal\" ? x + i : x;\n                let newY = direction === \"horizontal\" ? y : y + i;\n                occupiedPositions.add(getKey(newX, newY));\n              }\n              placed = true;\n              found = true;\n              break;\n            }\n          }\n          if (found) break;\n        }\n        if (!placed) {\n          console.warn(`Kh√¥ng th·ªÉ ƒë·∫∑t t·ª´: ${word}`);\n          allPlaced = false;\n          break;\n        }\n      }\n      if (!allPlaced) continue; // N·∫øu c√≥ t·ª´ kh√¥ng ƒë·∫∑t ƒë∆∞·ª£c, restart v√≤ng l·∫∑p\n\n      if (allPlaced) return placedWords; // N·∫øu t·∫•t c·∫£ t·ª´ ƒë·ªÅu ƒë∆∞·ª£c ƒë·∫∑t, tho√°t kh·ªèi v√≤ng l·∫∑p v√† tr·∫£ v·ªÅ k·∫øt qu·∫£\n    }\n  };\n  const placedWords = placeWordsOnGrid(shuffledWords, gridSize);\n  console.log(placedWords);\n  return placedWords;\n};\nexport const renderGrid = (wordList, mainKeyword, GRID_SIZE) => {\n  console.log(\"wordList on render\", wordList);\n  const maxAttempts = 100;\n  const generateEmptyGrid = () => {\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n  };\n  const getKey = (x, y) => `${x},${y}`;\n  const canPlaceNumber = (x, y) => {\n    if (x < 0 || y < 0 || x >= GRID_SIZE || y >= GRID_SIZE) return false;\n    return !occupiedPositions.has(getKey(x, y));\n  };\n  const hasCommonLetter = (word1, word2) => {\n    return [...new Set(word1)].some(letter => word2.includes(letter));\n  };\n\n  // Try to place words and numbers until a valid configuration is found\n  let attempts = 0;\n  let randomHintWords = [];\n  let newGrid = generateEmptyGrid();\n  let occupiedPositions = new Set();\n  let occupiedRows = new Set();\n  let occupiedCols = new Set();\n  while (attempts < maxAttempts) {\n    randomHintWords = generateHintWords(wordList, GRID_SIZE, mainKeyword);\n    newGrid = generateEmptyGrid();\n    occupiedPositions.clear();\n    occupiedRows.clear();\n    occupiedCols.clear();\n    let canPlaceAll = true;\n\n    // First pass: Place words and mark their positions\n    for (const {\n      word,\n      x,\n      y,\n      direction\n    } of randomHintWords) {\n      if (direction === \"horizontal\") {\n        occupiedRows.add(y);\n        // Check for adjacent rows\n        for (const other of randomHintWords) {\n          if (other.word === word || other.direction !== \"horizontal\") continue; // Fixed comparison\n          if (Math.abs(other.y - y) === 1 && !hasCommonLetter(word, other.word)) {\n            canPlaceAll = false;\n            break;\n          }\n        }\n      } else {\n        occupiedCols.add(x);\n        // Check for adjacent columns\n        for (const other of randomHintWords) {\n          if (other.word === word || other.direction !== \"vertical\") continue; // Fixed comparison\n          if (Math.abs(other.x - x) === 1 && !hasCommonLetter(word, other.word)) {\n            canPlaceAll = false;\n            break;\n          }\n        }\n      }\n      if (!canPlaceAll) break;\n      for (let i = 0; i < word.length; i++) {\n        let newX = direction === \"horizontal\" ? x + i : x;\n        let newY = direction === \"horizontal\" ? y : y + i;\n        newGrid[newY][newX] = word[i];\n        occupiedPositions.add(getKey(newX, newY));\n      }\n    }\n    if (!canPlaceAll) {\n      attempts++;\n      continue;\n    }\n\n    // Second pass: Check if numbers can be placed without overlap\n\n    for (const {\n      word,\n      x,\n      y,\n      direction\n    } of randomHintWords) {\n      const wordNumber = wordList.includes(word) ? wordList.indexOf(word) + 1 : -1; // Ki·ªÉm tra tr∆∞·ªõc khi l·∫•y s·ªë\n\n      if (wordNumber === -1) {\n        console.error(`Kh√¥ng t√¨m th·∫•y t·ª´ ${word} trong wordList`);\n        continue; // N·∫øu kh√¥ng t√¨m th·∫•y, ti·∫øp t·ª•c v√≤ng l·∫∑p\n      }\n      if (direction === \"horizontal\" && x > 0) {\n        if (!canPlaceNumber(x - 1, y)) {\n          canPlaceAll = false;\n          break;\n        }\n      } else if (direction === \"vertical\" && y > 0) {\n        if (!canPlaceNumber(x, y - 1)) {\n          canPlaceAll = false;\n          break;\n        }\n      }\n    }\n    if (canPlaceAll) {\n      // Place numbers if all checks pass\n      randomHintWords.forEach(({\n        word,\n        x,\n        y,\n        direction\n      }) => {\n        const wordNumber = wordList.indexOf(word) + 1;\n        console.log(\"wordList\", wordList);\n        console.log(\"word\", word);\n        console.log(\"wordNumber\", wordNumber);\n        let newY = y; // T·∫°o bi·∫øn m·ªõi ƒë·ªÉ l∆∞u tr·ªØ v·ªã tr√≠ x ƒë√£ ƒëi·ªÅu ch·ªânh\n\n        // Ki·ªÉm tra n·∫øu √¥ b√™n tr√°i ƒë√£ b·ªã chi·∫øm, th√¨ d·ªãch sang ph·∫£i\n        if (newGrid[x][y - 1] !== '') {\n          newY = y + 1; // D·ªãch sang ph·∫£i 1 ƒë∆°n v·ªã\n\n          // N·∫øu l√† horizontal, c·∫ßn ki·ªÉm tra to√†n b·ªô c√°c √¥ c·ªßa word v√† d·ªãch ch√∫ng\n          if (direction === \"horizontal\") {\n            // Ki·ªÉm tra xem sau khi d·ªãch c√≥ ƒë·ªß kh√¥ng gian kh√¥ng\n            if (newY + word.length > newGrid[0].length) {\n              // C√≥ th·ªÉ c·∫ßn x·ª≠ l√Ω tr∆∞·ªùng h·ª£p v∆∞·ª£t qu√° k√≠ch th∆∞·ªõc grid\n              console.error(\"Kh√¥ng d·ªãch ƒë∆∞·ª£c sang ph·∫£i\");\n              return;\n            }\n            // C·∫≠p nh·∫≠t c√°c √¥ c·ªßa word ·ªü v·ªã tr√≠ m·ªõi\n            for (let i = 0; i < word.length; i++) {\n              newGrid[x][newY + i] = word[i];\n              occupiedPositions.add(getKey(x, newY + i));\n            }\n            occupiedPositions.delete(getKey(x, y));\n            newGrid[x][y] = \"\";\n          }\n        }\n        if (direction === \"horizontal\" && x > 0) {\n          newGrid[y][x - 1] = `number${wordNumber.toString()}`;\n          occupiedPositions.add(getKey(x - 1, y));\n        } else if (direction === \"vertical\" && y > 0) {\n          newGrid[y - 1][x] = `number${wordNumber.toString()}`;\n          occupiedPositions.add(getKey(x, y - 1));\n        }\n      });\n      break; // Valid configuration found, exit loop\n    }\n    attempts++;\n  }\n  if (attempts >= maxAttempts) {\n    console.warn(\"Could not find a valid grid configuration without overlapping numbers or adjacent non-shared words after max attempts.\");\n  }\n  return {\n    randomHintWords,\n    newGrid\n  };\n};\nexport function generateCrossword(wordList, board) {\n  // Ki·ªÉm tra ƒë·∫ßu v√†o\n  if (!Array.isArray(wordList) || wordList.length !== 6 || !wordList.every(w => typeof w === 'string')) {\n    return {\n      board: [],\n      wordsActive: [],\n      success: false,\n      message: 'wordList must be an array of 6 strings'\n    };\n  }\n  if (!Array.isArray(board) || board.length === 0 || board[0].length !== 20) {\n    board = Array.from({\n      length: 20\n    }, () => Array(20).fill(null));\n  }\n\n  // Kh·ªüi t·∫°o c·∫•u tr√∫c d·ªØ li·ªáu\n  const wordsActive = [];\n  const wordBank = wordList.map((word, idx) => ({\n    string: word.toUpperCase(),\n    char: word.toUpperCase().split(''),\n    index: idx,\n    successfulMatches: [],\n    totalMatches: 0,\n    effectiveMatches: 0\n  }));\n  const bounds = {\n    minX: 0,\n    maxX: 0,\n    minY: 0,\n    maxY: 0,\n    update: function (x, y) {\n      this.minX = Math.min(this.minX, x);\n      this.maxX = Math.max(this.maxX, x);\n      this.minY = Math.min(this.minY, y);\n      this.maxY = Math.max(this.maxY, y);\n    }\n  };\n\n  // H√†m ki·ªÉm tra xem √¥ c√≥ h·ª£p l·ªá ƒë·ªÉ ƒë·∫∑t k√Ω t·ª± kh√¥ng\n  function isValidPosition(x, y, char, board, dir, word, i) {\n    if (x < 0 || x >= board.length || y < 0 || y >= board[0].length) return false;\n    if (board[x][y] === null) return true;\n    if (board[x][y] === char) {\n      // Ki·ªÉm tra xung ƒë·ªôt v·ªõi t·ª´ kh√°c t·∫°i giao ƒëi·ªÉm\n      const crossDir = dir === 0 ? 1 : 0;\n      const crossVal = [crossDir === 0 ? x > 0 ? board[x - 1][y] : null : y > 0 ? board[x][y - 1] : null, board[x][y], crossDir === 0 ? x < board.length - 1 ? board[x + 1][y] : null : y < board[0].length - 1 ? board[x][y + 1] : null];\n      return crossVal[0] === null && crossVal[2] === null && board[x][y] === char;\n    }\n    return false;\n  }\n\n  // H√†m m·ªü r·ªông b·∫£ng n·∫øu c·∫ßn\n  function expandBoard(board, x, y) {\n    while (x >= board.length) {\n      board.push(Array(board[0].length).fill(null));\n    }\n    while (y >= board[0].length) {\n      for (let i = 0; i < board.length; i++) {\n        board[i].push(null);\n      }\n    }\n  }\n\n  // H√†m t√¨m c√°c v·ªã tr√≠ giao nhau h·ª£p l·ªá cho m·ªôt t·ª´\n  function findMatches(word, board, wordsActive) {\n    word.successfulMatches = [];\n    word.totalMatches = 0;\n    word.effectiveMatches = 0;\n    if (wordsActive.length === 0) {\n      // N·∫øu b·∫£ng r·ªóng, ƒë·∫∑t t·ª´ ƒë·∫ßu ti√™n ·ªü gi·ªØa\n      const x = Math.floor(board.length / 2);\n      const y = Math.floor(board[0].length / 2);\n      const dir = Math.random() < 0.5 ? 0 : 1;\n      word.successfulMatches.push({\n        x,\n        y,\n        dir\n      });\n      word.totalMatches = 1;\n      word.effectiveMatches = 1;\n      return;\n    }\n    for (const placedWord of wordsActive) {\n      for (let i = 0; i < word.char.length; i++) {\n        for (let k = 0; k < placedWord.char.length; k++) {\n          if (word.char[i] === placedWord.char[k]) {\n            word.totalMatches++;\n            // Th·ª≠ ƒë·∫∑t t·ª´ theo h∆∞·ªõng ngang (dir=0) v√† d·ªçc (dir=1)\n            for (let dir = 0; dir <= 1; dir++) {\n              const x = dir === 0 ? placedWord.x + k - i : placedWord.x + k;\n              const y = dir === 0 ? placedWord.y : placedWord.y - i;\n              let isValid = true;\n              // Ki·ªÉm tra to√†n b·ªô t·ª´ c√≥ th·ªÉ ƒë·∫∑t ƒë∆∞·ª£c kh√¥ng\n              for (let m = 0; m < word.char.length; m++) {\n                const xPos = dir === 0 ? x + m : x;\n                const yPos = dir === 0 ? y : y + m;\n                expandBoard(board, xPos, yPos);\n                if (!isValidPosition(xPos, yPos, word.char[m], board, dir, word, m)) {\n                  isValid = false;\n                  break;\n                }\n              }\n              if (isValid) {\n                word.successfulMatches.push({\n                  x,\n                  y,\n                  dir\n                });\n                word.effectiveMatches++;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // H√†m ƒë·∫∑t t·ª´ l√™n b·∫£ng\n  function placeWord(word, board, wordsActive) {\n    if (word.successfulMatches.length === 0) return false;\n\n    // Ch·ªçn ng·∫´u nhi√™n m·ªôt v·ªã tr√≠ giao nhau h·ª£p l·ªá\n    const matchIndex = Math.floor(Math.random() * word.successfulMatches.length);\n    const matchData = word.successfulMatches[matchIndex];\n\n    // C·∫≠p nh·∫≠t th√¥ng tin t·ª´\n    word.x = matchData.x;\n    word.y = matchData.y;\n    word.dir = matchData.dir;\n\n    // ƒê·∫∑t t·ª´ng k√Ω t·ª± l√™n b·∫£ng\n    for (let i = 0; i < word.char.length; i++) {\n      const xIndex = matchData.dir === 0 ? matchData.x + i : matchData.x;\n      const yIndex = matchData.dir === 0 ? matchData.y : matchData.y + i;\n      expandBoard(board, xIndex, yIndex);\n      board[xIndex][yIndex] = word.char[i];\n      bounds.update(xIndex, yIndex);\n    }\n    wordsActive.push(word);\n    return true;\n  }\n\n  // H√†m ch√≠nh ƒë·ªÉ ƒë·∫∑t t·∫•t c·∫£ t·ª´\n  while (wordBank.length > 0) {\n    let minMatchDiff = Infinity;\n    let curIndex = -1;\n\n    // T√¨m t·ª´ t·ªët nh·∫•t ƒë·ªÉ ƒë·∫∑t\n    for (let i = 0; i < wordBank.length; i++) {\n      const curWord = wordBank[i];\n      findMatches(curWord, board, wordsActive);\n      const curMatchDiff = curWord.totalMatches - curWord.effectiveMatches;\n      if (curMatchDiff < minMatchDiff && curWord.successfulMatches.length > 0) {\n        minMatchDiff = curMatchDiff;\n        curIndex = i;\n      }\n    }\n    if (curIndex === -1) {\n      return {\n        board,\n        wordsActive,\n        success: false,\n        message: 'Failed to place all words'\n      };\n    }\n\n    // ƒê·∫∑t t·ª´ v√† lo·∫°i kh·ªèi wordBank\n    const wordToPlace = wordBank.splice(curIndex, 1)[0];\n    if (!placeWord(wordToPlace, board, wordsActive)) {\n      return {\n        board,\n        wordsActive,\n        success: false,\n        message: 'Failed to place word'\n      };\n    }\n  }\n\n  // C·∫Øt b·∫£ng theo bounds ƒë·ªÉ tr·∫£ v·ªÅ k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu\n  const trimmedBoard = [];\n  for (let x = bounds.minX; x <= bounds.maxX; x++) {\n    const row = board[x].slice(bounds.minY, bounds.maxY + 1);\n    trimmedBoard.push(row);\n  }\n  return {\n    board: trimmedBoard,\n    wordsActive,\n    success: true\n  };\n}\n\n//   // V√≠ d·ª• s·ª≠ d·ª•ng\n//   const wordList: string[] = ['CROSSWORD', 'PUZZLE', 'GRID', 'WORD', 'CLUE', 'GAME'];\n//   const board: (string | null)[][] = Array.from({ length: 20 }, () => Array(20).fill(null));\n//   const result: CrosswordResult = generateCrossword(wordList, board);\n//   console.log('Success:', result.success);\n//   console.log('Words Active:', result.wordsActive);\n//   console.log('Board:');\n//   result.board.forEach(row => console.log(row.map(c => c || '.').join(' ')));","map":{"version":3,"names":["findCommonLetterIndexes","word1","word2","result","i","length","j","push","findCommonLetterPairs","wordList","gridSize","REQUIRE_PAIRS","Math","floor","random","console","log","tempWordList","commonPairs","placedWords","Set","wordsCoordinate","found","pairs","direction","nextPosition","x","y","has","index","add","generateHintWords","words","obstacleWord","grid","Array","fill","map","results","usedWords","remainingPairs","commonLetters","filter","letter","includes","scoredLetters","index1","indexOf","index2","center1","center2","score","abs","sort","a","b","prioritizedLetters","item","pair","shuffledWords","placeWordsOnGrid","occupiedPositions","placedSet","allPlaced","getKey","canPlaceWord","word","newX","newY","commonLetterPairs","commonLetter","placed","attempt","intersecrX","intersectY","pop","warn","shift","renderGrid","mainKeyword","GRID_SIZE","maxAttempts","generateEmptyGrid","canPlaceNumber","hasCommonLetter","some","attempts","randomHintWords","newGrid","occupiedRows","occupiedCols","clear","canPlaceAll","other","wordNumber","error","forEach","delete","toString","generateCrossword","board","isArray","every","w","wordsActive","success","message","from","wordBank","idx","string","toUpperCase","char","split","successfulMatches","totalMatches","effectiveMatches","bounds","minX","maxX","minY","maxY","update","min","max","isValidPosition","dir","crossDir","crossVal","expandBoard","findMatches","placedWord","k","isValid","m","xPos","yPos","placeWord","matchIndex","matchData","xIndex","yIndex","minMatchDiff","Infinity","curIndex","curWord","curMatchDiff","wordToPlace","splice","trimmedBoard","row","slice"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/utils.ts"],"sourcesContent":["// T·∫°o t·ª´ kh√≥a g·ª£i √Ω v·ªõi v·ªã tr√≠ v√† h∆∞·ªõng random\r\n\r\ninterface HintWord {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n    obstacleWord: string;\r\n}\r\n\r\ntype PlacedWord = {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n};\r\n\r\n\r\nexport const findCommonLetterIndexes = (word1: string, word2: string) => {\r\n    const result = []\r\n    for (let i=0;i<word1.length;i++) {\r\n        for(let j =0;j<word2.length;j++) {\r\n            if(word1[i] === word2[j]) {\r\n                result.push({\r\n                    [word1] : i,\r\n                    [word2] : j\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nexport const findCommonLetterPairs = (wordList: string[], gridSize: number) => {\r\n    const REQUIRE_PAIRS = Math.floor(Math.random()*2) + 1\r\n    console.log(\"REQUIRE_PAIRS\",REQUIRE_PAIRS);\r\n    \r\n    const tempWordList = [...wordList]\r\n    const commonPairs = [\r\n    ]\r\n    const placedWords = new Set()\r\n    const wordsCoordinate: PlacedWord[] = []\r\n\r\n    let found = false\r\n    let pairs = 0\r\n    let direction = \"horizontal\"\r\n    let nextPosition:{x:number, y:number} = {\r\n        x: 0,\r\n        y: 0\r\n    }\r\n\r\n    \r\n    if(REQUIRE_PAIRS == 2) {\r\n        while (pairs <REQUIRE_PAIRS && !found) {\r\n        \r\n            for (let i =0;i<tempWordList.length;i++) {\r\n                if(pairs==REQUIRE_PAIRS || found == true) break\r\n    \r\n                const word1 = tempWordList[i]\r\n                if(placedWords.has(word1)) continue\r\n    \r\n                for (let j =0;j<tempWordList.length;j++) {\r\n                    if (tempWordList[j] === word1) continue\r\n    \r\n                    if(placedWords.has(tempWordList[j])) continue\r\n    \r\n                    const result = findCommonLetterIndexes(word1,tempWordList[j])\r\n    \r\n                    if(result.length >0) {\r\n                        console.log(\"result\",result);\r\n                        const index = Math.floor(Math.random() * result.length)\r\n                        console.log(\"index\",index);\r\n                        \r\n                        commonPairs.push(result[index])\r\n                        console.log(\"pairs\",pairs);\r\n                        placedWords.add(word1)\r\n                        placedWords.add(tempWordList[j])\r\n                        pairs = pairs + 1\r\n                        break\r\n                    }\r\n    \r\n                    if(i==tempWordList.length-1 && j==tempWordList.length-1) {\r\n                        found = true\r\n                        break\r\n                    }\r\n    \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if(REQUIRE_PAIRS == 1) {\r\n        while (!found) {\r\n        \r\n            for (let i =0;i<tempWordList.length;i++) {\r\n                if(found == true) break\r\n    \r\n                const word1 = tempWordList[i]\r\n                if(placedWords.has(word1)) continue\r\n    \r\n                for (let j =0;j<tempWordList.length;j++) {\r\n                    if (tempWordList[j] === word1) continue\r\n    \r\n                    const result = findCommonLetterIndexes(word1,tempWordList[j])\r\n    \r\n                    if(result.length >0) {\r\n                        console.log(\"result\",result);\r\n                        const index = Math.floor(Math.random() * result.length)\r\n                        console.log(\"index\",index);\r\n                        \r\n                        commonPairs.push(result[index])\r\n                        console.log(\"pairs\",pairs);\r\n                        placedWords.add(word1)\r\n                        placedWords.add(tempWordList[j])\r\n\r\n                        \r\n                    }\r\n\r\n                    if(commonPairs.length ==2) {\r\n                        found = true\r\n                        break\r\n                    }\r\n    \r\n                    if(i==tempWordList.length-1 && j==tempWordList.length-1) {\r\n                        found = true\r\n                        break\r\n                    }\r\n    \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //loop until 2 pairs are found or go through all the array\r\n    \r\n\r\n    // for (let pairs of commonPairs){\r\n    //     const keys = Object.keys(pairs);\r\n    //     const word1Coordinate: PlacedWord = {\r\n    //         word: keys[0],\r\n    //         x: pairs[keys[1]] + 1,\r\n    //         y: 1,\r\n    //         direction: \"horizontal\"\r\n    //     }\r\n\r\n    //     const word2Coordinate: PlacedWord = {\r\n    //         word: keys[1],\r\n    //         x: 1,\r\n    //         y: pairs[keys[0]] + 1,\r\n    //         direction: \"vertical\"\r\n    //     }\r\n\r\n    //     placedWords.add(word1Coordinate)\r\n    //     placedWords.add(word2Coordinate)\r\n\r\n    // }\r\n\r\n    return commonPairs\r\n    \r\n}\r\n\r\n\r\n\r\nexport const generateHintWords = (words: string[], gridSize: number, obstacleWord: string): HintWord[] => {\r\n    const grid: string[][] = Array(gridSize)\r\n        .fill(null)\r\n        .map(() => Array(gridSize).fill(\"\")); // M·∫£ng ki·ªÉm tra v·ªã tr√≠\r\n\r\n    const findCommonLetterPairs = (words: string[]): { word1: string; word2: string; commonLetters: string[] }[] => {\r\n        let results: { word1: string; word2: string; commonLetters: string[] }[] = [];\r\n        let usedWords = new Set<string>(); // L∆∞u l·∫°i c√°c t·ª´ ƒë√£ d√πng\r\n\r\n        let remainingPairs: { word1: string; word2: string; commonLetters: string[] }[] = [];\r\n\r\n        for (let i = 0; i < words.length; i++) {\r\n            for (let j = i + 1; j < words.length; j++) {\r\n                const word1 = words[i];\r\n                const word2 = words[j];\r\n\r\n                // T√¨m k√Ω t·ª± chung gi·ªØa 2 t·ª´\r\n                const commonLetters = [...new Set(word1)].filter((letter) => word2.includes(letter));\r\n\r\n                if (commonLetters.length >= 2) {\r\n                    // T√≠nh ƒëi·ªÉm ∆∞u ti√™n (ch·ªØ g·∫ßn trung t√¢m h∆°n)\r\n                    const scoredLetters = commonLetters.map((letter) => {\r\n                        const index1 = word1.indexOf(letter);\r\n                        const index2 = word2.indexOf(letter);\r\n                        const center1 = word1.length / 2;\r\n                        const center2 = word2.length / 2;\r\n                        const score = Math.abs(index1 - center1) + Math.abs(index2 - center2);\r\n                        return { letter, score };\r\n                    });\r\n\r\n                    // S·∫Øp x·∫øp theo ƒëi·ªÉm ∆∞u ti√™n\r\n                    scoredLetters.sort((a, b) => a.score - b.score);\r\n                    const prioritizedLetters = scoredLetters.map((item) => item.letter);\r\n\r\n                    remainingPairs.push({ word1, word2, commonLetters: prioritizedLetters });\r\n                }\r\n            }\r\n        }\r\n\r\n        // B∆∞·ªõc 2: Ch·ªçn t·ªëi ƒëa 2 c·∫∑p theo quy t·∫Øc\r\n        for (const pair of remainingPairs) {\r\n            if (results.length >= 2) break; // ƒê·ªß 2 c·∫∑p th√¨ d·ª´ng\r\n            if (!usedWords.has(pair.word1) && !usedWords.has(pair.word2)) {\r\n                results.push(pair);\r\n                usedWords.add(pair.word1);\r\n                usedWords.add(pair.word2);\r\n            }\r\n        }\r\n\r\n        // N·∫øu v·∫´n ch∆∞a ƒë·ªß 2 c·∫∑p, ch·ªçn ti·∫øp t·ª´ c√°c c·∫∑p c√≥ t·ª´ ƒë√£ d√πng\r\n        for (const pair of remainingPairs) {\r\n            if (results.length >= 2) break;\r\n            if (!usedWords.has(pair.word1) || !usedWords.has(pair.word2)) {\r\n                results.push(pair);\r\n                usedWords.add(pair.word1);\r\n                usedWords.add(pair.word2);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    };\r\n\r\n    // üõ† Test\r\n    //const testwords = [\"B∆ØUCH√çNH\", \"5G\", \"BQP\", \"T·∫¨PƒêO√ÄN\", \"H√ÄN·ªòI\", \"RED\"];\r\n\r\n    const shuffledWords = [...words].sort(() => Math.random() - 0.5);\r\n    const placeWordsOnGrid = (words: string[], gridSize: number): PlacedWord[] => {\r\n        while (true) {\r\n            let placedWords: PlacedWord[] = [];\r\n            let occupiedPositions = new Set<string>();\r\n            let placedSet = new Set<string>(); // Set ƒë·ªÉ theo d√µi t·ª´ ƒë√£ ƒë·∫∑t\r\n            let allPlaced = true; // C·ªù ki·ªÉm tra xem t·∫•t c·∫£ t·ª´ c√≥ ƒë∆∞·ª£c ƒë·∫∑t hay kh√¥ng\r\n\r\n            const getKey = (x: number, y: number) => `${x},${y}`;\r\n\r\n            const canPlaceWord = (word: string, x: number, y: number, direction: \"horizontal\" | \"vertical\", index: number) => {\r\n                for (let i = 0; i < word.length; i++) {\r\n                    if (i === x + index) continue;\r\n                    let newX = direction === \"horizontal\" ? x + i : x;\r\n                    let newY = direction === \"horizontal\" ? y : y + i;\r\n                    if (newX < 0 || newY < 0 || newX >= gridSize || newY >= gridSize || occupiedPositions.has(getKey(newX, newY))) {\r\n                        return false;\r\n                    }\r\n                }\r\n                return true;\r\n            };\r\n\r\n            const commonLetterPairs = findCommonLetterPairs(words);\r\n            console.log(commonLetterPairs);\r\n\r\n            for (const { word1, word2, commonLetters } of commonLetterPairs) {\r\n                if (placedSet.has(word1) || placedSet.has(word2)) continue; // Ki·ªÉm tra n·∫øu ƒë√£ ƒë·∫∑t th√¨ b·ªè qua\r\n\r\n                const commonLetter = commonLetters[0];\r\n                const index1 = word1.indexOf(commonLetter);\r\n                const index2 = word2.indexOf(commonLetter);\r\n\r\n                let placed = false;\r\n                for (let attempt = 0; attempt < 100; attempt++) {\r\n                    let x = Math.floor(Math.random() * (gridSize - word1.length)) + 1;\r\n                    let y = Math.floor(Math.random() * (gridSize - index2) + index2) + 1;\r\n\r\n                    if (canPlaceWord(word1, x, y, \"horizontal\", index1)) {\r\n                        placedWords.push({ word: word1, x, y, direction: \"horizontal\" });\r\n                        placedSet.add(word1);\r\n\r\n                        let intersecrX = x + index1;\r\n                        let intersectY = y;\r\n\r\n                        if (canPlaceWord(word2, intersecrX, intersectY - index2, \"vertical\", index2)) {\r\n                            for (let i = 0; i < word1.length; i++) occupiedPositions.add(getKey(x + i, y));\r\n                            placedWords.push({ word: word2, x: intersecrX, y: intersectY - index2, direction: \"vertical\" });\r\n                            placedSet.add(word2);\r\n\r\n                            for (let i = 0; i < word2.length; i++) occupiedPositions.add(getKey(intersecrX, intersectY - index2 + i));\r\n\r\n                            placed = true;\r\n                            break;\r\n                        } else {\r\n                            placedWords.pop();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!placed) {\r\n                    console.warn(`Kh√¥ng th·ªÉ ƒë·∫∑t c·∫∑p t·ª´: ${word1} - ${word2}`);\r\n                    allPlaced = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n\r\n\r\n            for (const word of words) {\r\n                if (placedSet.has(word)) continue;\r\n\r\n                let placed = false;\r\n                let found = false;\r\n\r\n                for (let j = placedWords.length - 1; j >= 0; j--) {\r\n                    for (let attempt = 0; attempt < 10; attempt++) {\r\n                        let direction: \"horizontal\" | \"vertical\" = placedWords[j].direction === \"horizontal\" ? \"vertical\" : \"horizontal\";\r\n                        const shift = Math.random() < 0.5 ? 1 : -1;\r\n                        let x = placedWords[j].direction === \"horizontal\" ? placedWords[j].word.length + placedWords[j].x : placedWords[j].x + 1;\r\n                        let y = placedWords[j].direction === \"horizontal\" ? placedWords[j].y + 2 : placedWords[j].word.length + placedWords[j].y;\r\n\r\n                        if (canPlaceWord(word, x, y, direction, 0)) {\r\n                            placedWords.push({ word, x, y, direction });\r\n                            placedSet.add(word);\r\n\r\n                            for (let i = 0; i < word.length; i++) {\r\n                                let newX = direction === \"horizontal\" ? x + i : x;\r\n                                let newY = direction === \"horizontal\" ? y : y + i;\r\n                                occupiedPositions.add(getKey(newX, newY));\r\n                            }\r\n\r\n                            placed = true;\r\n                            found = true;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (found) break;\r\n                }\r\n\r\n                if (!placed) {\r\n                    console.warn(`Kh√¥ng th·ªÉ ƒë·∫∑t t·ª´: ${word}`);\r\n                    allPlaced = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (!allPlaced) continue; // N·∫øu c√≥ t·ª´ kh√¥ng ƒë·∫∑t ƒë∆∞·ª£c, restart v√≤ng l·∫∑p\r\n\r\n            if (allPlaced) return placedWords; // N·∫øu t·∫•t c·∫£ t·ª´ ƒë·ªÅu ƒë∆∞·ª£c ƒë·∫∑t, tho√°t kh·ªèi v√≤ng l·∫∑p v√† tr·∫£ v·ªÅ k·∫øt qu·∫£\r\n        }\r\n    };\r\n\r\n    const placedWords = placeWordsOnGrid(shuffledWords, gridSize);\r\n    console.log(placedWords);\r\n\r\n    return placedWords;\r\n};\r\n\r\n\r\nexport const renderGrid = (wordList: string[], mainKeyword:string, GRID_SIZE:number) => {\r\n    console.log(\"wordList on render\", wordList);\r\n    \r\n    const maxAttempts = 100;\r\n\r\n    const generateEmptyGrid = () => {\r\n        return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\r\n    };\r\n\r\n    const getKey = (x: number, y: number) => `${x},${y}`;\r\n\r\n    const canPlaceNumber = (x: number, y: number) => {\r\n        if (x < 0 || y < 0 || x >= GRID_SIZE || y >= GRID_SIZE) return false;\r\n        return !occupiedPositions.has(getKey(x, y));\r\n    };\r\n\r\n    const hasCommonLetter = (word1: string, word2: string) => {\r\n        return [...new Set(word1)].some((letter) => word2.includes(letter));\r\n    };\r\n\r\n    // Try to place words and numbers until a valid configuration is found\r\n    let attempts = 0;\r\n    let randomHintWords: HintWord[] = [];\r\n    let newGrid = generateEmptyGrid();\r\n    let occupiedPositions = new Set<string>();\r\n    let occupiedRows = new Set<number>();\r\n    let occupiedCols = new Set<number>();\r\n\r\n\r\n    while (attempts < maxAttempts) {\r\n        randomHintWords = generateHintWords(wordList, GRID_SIZE, mainKeyword);\r\n        newGrid = generateEmptyGrid();\r\n        occupiedPositions.clear();\r\n        occupiedRows.clear();\r\n        occupiedCols.clear();\r\n\r\n        let canPlaceAll = true;\r\n\r\n        // First pass: Place words and mark their positions\r\n        for (const { word, x, y, direction } of randomHintWords) {\r\n            if (direction === \"horizontal\") {\r\n                occupiedRows.add(y);\r\n                // Check for adjacent rows\r\n                for (const other of randomHintWords) {\r\n                    if (other.word === word || other.direction !== \"horizontal\") continue; // Fixed comparison\r\n                    if (Math.abs(other.y - y) === 1 && !hasCommonLetter(word, other.word)) {\r\n                        canPlaceAll = false;\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                occupiedCols.add(x);\r\n                // Check for adjacent columns\r\n                for (const other of randomHintWords) {\r\n                    if (other.word === word || other.direction !== \"vertical\") continue; // Fixed comparison\r\n                    if (Math.abs(other.x - x) === 1 && !hasCommonLetter(word, other.word)) {\r\n                        canPlaceAll = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!canPlaceAll) break;\r\n\r\n            for (let i = 0; i < word.length; i++) {\r\n                let newX = direction === \"horizontal\" ? x + i : x;\r\n                let newY = direction === \"horizontal\" ? y : y + i;\r\n                newGrid[newY][newX] = word[i];\r\n                occupiedPositions.add(getKey(newX, newY));\r\n            }\r\n        }\r\n\r\n        if (!canPlaceAll) {\r\n            attempts++;\r\n            continue;\r\n        }\r\n\r\n        // Second pass: Check if numbers can be placed without overlap\r\n\r\n        for (const { word, x, y, direction } of randomHintWords) {\r\n            const wordNumber = wordList.includes(word) ? wordList.indexOf(word) + 1 : -1; // Ki·ªÉm tra tr∆∞·ªõc khi l·∫•y s·ªë\r\n\r\n            if (wordNumber === -1) {\r\n                console.error(`Kh√¥ng t√¨m th·∫•y t·ª´ ${word} trong wordList`);\r\n                continue; // N·∫øu kh√¥ng t√¨m th·∫•y, ti·∫øp t·ª•c v√≤ng l·∫∑p\r\n            }\r\n\r\n            if (direction === \"horizontal\" && x > 0) {\r\n                if (!canPlaceNumber(x - 1, y)) {\r\n                    canPlaceAll = false;\r\n                    break;\r\n                }\r\n            } else if (direction === \"vertical\" && y > 0) {\r\n                if (!canPlaceNumber(x, y - 1)) {\r\n                    canPlaceAll = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (canPlaceAll) {\r\n            // Place numbers if all checks pass\r\n            randomHintWords.forEach(({ word, x, y, direction }) => {\r\n                const wordNumber = wordList.indexOf(word) + 1;\r\n                console.log(\"wordList\",wordList)\r\n                console.log(\"word\",word);\r\n                \r\n                console.log(\"wordNumber\",wordNumber)\r\n                let newY = y; // T·∫°o bi·∫øn m·ªõi ƒë·ªÉ l∆∞u tr·ªØ v·ªã tr√≠ x ƒë√£ ƒëi·ªÅu ch·ªânh\r\n\r\n                // Ki·ªÉm tra n·∫øu √¥ b√™n tr√°i ƒë√£ b·ªã chi·∫øm, th√¨ d·ªãch sang ph·∫£i\r\n                if (newGrid[x][y-1] !== '') {\r\n                    newY = y + 1; // D·ªãch sang ph·∫£i 1 ƒë∆°n v·ªã\r\n                    \r\n                    // N·∫øu l√† horizontal, c·∫ßn ki·ªÉm tra to√†n b·ªô c√°c √¥ c·ªßa word v√† d·ªãch ch√∫ng\r\n                    if (direction === \"horizontal\") {\r\n                        // Ki·ªÉm tra xem sau khi d·ªãch c√≥ ƒë·ªß kh√¥ng gian kh√¥ng\r\n                        if (newY + word.length > newGrid[0].length) {\r\n                            // C√≥ th·ªÉ c·∫ßn x·ª≠ l√Ω tr∆∞·ªùng h·ª£p v∆∞·ª£t qu√° k√≠ch th∆∞·ªõc grid\r\n                            console.error(\"Kh√¥ng d·ªãch ƒë∆∞·ª£c sang ph·∫£i\")\r\n                            return;\r\n                        }\r\n                        // C·∫≠p nh·∫≠t c√°c √¥ c·ªßa word ·ªü v·ªã tr√≠ m·ªõi\r\n                        for (let i = 0; i < word.length; i++) {\r\n                            newGrid[x][newY+i] = word[i];\r\n                            occupiedPositions.add(getKey(x, newY+i));\r\n                        }\r\n\r\n                        occupiedPositions.delete(getKey(x,y))\r\n                        newGrid[x][y] = \"\"\r\n                    }\r\n                }\r\n                if (direction === \"horizontal\" && x > 0) {\r\n                    newGrid[y][x - 1] = `number${wordNumber.toString()}`;\r\n                    occupiedPositions.add(getKey(x - 1, y));\r\n                } else if (direction === \"vertical\" && y > 0) {\r\n                    newGrid[y - 1][x] = `number${wordNumber.toString()}`;\r\n                    occupiedPositions.add(getKey(x, y - 1));\r\n                }\r\n            });\r\n\r\n\r\n            break; // Valid configuration found, exit loop\r\n        }\r\n\r\n        attempts++;\r\n    }\r\n\r\n    if (attempts >= maxAttempts) {\r\n        console.warn(\"Could not find a valid grid configuration without overlapping numbers or adjacent non-shared words after max attempts.\");\r\n    }\r\n\r\n    return {randomHintWords, newGrid}\r\n}\r\n\r\ninterface Word {\r\n    string: string;\r\n    char: string[];\r\n    index: number;\r\n    successfulMatches: Match[];\r\n    totalMatches: number;\r\n    effectiveMatches: number;\r\n    x?: number;\r\n    y?: number;\r\n    dir?: number;\r\n  }\r\n  \r\n  interface Match {\r\n    x: number;\r\n    y: number;\r\n    dir: number;\r\n  }\r\n  \r\n  interface Bounds {\r\n    minX: number;\r\n    maxX: number;\r\n    minY: number;\r\n    maxY: number;\r\n    update: (x: number, y: number) => void;\r\n  }\r\n  \r\n  interface CrosswordResult {\r\n    board: (string | null)[][];\r\n    wordsActive: Word[];\r\n    success: boolean;\r\n    message?: string;\r\n  }\r\n  \r\n  export function generateCrossword(wordList: string[], board: (string | null)[][]): CrosswordResult {\r\n    // Ki·ªÉm tra ƒë·∫ßu v√†o\r\n    if (!Array.isArray(wordList) || wordList.length !== 6 || !wordList.every(w => typeof w === 'string')) {\r\n      return { board: [], wordsActive: [], success: false, message: 'wordList must be an array of 6 strings' };\r\n    }\r\n    if (!Array.isArray(board) || board.length === 0 || board[0].length !== 20) {\r\n      board = Array.from({ length: 20 }, () => Array(20).fill(null)) as (string | null)[][];\r\n    }\r\n  \r\n    // Kh·ªüi t·∫°o c·∫•u tr√∫c d·ªØ li·ªáu\r\n    const wordsActive: Word[] = [];\r\n    const wordBank: Word[] = wordList.map((word, idx) => ({\r\n      string: word.toUpperCase(),\r\n      char: word.toUpperCase().split(''),\r\n      index: idx,\r\n      successfulMatches: [],\r\n      totalMatches: 0,\r\n      effectiveMatches: 0\r\n    }));\r\n    const bounds: Bounds = {\r\n      minX: 0,\r\n      maxX: 0,\r\n      minY: 0,\r\n      maxY: 0,\r\n      update: function(x: number, y: number) {\r\n        this.minX = Math.min(this.minX, x);\r\n        this.maxX = Math.max(this.maxX, x);\r\n        this.minY = Math.min(this.minY, y);\r\n        this.maxY = Math.max(this.maxY, y);\r\n      }\r\n    };\r\n  \r\n    // H√†m ki·ªÉm tra xem √¥ c√≥ h·ª£p l·ªá ƒë·ªÉ ƒë·∫∑t k√Ω t·ª± kh√¥ng\r\n    function isValidPosition(x: number, y: number, char: string, board: (string | null)[][], dir: number, word: Word, i: number): boolean {\r\n      if (x < 0 || x >= board.length || y < 0 || y >= board[0].length) return false;\r\n      if (board[x][y] === null) return true;\r\n      if (board[x][y] === char) {\r\n        // Ki·ªÉm tra xung ƒë·ªôt v·ªõi t·ª´ kh√°c t·∫°i giao ƒëi·ªÉm\r\n        const crossDir = dir === 0 ? 1 : 0;\r\n        const crossVal = [\r\n          crossDir === 0 ? (x > 0 ? board[x-1][y] : null) : (y > 0 ? board[x][y-1] : null),\r\n          board[x][y],\r\n          crossDir === 0 ? (x < board.length-1 ? board[x+1][y] : null) : (y < board[0].length-1 ? board[x][y+1] : null)\r\n        ];\r\n        return crossVal[0] === null && crossVal[2] === null && board[x][y] === char;\r\n      }\r\n      return false;\r\n    }\r\n  \r\n    // H√†m m·ªü r·ªông b·∫£ng n·∫øu c·∫ßn\r\n    function expandBoard(board: (string | null)[][], x: number, y: number): void {\r\n      while (x >= board.length) {\r\n        board.push(Array(board[0].length).fill(null));\r\n      }\r\n      while (y >= board[0].length) {\r\n        for (let i = 0; i < board.length; i++) {\r\n          board[i].push(null);\r\n        }\r\n      }\r\n    }\r\n  \r\n    // H√†m t√¨m c√°c v·ªã tr√≠ giao nhau h·ª£p l·ªá cho m·ªôt t·ª´\r\n    function findMatches(word: Word, board: (string | null)[][], wordsActive: Word[]): void {\r\n      word.successfulMatches = [];\r\n      word.totalMatches = 0;\r\n      word.effectiveMatches = 0;\r\n  \r\n      if (wordsActive.length === 0) {\r\n        // N·∫øu b·∫£ng r·ªóng, ƒë·∫∑t t·ª´ ƒë·∫ßu ti√™n ·ªü gi·ªØa\r\n        const x = Math.floor(board.length / 2);\r\n        const y = Math.floor(board[0].length / 2);\r\n        const dir = Math.random() < 0.5 ? 0 : 1;\r\n        word.successfulMatches.push({ x, y, dir });\r\n        word.totalMatches = 1;\r\n        word.effectiveMatches = 1;\r\n        return;\r\n      }\r\n  \r\n      for (const placedWord of wordsActive) {\r\n        for (let i = 0; i < word.char.length; i++) {\r\n          for (let k = 0; k < placedWord.char.length; k++) {\r\n            if (word.char[i] === placedWord.char[k]) {\r\n              word.totalMatches++;\r\n              // Th·ª≠ ƒë·∫∑t t·ª´ theo h∆∞·ªõng ngang (dir=0) v√† d·ªçc (dir=1)\r\n              for (let dir = 0; dir <= 1; dir++) {\r\n                const x = dir === 0 ? placedWord.x! + k - i : placedWord.x! + k;\r\n                const y = dir === 0 ? placedWord.y! : placedWord.y! - i;\r\n                let isValid = true;\r\n                // Ki·ªÉm tra to√†n b·ªô t·ª´ c√≥ th·ªÉ ƒë·∫∑t ƒë∆∞·ª£c kh√¥ng\r\n                for (let m = 0; m < word.char.length; m++) {\r\n                  const xPos = dir === 0 ? x + m : x;\r\n                  const yPos = dir === 0 ? y : y + m;\r\n                  expandBoard(board, xPos, yPos);\r\n                  if (!isValidPosition(xPos, yPos, word.char[m], board, dir, word, m)) {\r\n                    isValid = false;\r\n                    break;\r\n                  }\r\n                }\r\n                if (isValid) {\r\n                  word.successfulMatches.push({ x, y, dir });\r\n                  word.effectiveMatches++;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    // H√†m ƒë·∫∑t t·ª´ l√™n b·∫£ng\r\n    function placeWord(word: Word, board: (string | null)[][], wordsActive: Word[]): boolean {\r\n      if (word.successfulMatches.length === 0) return false;\r\n  \r\n      // Ch·ªçn ng·∫´u nhi√™n m·ªôt v·ªã tr√≠ giao nhau h·ª£p l·ªá\r\n      const matchIndex = Math.floor(Math.random() * word.successfulMatches.length);\r\n      const matchData = word.successfulMatches[matchIndex];\r\n  \r\n      // C·∫≠p nh·∫≠t th√¥ng tin t·ª´\r\n      word.x = matchData.x;\r\n      word.y = matchData.y;\r\n      word.dir = matchData.dir;\r\n  \r\n      // ƒê·∫∑t t·ª´ng k√Ω t·ª± l√™n b·∫£ng\r\n      for (let i = 0; i < word.char.length; i++) {\r\n        const xIndex = matchData.dir === 0 ? matchData.x + i : matchData.x;\r\n        const yIndex = matchData.dir === 0 ? matchData.y : matchData.y + i;\r\n        expandBoard(board, xIndex, yIndex);\r\n        board[xIndex][yIndex] = word.char[i];\r\n        bounds.update(xIndex, yIndex);\r\n      }\r\n  \r\n      wordsActive.push(word);\r\n      return true;\r\n    }\r\n  \r\n    // H√†m ch√≠nh ƒë·ªÉ ƒë·∫∑t t·∫•t c·∫£ t·ª´\r\n    while (wordBank.length > 0) {\r\n      let minMatchDiff = Infinity;\r\n      let curIndex = -1;\r\n  \r\n      // T√¨m t·ª´ t·ªët nh·∫•t ƒë·ªÉ ƒë·∫∑t\r\n      for (let i = 0; i < wordBank.length; i++) {\r\n        const curWord = wordBank[i];\r\n        findMatches(curWord, board, wordsActive);\r\n        const curMatchDiff = curWord.totalMatches - curWord.effectiveMatches;\r\n        if (curMatchDiff < minMatchDiff && curWord.successfulMatches.length > 0) {\r\n          minMatchDiff = curMatchDiff;\r\n          curIndex = i;\r\n        }\r\n      }\r\n  \r\n      if (curIndex === -1) {\r\n        return { board, wordsActive, success: false, message: 'Failed to place all words' };\r\n      }\r\n  \r\n      // ƒê·∫∑t t·ª´ v√† lo·∫°i kh·ªèi wordBank\r\n      const wordToPlace = wordBank.splice(curIndex, 1)[0];\r\n      if (!placeWord(wordToPlace, board, wordsActive)) {\r\n        return { board, wordsActive, success: false, message: 'Failed to place word' };\r\n      }\r\n    }\r\n  \r\n    // C·∫Øt b·∫£ng theo bounds ƒë·ªÉ tr·∫£ v·ªÅ k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu\r\n    const trimmedBoard: (string | null)[][] = [];\r\n    for (let x = bounds.minX; x <= bounds.maxX; x++) {\r\n      const row = board[x].slice(bounds.minY, bounds.maxY + 1);\r\n      trimmedBoard.push(row);\r\n    }\r\n  \r\n    return { board: trimmedBoard, wordsActive, success: true };\r\n  }\r\n  \r\n//   // V√≠ d·ª• s·ª≠ d·ª•ng\r\n//   const wordList: string[] = ['CROSSWORD', 'PUZZLE', 'GRID', 'WORD', 'CLUE', 'GAME'];\r\n//   const board: (string | null)[][] = Array.from({ length: 20 }, () => Array(20).fill(null));\r\n//   const result: CrosswordResult = generateCrossword(wordList, board);\r\n//   console.log('Success:', result.success);\r\n//   console.log('Words Active:', result.wordsActive);\r\n//   console.log('Board:');\r\n//   result.board.forEach(row => console.log(row.map(c => c || '.').join(' ')));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}