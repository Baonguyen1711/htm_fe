{"ast":null,"code":"import axios from 'axios';\nasync function getPresignedUrl(extension, contentType) {\n  console.log(\"extension\", extension);\n  console.log(\"contentType\", contentType);\n  const response = await axios.get(`http://localhost:8000/api/s3/presigned-url?content_type=${contentType}&extension=${extension}`, {\n    withCredentials: true\n  });\n  console.log(\"url\", response.data);\n  return response.data; // { preSignedUrl, key }\n}\nasync function uploadFileToS3(preSignedUrl, file) {\n  console.log(\"file.type\", file.type);\n  console.log(\"preSignedUrl\", preSignedUrl);\n  const response = await axios.put(preSignedUrl, file, {\n    headers: {\n      'Content-Type': file.type\n    },\n    withCredentials: false\n  });\n  if (response.status !== 200 && response.status !== 204) {\n    throw new Error('Failed to upload file to S3');\n  }\n}\nasync function notifyBackendFileUploaded(key, description) {\n  const response = await axios.post('http://localhost:8000/api/s3/save-file-key', {\n    fileKey: key,\n    description: description\n  }, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    withCredentials: true\n  });\n  if (response.status !== 200) {\n    throw new Error('Failed to notify backend');\n  }\n}\nexport async function uploadFile(file, description) {\n  try {\n    const {\n      preSignedUrl,\n      key\n    } = await getPresignedUrl(file.name.split('.').pop() || '', file.type);\n    console.log();\n    console.log(\"preSignedUrl\", preSignedUrl);\n    await uploadFileToS3(preSignedUrl, file);\n    // await notifyBackendFileUploaded( key, description);\n    return key;\n  } catch (error) {\n    console.error('Upload file failed:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["axios","getPresignedUrl","extension","contentType","console","log","response","get","withCredentials","data","uploadFileToS3","preSignedUrl","file","type","put","headers","status","Error","notifyBackendFileUploaded","key","description","post","fileKey","uploadFile","name","split","pop","error"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/services/uploadAssestServices.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nasync function getPresignedUrl(extension: string, contentType: string) {\r\n  console.log(\"extension\",extension);\r\n  console.log(\"contentType\",contentType);\r\n  \r\n  \r\n  const response = await axios.get(`http://localhost:8000/api/s3/presigned-url?content_type=${contentType}&extension=${extension}`, {\r\n    withCredentials: true,\r\n  });\r\n\r\n  console.log(\"url\", response.data)\r\n  return response.data; // { preSignedUrl, key }\r\n}\r\n\r\nasync function uploadFileToS3(preSignedUrl: string, file: File) {\r\n  console.log(\"file.type\",file.type);\r\n  console.log(\"preSignedUrl\",preSignedUrl);\r\n  const response = await axios.put(preSignedUrl, file, {\r\n    headers: {\r\n      'Content-Type': file.type,\r\n    },\r\n\r\n    withCredentials: false\r\n  });\r\n  if (response.status !== 200 && response.status !== 204) {\r\n    throw new Error('Failed to upload file to S3');\r\n  }\r\n}\r\n\r\nasync function notifyBackendFileUploaded(key: string, description: string) {\r\n  const response = await axios.post(\r\n    'http://localhost:8000/api/s3/save-file-key',\r\n    {fileKey: key, description: description },\r\n    {\r\n      headers: { 'Content-Type': 'application/json' },\r\n      withCredentials: true,\r\n    }\r\n  );\r\n  if (response.status !== 200) {\r\n    throw new Error('Failed to notify backend');\r\n  }\r\n}\r\n\r\nexport async function uploadFile( file: File, description:string) {\r\n  try {\r\n    const { preSignedUrl, key } = await getPresignedUrl(file.name.split('.').pop() || '', file.type);\r\n    console.log();\r\n    \r\n    console.log(\"preSignedUrl\",preSignedUrl)\r\n    await uploadFileToS3(preSignedUrl, file);\r\n    // await notifyBackendFileUploaded( key, description);\r\n    return key;\r\n  } catch (error) {\r\n    console.error('Upload file failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,eAAeC,eAAeA,CAACC,SAAiB,EAAEC,WAAmB,EAAE;EACrEC,OAAO,CAACC,GAAG,CAAC,WAAW,EAACH,SAAS,CAAC;EAClCE,OAAO,CAACC,GAAG,CAAC,aAAa,EAACF,WAAW,CAAC;EAGtC,MAAMG,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,2DAA2DJ,WAAW,cAAcD,SAAS,EAAE,EAAE;IAChIM,eAAe,EAAE;EACnB,CAAC,CAAC;EAEFJ,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEC,QAAQ,CAACG,IAAI,CAAC;EACjC,OAAOH,QAAQ,CAACG,IAAI,CAAC,CAAC;AACxB;AAEA,eAAeC,cAAcA,CAACC,YAAoB,EAAEC,IAAU,EAAE;EAC9DR,OAAO,CAACC,GAAG,CAAC,WAAW,EAACO,IAAI,CAACC,IAAI,CAAC;EAClCT,OAAO,CAACC,GAAG,CAAC,cAAc,EAACM,YAAY,CAAC;EACxC,MAAML,QAAQ,GAAG,MAAMN,KAAK,CAACc,GAAG,CAACH,YAAY,EAAEC,IAAI,EAAE;IACnDG,OAAO,EAAE;MACP,cAAc,EAAEH,IAAI,CAACC;IACvB,CAAC;IAEDL,eAAe,EAAE;EACnB,CAAC,CAAC;EACF,IAAIF,QAAQ,CAACU,MAAM,KAAK,GAAG,IAAIV,QAAQ,CAACU,MAAM,KAAK,GAAG,EAAE;IACtD,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;AACF;AAEA,eAAeC,yBAAyBA,CAACC,GAAW,EAAEC,WAAmB,EAAE;EACzE,MAAMd,QAAQ,GAAG,MAAMN,KAAK,CAACqB,IAAI,CAC/B,4CAA4C,EAC5C;IAACC,OAAO,EAAEH,GAAG;IAAEC,WAAW,EAAEA;EAAY,CAAC,EACzC;IACEL,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CP,eAAe,EAAE;EACnB,CACF,CAAC;EACD,IAAIF,QAAQ,CAACU,MAAM,KAAK,GAAG,EAAE;IAC3B,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;AACF;AAEA,OAAO,eAAeM,UAAUA,CAAEX,IAAU,EAAEQ,WAAkB,EAAE;EAChE,IAAI;IACF,MAAM;MAAET,YAAY;MAAEQ;IAAI,CAAC,GAAG,MAAMlB,eAAe,CAACW,IAAI,CAACY,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAEd,IAAI,CAACC,IAAI,CAAC;IAChGT,OAAO,CAACC,GAAG,CAAC,CAAC;IAEbD,OAAO,CAACC,GAAG,CAAC,cAAc,EAACM,YAAY,CAAC;IACxC,MAAMD,cAAc,CAACC,YAAY,EAAEC,IAAI,CAAC;IACxC;IACA,OAAOO,GAAG;EACZ,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdvB,OAAO,CAACuB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}