{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { renderGrid } from \"./utils\";\nimport { usePlayer } from \"../../context/playerContext\";\nimport { setSelectedRow, setCorrectRow, setIncorectRow } from \"../../components/services\";\nimport { listenToCorrectRow, listenToIncorrectRow, listenToSelectRow, listenToQuestions } from \"../../services/firebaseServices\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mainKeyword = \"BÒCÔNGANH\";\nconst QuestionBoxRound2 = ({\n  obstacleWord = mainKeyword,\n  hintWordArray,\n  initialGrid,\n  isHost = false\n}) => {\n  _s();\n  console.log(\"hintWordArray\", typeof hintWordArray);\n  console.log(\"obstacle\", obstacleWord);\n  const [searchParams] = useSearchParams();\n  const {\n    setInitialGrid\n  } = usePlayer();\n  const roomId = searchParams.get(\"roomId\") || \"\";\n  const testName = searchParams.get(\"testName\") || \"\";\n  const GRID_SIZE = 20;\n  const generateEmptyGrid = () => {\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n  };\n  const [grid, setGrid] = useState(generateEmptyGrid());\n  const [hintWords, setHintWords] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState();\n  const [cellStyles, setCellStyles] = useState({}); // Tracks background and text styles\n  const [menu, setMenu] = useState({\n    visible: false\n  });\n  const [hintWordsLength, setHintWordsLength] = useState([]);\n  const menuRef = useRef(null);\n  const revealCells = (rowIndex, colIndex, action, hintWordNumber) => {\n    if (!isHost) return;\n    const hintWordIndex = hintWordNumber ? parseInt(hintWordNumber) - 1 : -1;\n    const hintWord = hintWords.find(word => word.y === rowIndex && word.direction === \"horizontal\" || word.x === colIndex && word.direction === \"vertical\");\n    if (!hintWord) return;\n    const isRow = hintWord.direction === \"horizontal\";\n    const wordLength = hintWordIndex >= 0 && hintWordArray ? hintWordArray[hintWordIndex].length : hintWord.word.length;\n    const startIndex = isRow ? colIndex + 1 : rowIndex + 1;\n    setCellStyles(prev => {\n      const newStyles = {\n        ...prev\n      };\n      if (isRow) {\n        for (let col = startIndex; col < startIndex + wordLength; col++) {\n          const key = `${rowIndex}-${col}`;\n          // Skip number cells to preserve their appearance\n          if (!grid[rowIndex][col].includes(\"number\")) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) {\n                setSelectedRow(roomId, hintWordNumber, true, wordLength);\n              }\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-black\"\n              };\n              let indexInTarget = 0;\n              if (hintWordArray) for (let i = 0; i < hintWordArray[hintWordIndex].length; i++) {\n                const char = hintWordArray[hintWordIndex][i];\n                indexInTarget = obstacleWord.indexOf(char);\n                if (indexInTarget !== -1) {\n                  console.log(`First matching character: ${char}`);\n                  console.log(`Index in \"${obstacleWord}\": ${indexInTarget}`);\n                  break;\n                }\n              }\n              if (hintWordArray && hintWordNumber) setCorrectRow(roomId, hintWordNumber, hintWordArray[hintWordIndex], indexInTarget.toString(), true, wordLength);\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setIncorectRow(roomId, hintWordNumber, true, wordLength);\n            }\n          }\n        }\n      } else {\n        for (let row = startIndex; row < startIndex + wordLength; row++) {\n          const key = `${row}-${colIndex}`;\n          // Skip number cells to preserve their appearance\n          if (!grid[row][colIndex].includes(\"number\")) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setSelectedRow(roomId, hintWordNumber, false, wordLength);\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-black\"\n              };\n              let indexInTarget = 0;\n              if (hintWordArray) for (let i = 0; i < hintWordArray[hintWordIndex].length; i++) {\n                const char = hintWordArray[hintWordIndex][i];\n                indexInTarget = obstacleWord.indexOf(char);\n                if (indexInTarget !== -1) {\n                  console.log(`First matching character: ${char}`);\n                  console.log(`Index in \"${obstacleWord}\": ${indexInTarget}`);\n                  break;\n                }\n              }\n              if (hintWordArray && hintWordNumber) setCorrectRow(roomId, hintWordNumber, hintWordArray[hintWordIndex], indexInTarget.toString(), false, wordLength);\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setIncorectRow(roomId, hintWordNumber, false, wordLength);\n            }\n          }\n        }\n      }\n      return newStyles;\n    });\n\n    // if (action === \"correct\" || action === \"incorrect\") {\n    //   setSelectedRow(roomId, isRow ? rowIndex.toString() : colIndex.toString());\n    // }\n  };\n  const revealCellsForPlayer = (rowIndex, colIndex, action, selectedRowNumber, isRow, wordLength, correctAnswer, markedCharacterIndex) => {\n    if (isHost) return; // Ensure this runs only for players\n\n    // Determine word length\n    const length = action === \"correct\" ? (correctAnswer === null || correctAnswer === void 0 ? void 0 : correctAnswer.length) || 0 : wordLength || 0;\n    if (length === 0) {\n      console.warn(`No valid word length for row ${selectedRowNumber}`);\n      return;\n    }\n    setCellStyles(prev => {\n      const newStyles = {\n        ...prev\n      };\n      if (isRow) {\n        // Horizontal: style cells from colIndex + 1 to colIndex + length\n        for (let col = colIndex + 1; col <= colIndex + length; col++) {\n          var _grid$rowIndex$col;\n          const key = `${rowIndex}-${col}`;\n          // Skip empty and number cells\n          if (grid[rowIndex][col] !== \"\" && !((_grid$rowIndex$col = grid[rowIndex][col]) !== null && _grid$rowIndex$col !== void 0 && _grid$rowIndex$col.includes(\"number\"))) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: col.toString() === markedCharacterIndex ? \"text-red-600\" : \"text-black\"\n              };\n            }\n          }\n        }\n      } else {\n        // Vertical: style cells from rowIndex + 1 to rowIndex + length\n        for (let row = rowIndex + 1; row <= rowIndex + length; row++) {\n          var _grid$row$colIndex;\n          const key = `${row}-${colIndex}`;\n          // Skip empty and number cells\n          if (grid[row][colIndex] !== \"\" && !((_grid$row$colIndex = grid[row][colIndex]) !== null && _grid$row$colIndex !== void 0 && _grid$row$colIndex.includes(\"number\"))) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: row.toString() === markedCharacterIndex ? \"text-red-600\" : \"text-black\"\n              };\n            }\n          }\n        }\n      }\n      return newStyles;\n    });\n\n    // For \"correct\", update grid to show the actual word\n    if (action === \"correct\" && correctAnswer) {\n      setGrid(prevGrid => {\n        const newGrid = prevGrid.map(row => [...row]);\n        if (isRow) {\n          for (let col = colIndex + 1, i = 0; col <= colIndex + length && i < correctAnswer.length; col++, i++) {\n            newGrid[rowIndex][col] = correctAnswer[i];\n          }\n        } else {\n          for (let row = rowIndex + 1, i = 0; row <= rowIndex + length && i < correctAnswer.length; row++, i++) {\n            newGrid[row][colIndex] = correctAnswer[i];\n          }\n        }\n        return newGrid;\n      });\n    }\n  };\n  useEffect(() => {\n    if (hintWordArray) {\n      hintWordArray.forEach((word, index) => {\n        console.log(`Word ${index}: '${word}' has length: ${word.length}`);\n        console.log([...word]);\n      });\n      const lengthArray = hintWordArray.map(word => word.length);\n      setHintWordsLength(lengthArray);\n    }\n  }, [hintWordArray]);\n  useEffect(() => {\n    const unsubscribePlayers = listenToQuestions(roomId, question => {\n      setCurrentQuestion(question);\n      console.log(\"current question\", question);\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  // Listen for \"open\" (select) signal\n  useEffect(() => {\n    const unsubscribeSelect = listenToSelectRow(roomId, data => {\n      if (!initialGrid || !grid) return;\n      let rowIndex = -1;\n      let colIndex = -1;\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"open\", data.selected_row_number, data.is_row, data.word_length);\n    });\n    return () => {\n      unsubscribeSelect();\n    };\n  }, [initialGrid, grid, roomId]);\n\n  // Listen for \"incorrect\" signal\n  useEffect(() => {\n    const unsubscribeIncorrect = listenToIncorrectRow(roomId, data => {\n      if (!initialGrid || !grid) return;\n      let rowIndex = -1;\n      let colIndex = -1;\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"incorrect\", data.selected_row_number, data.is_row, data.word_length);\n    });\n    return () => {\n      unsubscribeIncorrect();\n    };\n  }, [initialGrid, grid, roomId]);\n\n  // Listen for \"correct\" signal\n  useEffect(() => {\n    const unsubscribeCorrect = listenToCorrectRow(roomId, data => {\n      if (!initialGrid || !grid) return;\n      let rowIndex = -1;\n      let colIndex = -1;\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"correct\", data.selected_row_number, data.is_row, undefined, data.correct_answer);\n    });\n    return () => {\n      unsubscribeCorrect();\n    };\n  }, [initialGrid, grid, roomId]);\n  // Initialize grid\n  useEffect(() => {\n    if (isHost) {\n      const wordList = [\"GIÓ\", \"HẠTGIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂUKIỆTLUÂN\"];\n      console.log(\"wordList\", wordList);\n      console.log(\"hintWordArray\", hintWordArray);\n      if (hintWordArray && obstacleWord) {\n        const {\n          randomHintWords,\n          newGrid\n        } = renderGrid(hintWordArray, obstacleWord, GRID_SIZE);\n        console.log(\"randomHintWords\", randomHintWords);\n        console.log(\"newGrid\", newGrid);\n        setHintWords(randomHintWords);\n        const unrevealGrid = newGrid.map(row => row.map(cell => {\n          if (typeof cell === 'string' && cell.startsWith('number')) {\n            return cell; // Keep elements starting with \"number\"\n          }\n          return cell === '' ? \"\" : \"1\"; // 0 for empty string, 1 for non-empty\n        }));\n        setInitialGrid(unrevealGrid);\n        setGrid(newGrid);\n      }\n    } else {\n      if (initialGrid) {\n        setGrid(initialGrid);\n      }\n    }\n  }, [isHost, hintWordArray, obstacleWord, initialGrid, setInitialGrid]);\n\n  // Reveal cells in a row or column\n\n  // Handle number click to show menu\n  const handleNumberClick = (rowIndex, colIndex) => {\n    if (!isHost) return;\n    setMenu({\n      visible: true,\n      rowIndex,\n      colIndex\n    });\n  };\n\n  // Handle menu actions\n  const handleMenuAction = (action, rowIndex, colIndex, hintWordNumber) => {\n    revealCells(rowIndex, colIndex, action, hintWordNumber);\n    setMenu({\n      visible: false\n    });\n  };\n\n  // Handle cell click to reveal\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (!isHost) return;\n    revealCells(rowIndex, colIndex, \"open\");\n  };\n\n  // Close menu on outside click\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setMenu({\n          visible: false\n        });\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6 relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\",\n      children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map((cell, colIndex) => {\n          const cellKey = `${rowIndex}-${colIndex}`;\n          const cellStyle = cellStyles[cellKey] || {\n            background: cell === \"\" ? \"bg-white\" : \"bg-gray-50\",\n            textColor: cell.includes(\"number\") ? \"text-blue-500\" : \"text-transparent\"\n          };\n          const showMenu = menu.visible && menu.rowIndex === rowIndex && menu.colIndex === colIndex && cell.includes(\"number\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `w-10 h-10 flex items-center justify-center text-lg font-semibold select-none\n                      ${cell.includes(\"number\") ? \"text-blue-500 border-none\" : \"\"}\n                      ${cell.includes(\"number\") ? \"\" : cellStyle.background}\n                      ${cell.includes(\"number\") ? \"text-blue-500\" : cellStyle.textColor}\n                      ${obstacleWord !== null && obstacleWord !== void 0 && obstacleWord.includes(cell) && cellStyle.textColor === \"text-black\" && !cell.includes(\"number\") && isNaN(Number(cell)) ? \"font-bold text-red-500\" : \"\"}\n                    `,\n              onClick: () => {\n                if (isHost) {\n                  if (cell.includes(\"number\")) {\n                    handleNumberClick(rowIndex, colIndex);\n                  } else {\n                    handleCellClick(rowIndex, colIndex);\n                  }\n                }\n              },\n              style: {\n                cursor: isHost && (cell.includes(\"number\") || hintWords.some(word => word.y === rowIndex || word.x === colIndex)) ? \"pointer\" : \"default\"\n              },\n              children: cell.includes(\"number\") ? cell.replace(\"number\", \"\").trim() : cell\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 19\n            }, this), showMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: menuRef,\n              className: \"absolute left-12 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\",\n                onClick: () => handleMenuAction(\"open\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"SELECT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 498,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600\",\n                onClick: () => handleMenuAction(\"correct\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"Correct\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600\",\n                onClick: () => handleMenuAction(\"incorrect\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"Incorrect\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 21\n            }, this)]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 17\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 439,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionBoxRound2, \"5terffh6GRGw2t7Zm3FMo8i4sL4=\", false, function () {\n  return [useSearchParams, usePlayer];\n});\n_c = QuestionBoxRound2;\nexport default QuestionBoxRound2;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound2\");","map":{"version":3,"names":["React","useState","useEffect","useRef","renderGrid","usePlayer","setSelectedRow","setCorrectRow","setIncorectRow","listenToCorrectRow","listenToIncorrectRow","listenToSelectRow","listenToQuestions","useSearchParams","jsxDEV","_jsxDEV","mainKeyword","QuestionBoxRound2","obstacleWord","hintWordArray","initialGrid","isHost","_s","console","log","searchParams","setInitialGrid","roomId","get","testName","GRID_SIZE","generateEmptyGrid","Array","fill","map","grid","setGrid","hintWords","setHintWords","currentQuestion","setCurrentQuestion","cellStyles","setCellStyles","menu","setMenu","visible","hintWordsLength","setHintWordsLength","menuRef","revealCells","rowIndex","colIndex","action","hintWordNumber","hintWordIndex","parseInt","hintWord","find","word","y","direction","x","isRow","wordLength","length","startIndex","prev","newStyles","col","key","includes","background","textColor","indexInTarget","i","char","indexOf","toString","row","revealCellsForPlayer","selectedRowNumber","correctAnswer","markedCharacterIndex","warn","_grid$rowIndex$col","_grid$row$colIndex","prevGrid","newGrid","forEach","index","lengthArray","unsubscribePlayers","question","unsubscribeSelect","data","selected_row_number","is_row","word_length","unsubscribeIncorrect","unsubscribeCorrect","undefined","correct_answer","wordList","randomHintWords","unrevealGrid","cell","startsWith","handleNumberClick","handleMenuAction","handleCellClick","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","cellKey","cellStyle","showMenu","isNaN","Number","onClick","style","cursor","some","replace","trim","ref","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round2.tsx"],"sourcesContent":["import Play from \"../Play\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { renderGrid } from \"./utils\";\r\nimport { usePlayer } from \"../../context/playerContext\";\r\nimport { setSelectedRow, setCorrectRow, setIncorectRow } from \"../../components/services\";\r\nimport { listenToCorrectRow, listenToIncorrectRow, listenToSelectRow, listenToQuestions } from \"../../services/firebaseServices\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { getNextQuestion } from \"../../pages/Host/Test/service\";\r\n\r\n\r\ninterface HintWord {\r\n  word: string;\r\n  x: number;\r\n  y: number;\r\n  direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n  obstacleWord?: string;\r\n  hintWordArray?: string[];\r\n  isHost?: boolean;\r\n  initialGrid?: string[][];\r\n}\r\n\r\ninterface QuestionBoxProps {\r\n  question: string;\r\n  imageUrl?: string;\r\n  isHost?: boolean\r\n}\r\n\r\nconst mainKeyword = \"BÒCÔNGANH\";\r\n\r\nconst QuestionBoxRound2: React.FC<ObstacleQuestionBoxProps> = ({\r\n  obstacleWord = mainKeyword,\r\n  hintWordArray,\r\n  initialGrid,\r\n  isHost = false,\r\n}) => {\r\n  console.log(\"hintWordArray\", typeof hintWordArray);\r\n  console.log(\"obstacle\", obstacleWord);\r\n\r\n  const [searchParams] = useSearchParams();\r\n  const { setInitialGrid } = usePlayer();\r\n  const roomId = searchParams.get(\"roomId\") || \"\";\r\n  const testName = searchParams.get(\"testName\") || \"\"\r\n  const GRID_SIZE = 20;\r\n\r\n  const generateEmptyGrid = () => {\r\n    return Array(GRID_SIZE)\r\n      .fill(null)\r\n      .map(() => Array(GRID_SIZE).fill(\"\"));\r\n  };\r\n\r\n  const [grid, setGrid] = useState<string[][]>(generateEmptyGrid());\r\n  const [hintWords, setHintWords] = useState<HintWord[]>([]);\r\n  const [currentQuestion, setCurrentQuestion] = useState<QuestionBoxProps>()\r\n  const [cellStyles, setCellStyles] = useState<\r\n    Record<string, { background: string; textColor: string }>\r\n  >({}); // Tracks background and text styles\r\n  const [menu, setMenu] = useState<{\r\n    visible: boolean;\r\n    rowIndex?: number;\r\n    colIndex?: number;\r\n  }>({ visible: false });\r\n  const [hintWordsLength, setHintWordsLength] = useState<number[]>([]);\r\n\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n\r\n  const revealCells = (\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    action: \"open\" | \"correct\" | \"incorrect\",\r\n    hintWordNumber?: string\r\n  ) => {\r\n    if (!isHost) return;\r\n\r\n    const hintWordIndex = hintWordNumber ? parseInt(hintWordNumber) - 1 : -1;\r\n    const hintWord = hintWords.find(\r\n      (word) =>\r\n        (word.y === rowIndex && word.direction === \"horizontal\") ||\r\n        (word.x === colIndex && word.direction === \"vertical\")\r\n    );\r\n\r\n    if (!hintWord) return;\r\n\r\n    const isRow = hintWord.direction === \"horizontal\";\r\n    const wordLength =\r\n      hintWordIndex >= 0 && hintWordArray ? hintWordArray[hintWordIndex].length : hintWord.word.length;\r\n    const startIndex = isRow ? colIndex + 1 : rowIndex + 1;\r\n\r\n    setCellStyles((prev) => {\r\n      const newStyles = { ...prev };\r\n      if (isRow) {\r\n        for (let col = startIndex; col < startIndex + wordLength; col++) {\r\n          const key = `${rowIndex}-${col}`;\r\n          // Skip number cells to preserve their appearance\r\n          if (!grid[rowIndex][col].includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber){\r\n                setSelectedRow(roomId, hintWordNumber, true,wordLength)\r\n                \r\n              }\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-black\" };\r\n              let indexInTarget = 0\r\n              if (hintWordArray)\r\n                for (let i = 0; i < hintWordArray[hintWordIndex].length; i++) {\r\n                  const char = hintWordArray[hintWordIndex][i];\r\n                  indexInTarget = obstacleWord.indexOf(char);\r\n\r\n                  if (indexInTarget !== -1) {\r\n                    console.log(`First matching character: ${char}`);\r\n                    console.log(`Index in \"${obstacleWord}\": ${indexInTarget}`);\r\n                    break;\r\n                  }\r\n                }\r\n              if (hintWordArray && hintWordNumber)\r\n                setCorrectRow(roomId, hintWordNumber, hintWordArray[hintWordIndex], indexInTarget.toString(), true, wordLength)\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setIncorectRow(roomId, hintWordNumber, true, wordLength)\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        for (let row = startIndex; row < startIndex + wordLength; row++) {\r\n          const key = `${row}-${colIndex}`;\r\n          // Skip number cells to preserve their appearance\r\n          if (!grid[row][colIndex].includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setSelectedRow(roomId, hintWordNumber, false, wordLength)\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-black\" };\r\n              let indexInTarget = 0\r\n              if (hintWordArray)\r\n                for (let i = 0; i < hintWordArray[hintWordIndex].length; i++) {\r\n                  const char = hintWordArray[hintWordIndex][i];\r\n                  indexInTarget = obstacleWord.indexOf(char);\r\n\r\n                  if (indexInTarget !== -1) {\r\n                    console.log(`First matching character: ${char}`);\r\n                    console.log(`Index in \"${obstacleWord}\": ${indexInTarget}`);\r\n                    break;\r\n                  }\r\n                }\r\n              if (hintWordArray && hintWordNumber)\r\n                setCorrectRow(roomId, hintWordNumber, hintWordArray[hintWordIndex], indexInTarget.toString(), false, wordLength)\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setIncorectRow(roomId, hintWordNumber, false, wordLength)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return newStyles;\r\n    });\r\n\r\n    // if (action === \"correct\" || action === \"incorrect\") {\r\n    //   setSelectedRow(roomId, isRow ? rowIndex.toString() : colIndex.toString());\r\n    // }\r\n  };\r\n\r\n\r\n  const revealCellsForPlayer = (\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    action: \"open\" | \"incorrect\" | \"correct\",\r\n    selectedRowNumber: string,\r\n    isRow: boolean,\r\n    wordLength?: number, // For open and incorrect\r\n    correctAnswer?: string, // For correct\r\n    markedCharacterIndex?:string\r\n  ) => {\r\n    if (isHost) return; // Ensure this runs only for players\r\n  \r\n    // Determine word length\r\n    const length = action === \"correct\" ? correctAnswer?.length || 0 : wordLength || 0;\r\n  \r\n    if (length === 0) {\r\n      console.warn(`No valid word length for row ${selectedRowNumber}`);\r\n      return;\r\n    }\r\n  \r\n    setCellStyles((prev) => {\r\n      const newStyles = { ...prev };\r\n      if (isRow) {\r\n        // Horizontal: style cells from colIndex + 1 to colIndex + length\r\n        for (let col = colIndex + 1; col <= colIndex + length; col++) {\r\n          const key = `${rowIndex}-${col}`;\r\n          // Skip empty and number cells\r\n          if (grid[rowIndex][col] !== \"\" && !grid[rowIndex][col]?.includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { \r\n                background: \"bg-yellow-200\", \r\n                textColor: col.toString() === markedCharacterIndex ? \"text-red-600\" : \"text-black\"\r\n              };\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // Vertical: style cells from rowIndex + 1 to rowIndex + length\r\n        for (let row = rowIndex + 1; row <= rowIndex + length; row++) {\r\n          const key = `${row}-${colIndex}`;\r\n          // Skip empty and number cells\r\n          if (grid[row][colIndex] !== \"\" && !grid[row][colIndex]?.includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { \r\n                background: \"bg-yellow-200\", \r\n                textColor: row.toString() === markedCharacterIndex ? \"text-red-600\" : \"text-black\"\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return newStyles;\r\n    });\r\n  \r\n    // For \"correct\", update grid to show the actual word\r\n    if (action === \"correct\" && correctAnswer) {\r\n      setGrid((prevGrid) => {\r\n        const newGrid = prevGrid.map((row) => [...row]);\r\n        if (isRow) {\r\n          for (let col = colIndex + 1, i = 0; col <= colIndex + length && i < correctAnswer.length; col++, i++) {\r\n            newGrid[rowIndex][col] = correctAnswer[i];\r\n          }\r\n        } else {\r\n          for (let row = rowIndex + 1, i = 0; row <= rowIndex + length && i < correctAnswer.length; row++, i++) {\r\n            newGrid[row][colIndex] = correctAnswer[i];\r\n          }\r\n        }\r\n        return newGrid;\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (hintWordArray) {\r\n      hintWordArray.forEach((word, index) => {\r\n        console.log(`Word ${index}: '${word}' has length: ${word.length}`);\r\n        console.log([...word]);\r\n      });\r\n      const lengthArray = hintWordArray.map((word) => word.length);\r\n      setHintWordsLength(lengthArray);\r\n    }\r\n  }, [hintWordArray]);\r\n\r\n\r\n  useEffect(() => {\r\n    const unsubscribePlayers = listenToQuestions(roomId, (question) => {\r\n        setCurrentQuestion(question)\r\n        console.log(\"current question\", question)\r\n        \r\n    });\r\n\r\n    // No need to set state here; it's handled by useState initializer\r\n    return () => {\r\n        unsubscribePlayers();\r\n    };\r\n}, []);\r\n  // Listen for \"open\" (select) signal\r\nuseEffect(() => {\r\n  const unsubscribeSelect = listenToSelectRow(roomId, (data) => {\r\n    if (!initialGrid || !grid) return;\r\n\r\n    let rowIndex = -1;\r\n    let colIndex = -1;\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid[row].length; col++) {\r\n        if (grid[row][col] === `number${data.selected_row_number}`) {\r\n          rowIndex = row;\r\n          colIndex = col;\r\n          break;\r\n        }\r\n      }\r\n      if (rowIndex !== -1) break;\r\n    }\r\n\r\n    if (rowIndex === -1 || colIndex === -1) {\r\n      console.warn(`Number cell number${data.selected_row_number} not found`);\r\n      return;\r\n    }\r\n\r\n    revealCellsForPlayer(rowIndex, colIndex, \"open\", data.selected_row_number, data.is_row, data.word_length);\r\n  });\r\n\r\n  return () => {\r\n    unsubscribeSelect();\r\n  };\r\n}, [initialGrid, grid, roomId]);\r\n\r\n// Listen for \"incorrect\" signal\r\nuseEffect(() => {\r\n  const unsubscribeIncorrect = listenToIncorrectRow(roomId, (data) => {\r\n    if (!initialGrid || !grid) return;\r\n\r\n    let rowIndex = -1;\r\n    let colIndex = -1;\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid[row].length; col++) {\r\n        if (grid[row][col] === `number${data.selected_row_number}`) {\r\n          rowIndex = row;\r\n          colIndex = col;\r\n          break;\r\n        }\r\n      }\r\n      if (rowIndex !== -1) break;\r\n    }\r\n\r\n    if (rowIndex === -1 || colIndex === -1) {\r\n      console.warn(`Number cell number${data.selected_row_number} not found`);\r\n      return;\r\n    }\r\n\r\n    revealCellsForPlayer(rowIndex, colIndex, \"incorrect\", data.selected_row_number, data.is_row, data.word_length);\r\n  });\r\n\r\n  return () => {\r\n    unsubscribeIncorrect();\r\n  };\r\n}, [initialGrid, grid, roomId]);\r\n\r\n// Listen for \"correct\" signal\r\nuseEffect(() => {\r\n  const unsubscribeCorrect = listenToCorrectRow(\r\n    roomId,\r\n    (data) => {\r\n      if (!initialGrid || !grid) return;\r\n\r\n      let rowIndex = -1;\r\n      let colIndex = -1;\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col] === `number${data.selected_row_number}`) {\r\n            rowIndex = row;\r\n            colIndex = col;\r\n            break;\r\n          }\r\n        }\r\n        if (rowIndex !== -1) break;\r\n      }\r\n\r\n      if (rowIndex === -1 || colIndex === -1) {\r\n        console.warn(`Number cell number${data.selected_row_number} not found`);\r\n        return;\r\n      }\r\n\r\n      revealCellsForPlayer(rowIndex, colIndex, \"correct\", data.selected_row_number, data.is_row, undefined, data.correct_answer);\r\n    }\r\n  );\r\n\r\n  return () => {\r\n    unsubscribeCorrect();\r\n  };\r\n}, [initialGrid, grid, roomId]);\r\n  // Initialize grid\r\n  useEffect(() => {\r\n    if (isHost) {\r\n      const wordList = [\"GIÓ\", \"HẠTGIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂUKIỆTLUÂN\"];\r\n      console.log(\"wordList\", wordList);\r\n      console.log(\"hintWordArray\", hintWordArray);\r\n      if (hintWordArray && obstacleWord) {\r\n        const { randomHintWords, newGrid } = renderGrid(hintWordArray, obstacleWord, GRID_SIZE);\r\n        console.log(\"randomHintWords\", randomHintWords);\r\n        console.log(\"newGrid\", newGrid);\r\n        setHintWords(randomHintWords);\r\n\r\n        const unrevealGrid = newGrid.map(row =>\r\n          row.map(cell => {\r\n            if (typeof cell === 'string' && cell.startsWith('number')) {\r\n              return cell; // Keep elements starting with \"number\"\r\n            }\r\n            return cell === '' ? \"\" : \"1\"; // 0 for empty string, 1 for non-empty\r\n          })\r\n        );\r\n        setInitialGrid(unrevealGrid);\r\n        setGrid(newGrid);\r\n      }\r\n    } else {\r\n      if (initialGrid) {\r\n        setGrid(initialGrid);\r\n      }\r\n    }\r\n  }, [isHost, hintWordArray, obstacleWord, initialGrid, setInitialGrid]);\r\n\r\n  // Reveal cells in a row or column\r\n\r\n\r\n  // Handle number click to show menu\r\n  const handleNumberClick = (rowIndex: number, colIndex: number) => {\r\n    if (!isHost) return;\r\n    setMenu({\r\n      visible: true,\r\n      rowIndex,\r\n      colIndex,\r\n    });\r\n  };\r\n\r\n  // Handle menu actions\r\n  const handleMenuAction = (\r\n    action: \"open\" | \"correct\" | \"incorrect\",\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    hintWordNumber: string\r\n  ) => {\r\n    revealCells(rowIndex, colIndex, action, hintWordNumber);\r\n    setMenu({ visible: false });\r\n  };\r\n\r\n  // Handle cell click to reveal\r\n  const handleCellClick = (rowIndex: number, colIndex: number) => {\r\n    if (!isHost) return;\r\n    revealCells(rowIndex, colIndex, \"open\");\r\n  };\r\n\r\n  // Close menu on outside click\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n        setMenu({ visible: false });\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6 relative\">\r\n      <div className=\"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\">\r\n        {currentQuestion?.question}\r\n      </div>\r\n      <div className=\"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\">\r\n        {grid.map((row, rowIndex) => (\r\n          <React.Fragment key={rowIndex}>\r\n            {row.map((cell, colIndex) => {\r\n              const cellKey = `${rowIndex}-${colIndex}`;\r\n              const cellStyle = cellStyles[cellKey] || {\r\n                background: cell === \"\" ? \"bg-white\" : \"bg-gray-50\",\r\n                textColor: cell.includes(\"number\") ? \"text-blue-500\" : \"text-transparent\",\r\n              };\r\n\r\n              const showMenu =\r\n                menu.visible &&\r\n                menu.rowIndex === rowIndex &&\r\n                menu.colIndex === colIndex &&\r\n                cell.includes(\"number\");\r\n\r\n              return (\r\n                <div className=\"relative flex items-center\" key={colIndex}>\r\n                  <div\r\n                    className={`w-10 h-10 flex items-center justify-center text-lg font-semibold select-none\r\n                      ${cell.includes(\"number\") ? \"text-blue-500 border-none\" : \"\"}\r\n                      ${cell.includes(\"number\") ? \"\" : cellStyle.background}\r\n                      ${cell.includes(\"number\") ? \"text-blue-500\" : cellStyle.textColor}\r\n                      ${obstacleWord?.includes(cell) &&\r\n                        cellStyle.textColor === \"text-black\" &&\r\n                        !cell.includes(\"number\") &&\r\n                        isNaN(Number(cell))\r\n                        ? \"font-bold text-red-500\"\r\n                        : \"\"}\r\n                    `}\r\n                    onClick={() => {\r\n                      if (isHost) {\r\n                        if (cell.includes(\"number\")) {\r\n                          handleNumberClick(rowIndex, colIndex);\r\n                        } else {\r\n                          handleCellClick(rowIndex, colIndex);\r\n                        }\r\n                      }\r\n                    }}\r\n                    style={{\r\n                      cursor:\r\n                        isHost &&\r\n                          (cell.includes(\"number\") ||\r\n                            hintWords.some((word) => word.y === rowIndex || word.x === colIndex))\r\n                          ? \"pointer\"\r\n                          : \"default\",\r\n                    }}\r\n                  >\r\n                    {cell.includes(\"number\") ? cell.replace(\"number\", \"\").trim() : cell}\r\n                  </div>\r\n                  {showMenu && (\r\n                    <div\r\n                      ref={menuRef}\r\n                      className=\"absolute left-12 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\"\r\n                    >\r\n                      <button\r\n                        className=\"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n                        onClick={() =>\r\n                          handleMenuAction(\"open\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                        }\r\n                      >\r\n                        SELECT\r\n                      </button>\r\n                      <button\r\n                        className=\"px-2 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600\"\r\n                        onClick={() =>\r\n                          handleMenuAction(\"correct\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                        }\r\n                      >\r\n                        Correct\r\n                      </button>\r\n                      <button\r\n                        className=\"px-2 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600\"\r\n                        onClick={() =>\r\n                          handleMenuAction(\"incorrect\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                        }\r\n                      >\r\n                        Incorrect\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </React.Fragment>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionBoxRound2;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}