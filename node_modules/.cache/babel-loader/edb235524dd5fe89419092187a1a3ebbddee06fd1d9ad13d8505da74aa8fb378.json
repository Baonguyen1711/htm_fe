{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { usePlayer } from \"../../context/playerContext\";\nimport { setSelectedRow, setCorrectRow, setIncorectRow } from \"../../components/services\";\nimport { listenToCorrectRow, listenToIncorrectRow, listenToSelectRow, listenToQuestions, listenToObstacle } from \"../../services/firebaseServices\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { getNextQuestion } from \"../../pages/Host/Test/service\";\nimport { openObstacle } from \"../../components/services\";\nimport { generateGrid } from \"../../pages/User/Round2/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nconst mainKeyword = \"BÒCÔNGANH\";\nconst QuestionBoxRound2 = ({\n  obstacleWord,\n  hintWordArray,\n  initialGrid,\n  isHost = false\n}) => {\n  _s();\n  console.log(\"initialGrid inside player\", initialGrid);\n  const [searchParams] = useSearchParams();\n  const {\n    setInitialGrid\n  } = usePlayer();\n  const roomId = searchParams.get(\"roomId\") || \"\";\n  const testName = searchParams.get(\"testName\") || \"\";\n  const GRID_SIZE = 20;\n  const [grid, setGrid] = useState([[]]);\n  const [hintWords, setHintWords] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState();\n  const [cellStyles, setCellStyles] = useState({}); // Tracks background and text styles\n  const [menu, setMenu] = useState({\n    visible: false\n  });\n  const [hintWordsLength, setHintWordsLength] = useState([]);\n  const [markedCharacters, setMarkedCharacters] = useState({});\n  useEffect(() => {\n    const markedCharactersMap = {};\n    if (hintWordArray) {\n      for (const word of hintWordArray) {\n        const presentArray = [];\n        for (let i = 0; i < word.length; i++) {\n          if (obstacleWord !== null && obstacleWord !== void 0 && obstacleWord.includes(word[i])) {\n            presentArray.push(i);\n          }\n        }\n        markedCharactersMap[word] = presentArray;\n      }\n    }\n    const keys = Object.keys(markedCharactersMap);\n    const shuffled = keys.sort(() => Math.random() - 0.5);\n    const selectedKeys = shuffled.slice(0, 3);\n    const filteredMap = {};\n    for (const key of selectedKeys) {\n      filteredMap[key] = markedCharactersMap[key];\n    }\n    setMarkedCharacters(filteredMap);\n  }, [hintWordArray, obstacleWord]);\n  useEffect(() => {\n    const generateInitialGrid = async () => {\n      if (hintWordArray) {\n        if (isHost) {\n          console.log(\"hintWordArray\", hintWordArray);\n          console.log(\"obstacle\", obstacleWord);\n          const result = await generateGrid(hintWordArray, 20);\n          console.log(\"board\", result.grid);\n          setHintWords(result.placementArray);\n          setGrid(result.grid);\n          const blankGrid = result.grid.map((row, rowIndex) => row.map((cell, colIndex) => result.grid[rowIndex][colIndex].includes(\"number\") ? cell :\n          // Keep \"numberX\"\n          cell !== \" \" && cell !== \"\" ? \"1\" : \"\" // Non-empty to \"1\", empty stays \"\"\n          ));\n          setInitialGrid(blankGrid);\n        }\n      }\n      if (initialGrid) {\n        setGrid(initialGrid);\n      }\n    };\n    generateInitialGrid();\n  }, [hintWordArray, obstacleWord, initialGrid]);\n  const menuRef = useRef(null);\n  const revealCells = (rowIndex, colIndex, action, hintWordNumber) => {\n    if (!isHost) return;\n    const hintWordIndex = hintWordNumber ? parseInt(hintWordNumber) : -1;\n    const hintWord = hintWords.find(word => word.index === hintWordIndex);\n    console.log(\"hintWord\", hintWord);\n    console.log(\"hintWords\", hintWords);\n    if (!hintWord) return;\n    const isRow = hintWord.dir === 1;\n    console.log(hintWord, \"is\", hintWord.dir);\n    const wordLength = hintWord.string.length - 3;\n    const startIndex = isRow ? colIndex + 1 : rowIndex + 1;\n    const handleNextQuestion = async (testName, hintWordIndex, round, roomId) => {\n      await getNextQuestion(testName, hintWordIndex, round, roomId);\n    };\n    setCellStyles(prev => {\n      const newStyles = {\n        ...prev\n      };\n      if (isRow) {\n        for (let col = startIndex; col < startIndex + wordLength; col++) {\n          if (col == GRID_SIZE) break;\n          const key = `${rowIndex}-${col}`;\n          // Skip number cells to preserve their appearance\n          console.log(\"grid[rowIndex][col]\", grid[rowIndex][col]);\n          console.log(\"rowIndex\", rowIndex);\n          console.log(\"col\", col);\n          if (!grid[rowIndex][col].includes(\"number\")) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) {\n                setSelectedRow(roomId, hintWordNumber, true, wordLength);\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId);\n              }\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-black\"\n              };\n              let indexInTarget = [];\n              if (hintWordArray) for (let i = 2; i < wordLength; i++) {\n                const char = hintWord.char[i];\n                if (obstacleWord) {\n                  if (obstacleWord.includes(char)) {\n                    indexInTarget.push(i);\n                  }\n                }\n              }\n              if (hintWordArray && hintWordNumber) {\n                console.log(\"hintWordNumber\", hintWordNumber);\n                console.log(\"hintWord\", hintWord);\n                console.log(\"hintWord.string.slice(2, hintWord.string.length-1)\", hintWord.string.slice(2, hintWord.string.length - 1));\n                setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), true, wordLength);\n              }\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setIncorectRow(roomId, hintWordNumber, true, wordLength);\n            }\n          }\n        }\n      } else {\n        for (let row = startIndex; row < startIndex + wordLength; row++) {\n          if (row == GRID_SIZE) break;\n          const key = `${row}-${colIndex}`;\n          console.log(\"grid[row][colIndex]\", grid[row][colIndex]);\n          console.log(\"colIndex\", colIndex);\n          console.log(\"row\", row);\n          // Skip number cells to preserve their appearance\n          if (!grid[row][colIndex].includes(\"number\")) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) {\n                setSelectedRow(roomId, hintWordNumber, false, wordLength);\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId);\n              }\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-black\"\n              };\n              let indexInTarget = [];\n              if (hintWordArray) for (let i = 0; i < hintWordArray[hintWordIndex].length; i++) {\n                const char = hintWordArray[hintWordIndex][i];\n                if (obstacleWord) {\n                  if (obstacleWord.includes(char)) {\n                    indexInTarget.push(i);\n                  }\n                }\n              }\n              if (hintWordArray && hintWordNumber) setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), false, wordLength);\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setIncorectRow(roomId, hintWordNumber, false, wordLength);\n            }\n          }\n        }\n      }\n      return newStyles;\n    });\n\n    // if (action === \"correct\" || action === \"incorrect\") {\n    //   setSelectedRow(roomId, isRow ? rowIndex.toString() : colIndex.toString());\n    // }\n  };\n  const revealCellsForPlayer = (rowIndex, colIndex, action, selectedRowNumber, markedCharacterIndex, isRow, wordLength, correctAnswer // For correct\n  ) => {\n    if (isHost) return; // Ensure this runs only for players\n\n    // Determine word length\n    const length = action === \"correct\" ? (correctAnswer === null || correctAnswer === void 0 ? void 0 : correctAnswer.length) || 0 : wordLength || 0;\n    if (length === 0) {\n      console.warn(`No valid word length for row ${selectedRowNumber}`);\n      return;\n    }\n    setCellStyles(prev => {\n      const newStyles = {\n        ...prev\n      };\n      if (isRow) {\n        // Horizontal: style cells from colIndex + 1 to colIndex + length\n        for (let col = colIndex + 1; col <= colIndex + length; col++) {\n          var _grid$rowIndex$col;\n          const key = `${rowIndex}-${col}`;\n          // Skip empty and number cells\n          if (grid[rowIndex][col] !== \"\" && !((_grid$rowIndex$col = grid[rowIndex][col]) !== null && _grid$rowIndex$col !== void 0 && _grid$rowIndex$col.includes(\"number\"))) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: JSON.parse(decodeURIComponent(markedCharacterIndex)).includes(col) ? \"text-red-600\" : \"text-black\"\n              };\n            }\n          }\n        }\n      } else {\n        // Vertical: style cells from rowIndex + 1 to rowIndex + length\n        for (let row = rowIndex + 1; row <= rowIndex + length; row++) {\n          var _grid$row$colIndex;\n          const key = `${row}-${colIndex}`;\n          // Skip empty and number cells\n          if (grid[row][colIndex] !== \"\" && !((_grid$row$colIndex = grid[row][colIndex]) !== null && _grid$row$colIndex !== void 0 && _grid$row$colIndex.includes(\"number\"))) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: JSON.parse(decodeURIComponent(markedCharacterIndex)).includes(row) ? \"text-red-600\" : \"text-black\"\n              };\n            }\n          }\n        }\n      }\n      return newStyles;\n    });\n\n    // For \"correct\", update grid to show the actual word\n    if (action === \"correct\" && correctAnswer) {\n      setGrid(prevGrid => {\n        const newGrid = prevGrid.map(row => [...row]);\n        if (isRow) {\n          for (let col = colIndex + 1, i = 0; col <= colIndex + length && i < correctAnswer.length; col++, i++) {\n            newGrid[rowIndex][col] = correctAnswer[i];\n          }\n        } else {\n          for (let row = rowIndex + 1, i = 0; row <= rowIndex + length && i < correctAnswer.length; row++, i++) {\n            newGrid[row][colIndex] = correctAnswer[i];\n          }\n        }\n        return newGrid;\n      });\n    }\n  };\n  // useEffect(() => {\n  //   if (hintWordArray) {\n  //     hintWordArray.forEach((word, index) => {\n  //       console.log(`Word ${index}: '${word}' has length: ${word.length}`);\n  //       console.log([...word]);\n  //     });\n  //     const lengthArray = hintWordArray.map((word) => word.length);\n  //     setHintWordsLength(lengthArray);\n  //   }\n  // }, [hintWordArray]);\n\n  useEffect(() => {\n    const unsubscribePlayers = listenToObstacle(roomId, obstacle => {\n      // setCurrentQuestion(question)\n      // console.log(\"current question\", question)\n      const obstacleRevealed = {\n        \"question\": obstacle\n      };\n      setCurrentQuestion(obstacleRevealed);\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col].includes(\"number\")) {\n            revealCellsForPlayer(row, col, \"correct\", grid[row][col].replace(\"number\", \"\"), \"\");\n          }\n        }\n      }\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToQuestions(roomId, question => {\n      setCurrentQuestion(question);\n      console.log(\"current question\", question);\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  // Listen for \"open\" (select) signal\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeSelect = listenToSelectRow(roomId, data => {\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      let rowIndex = -1;\n      let colIndex = -1;\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"open\", data.selected_row_number, data.is_row, data.word_length);\n    });\n    return () => {\n      unsubscribeSelect();\n    };\n  }, [roomId, grid]);\n\n  // Listen for \"incorrect\" signal\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeIncorrect = listenToIncorrectRow(roomId, data => {\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      let rowIndex = -1;\n      let colIndex = -1;\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"incorrect\", data.selected_row_number, data.is_row, data.word_length);\n    });\n    return () => {\n      unsubscribeIncorrect();\n    };\n  }, [roomId, grid]);\n\n  // Listen for \"correct\" signal\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeCorrect = listenToCorrectRow(roomId, data => {\n      console.log(\"isInitialCall\", isInitialCall);\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      console.log(\"isInitialCall after\", isInitialCall);\n      let rowIndex = -1;\n      let colIndex = -1;\n      console.log(\"grid\", grid);\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"correct\", data.selected_row_number, data.is_row, undefined, data.correct_answer, data.marked_character_index);\n    });\n    return () => {\n      unsubscribeCorrect();\n    };\n  }, [roomId, grid]);\n\n  // Reveal cells in a row or column\n\n  // Handle number click to show menu\n  const handleNumberClick = (rowIndex, colIndex) => {\n    if (!isHost) return;\n    setMenu({\n      visible: true,\n      rowIndex,\n      colIndex\n    });\n  };\n\n  // Handle menu actions\n  const handleMenuAction = (action, rowIndex, colIndex, hintWordNumber) => {\n    revealCells(rowIndex, colIndex, action, hintWordNumber);\n    setMenu({\n      visible: false\n    });\n  };\n\n  // Handle cell click to reveal\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (!isHost) return;\n    revealCells(rowIndex, colIndex, \"open\");\n  };\n  const handleOpenObstacle = async () => {\n    if (!isHost || !hintWords || !hintWordArray) return;\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (Number.isFinite(Number(grid[row][col]))) {\n          revealCells(row, col, \"correct\", grid[row][col]);\n        }\n      }\n    }\n    if (obstacleWord) {\n      await openObstacle(roomId, obstacleWord);\n    }\n  };\n\n  // Close menu on outside click\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setMenu({\n          visible: false\n        });\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6 relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\",\n      children: typeof (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question) === \"string\" ? currentQuestion.question : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\",\n      children: !grid || !Array.isArray(grid) || !grid.every(row => Array.isArray(row)) ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Invalid grid data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 11\n      }, this) : grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map((cell, colIndex) => {\n          const cellKey = `${rowIndex}-${colIndex}`;\n          const cellStyle = cellStyles[cellKey] || {\n            background: cell === \"\" || cell === \" \" ? \"bg-white\" : \"bg-gray-50\",\n            textColor: cell.includes(\"number\") ? \"text-blue-500\" : \"text-transparent\"\n          };\n          const showMenu = menu.visible && menu.rowIndex === rowIndex && menu.colIndex === colIndex && cell.includes(\"number\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `w-10 h-10 flex items-center justify-center text-lg font-semibold select-none\n                      ${cell.includes(\"number\") ? \"text-blue-500 border-none\" : \"\"}\n                      ${cell.includes(\"number\") ? \"\" : cellStyle.background}\n                      ${cell.includes(\"number\") ? \"text-blue-500\" : cellStyle.textColor}\n                      ${obstacleWord !== null && obstacleWord !== void 0 && obstacleWord.includes(cell) && cellStyle.textColor === \"text-black\" && !cell.includes(\"number\") && isNaN(Number(cell)) ? \"font-bold text-red-500\" : \"\"}\n                    `,\n              onClick: () => {\n                if (isHost) {\n                  if (cell.includes(\"number\")) {\n                    handleNumberClick(rowIndex, colIndex);\n                  } else {\n                    handleCellClick(rowIndex, colIndex);\n                  }\n                }\n              },\n              style: {\n                cursor: isHost && (cell.includes(\"number\") || hintWords.some(word => word.y === rowIndex || word.x === colIndex)) ? \"pointer\" : \"default\"\n              },\n              children: typeof cell === \"string\" || typeof cell === \"number\" ? cell.includes(\"number\") ? cell.replace(\"number\", \"\") : cell : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 21\n            }, this), showMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: menuRef,\n              className: \"absolute left-12 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\",\n                onClick: () => handleMenuAction(\"open\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"SELECT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 643,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600\",\n                onClick: () => handleMenuAction(\"correct\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"Correct\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 651,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600\",\n                onClick: () => handleMenuAction(\"incorrect\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"Incorrect\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 659,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 23\n            }, this)]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 600,\n            columnNumber: 19\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 7\n    }, this), isHost && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        alert('Mở cnv!');\n        handleOpenObstacle();\n      },\n      className: \"bg-green-500 text-white p-2 flex-1 rounded-md\",\n      children: \"M\\u1EDF CNV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 572,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionBoxRound2, \"M7oSGe5ndA5w7K8AfM3YA5goy9w=\", false, function () {\n  return [useSearchParams, usePlayer];\n});\n_c = QuestionBoxRound2;\nexport default QuestionBoxRound2;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound2\");","map":{"version":3,"names":["React","useState","useEffect","useRef","usePlayer","setSelectedRow","setCorrectRow","setIncorectRow","listenToCorrectRow","listenToIncorrectRow","listenToSelectRow","listenToQuestions","listenToObstacle","useSearchParams","getNextQuestion","openObstacle","generateGrid","jsxDEV","_jsxDEV","mainKeyword","QuestionBoxRound2","obstacleWord","hintWordArray","initialGrid","isHost","_s","console","log","searchParams","setInitialGrid","roomId","get","testName","GRID_SIZE","grid","setGrid","hintWords","setHintWords","currentQuestion","setCurrentQuestion","cellStyles","setCellStyles","menu","setMenu","visible","hintWordsLength","setHintWordsLength","markedCharacters","setMarkedCharacters","markedCharactersMap","word","presentArray","i","length","includes","push","keys","Object","shuffled","sort","Math","random","selectedKeys","slice","filteredMap","key","generateInitialGrid","result","placementArray","blankGrid","map","row","rowIndex","cell","colIndex","menuRef","revealCells","action","hintWordNumber","hintWordIndex","parseInt","hintWord","find","index","isRow","dir","wordLength","string","startIndex","handleNextQuestion","round","prev","newStyles","col","background","textColor","toString","indexInTarget","char","encodeURIComponent","JSON","stringify","revealCellsForPlayer","selectedRowNumber","markedCharacterIndex","correctAnswer","warn","_grid$rowIndex$col","parse","decodeURIComponent","_grid$row$colIndex","prevGrid","newGrid","unsubscribePlayers","obstacle","obstacleRevealed","replace","question","isInitialCall","unsubscribeSelect","data","selected_row_number","is_row","word_length","unsubscribeIncorrect","unsubscribeCorrect","undefined","correct_answer","marked_character_index","handleNumberClick","handleMenuAction","handleCellClick","handleOpenObstacle","Number","isFinite","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","every","Fragment","cellKey","cellStyle","showMenu","isNaN","onClick","style","cursor","some","y","x","ref","alert","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round2.tsx"],"sourcesContent":["import Play from \"../Play\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { renderGrid } from \"./utils\";\r\nimport { usePlayer } from \"../../context/playerContext\";\r\nimport { setSelectedRow, setCorrectRow, setIncorectRow } from \"../../components/services\";\r\nimport { listenToCorrectRow, listenToIncorrectRow, listenToSelectRow, listenToQuestions, listenToObstacle } from \"../../services/firebaseServices\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { getNextQuestion } from \"../../pages/Host/Test/service\";\r\nimport { openObstacle } from \"../../components/services\";\r\nimport { generateGrid } from \"../../pages/User/Round2/utils\";\r\n\r\n\r\n\r\ninterface HintWord {\r\n  word: string;\r\n  x: number;\r\n  y: number;\r\n  direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\n\r\n\r\ninterface MatchPosition {\r\n  x: number;\r\n  y: number;\r\n  dir: number;\r\n}\r\n\r\ninterface WordObj {\r\n  string: string;\r\n  char: string[];\r\n  totalMatches: number;\r\n  effectiveMatches: number;\r\n  successfulMatches: MatchPosition[];\r\n  x: number;\r\n  y: number;\r\n  dir: number;\r\n  index: number;\r\n};\r\n\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n  obstacleWord?: string;\r\n  hintWordArray?: string[];\r\n  isHost?: boolean;\r\n  initialGrid?: string[][];\r\n}\r\n\r\ninterface QuestionBoxProps {\r\n  question: string;\r\n  imageUrl?: string;\r\n  isHost?: boolean\r\n}\r\n\r\nconst mainKeyword = \"BÒCÔNGANH\";\r\n\r\nconst QuestionBoxRound2: React.FC<ObstacleQuestionBoxProps> = ({\r\n  obstacleWord,\r\n  hintWordArray,\r\n  initialGrid,\r\n  isHost = false,\r\n}) => {\r\n  console.log(\"initialGrid inside player\", initialGrid);\r\n  const [searchParams] = useSearchParams();\r\n  const { setInitialGrid } = usePlayer();\r\n  const roomId = searchParams.get(\"roomId\") || \"\";\r\n  const testName = searchParams.get(\"testName\") || \"\"\r\n  const GRID_SIZE = 20;\r\n\r\n  const [grid, setGrid] = useState<string[][]>([[]]);\r\n  const [hintWords, setHintWords] = useState<WordObj[]>([]);\r\n  const [currentQuestion, setCurrentQuestion] = useState<QuestionBoxProps>()\r\n\r\n  const [cellStyles, setCellStyles] = useState<\r\n    Record<string, { background: string; textColor: string }>\r\n  >({}); // Tracks background and text styles\r\n  const [menu, setMenu] = useState<{\r\n    visible: boolean;\r\n    rowIndex?: number;\r\n    colIndex?: number;\r\n  }>({ visible: false });\r\n  const [hintWordsLength, setHintWordsLength] = useState<number[]>([]);\r\n  const [markedCharacters, setMarkedCharacters] = useState<Record<string, number[]>>({});\r\n\r\n  useEffect(() => {\r\n    const markedCharactersMap: { [key: string]: number[] } = {};\r\n\r\n    if (hintWordArray) {\r\n      for (const word of hintWordArray) {\r\n        const presentArray: number[] = [];\r\n\r\n        for (let i = 0; i < word.length; i++) {\r\n          if (obstacleWord?.includes(word[i])) {\r\n            presentArray.push(i);\r\n          }\r\n        }\r\n\r\n        markedCharactersMap[word] = presentArray;\r\n      }\r\n    }\r\n\r\n    const keys = Object.keys(markedCharactersMap);\r\n    const shuffled = keys.sort(() => Math.random() - 0.5);\r\n    const selectedKeys = shuffled.slice(0, 3);\r\n\r\n    const filteredMap: Record<string, number[]> = {};\r\n    for (const key of selectedKeys) {\r\n      filteredMap[key] = markedCharactersMap[key];\r\n    }\r\n\r\n    setMarkedCharacters(filteredMap);\r\n  }, [hintWordArray, obstacleWord]);\r\n\r\n  useEffect(() => {\r\n    const generateInitialGrid = async () => {\r\n      if (hintWordArray) {\r\n        if (isHost) {\r\n          console.log(\"hintWordArray\", hintWordArray);\r\n          console.log(\"obstacle\", obstacleWord);\r\n\r\n          const result = await generateGrid(hintWordArray, 20)\r\n          console.log(\"board\", result.grid);\r\n          setHintWords(result.placementArray)\r\n          setGrid(result.grid)\r\n\r\n          const blankGrid = result.grid.map((row, rowIndex) =>\r\n            row.map((cell, colIndex) =>\r\n              result.grid[rowIndex][colIndex].includes(\"number\") ? cell : // Keep \"numberX\"\r\n                (cell !== \" \" && cell !== \"\") ? \"1\" : \"\" // Non-empty to \"1\", empty stays \"\"\r\n            )\r\n          );\r\n          setInitialGrid(blankGrid)\r\n        }\r\n      }\r\n\r\n      if (initialGrid) {\r\n        setGrid(initialGrid)\r\n      }\r\n    }\r\n\r\n    generateInitialGrid()\r\n  }, [hintWordArray, obstacleWord, initialGrid])\r\n\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n\r\n  const revealCells = (\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    action: \"open\" | \"correct\" | \"incorrect\",\r\n    hintWordNumber?: string\r\n  ) => {\r\n    if (!isHost) return;\r\n\r\n    const hintWordIndex = hintWordNumber ? parseInt(hintWordNumber) : -1;\r\n    const hintWord = hintWords.find(\r\n      (word) =>\r\n        (word.index === hintWordIndex)\r\n    );\r\n\r\n    console.log(\"hintWord\", hintWord);\r\n    console.log(\"hintWords\", hintWords);\r\n\r\n\r\n    if (!hintWord) return;\r\n\r\n    const isRow = hintWord.dir === 1;\r\n    console.log(hintWord, \"is\", hintWord.dir);\r\n\r\n    const wordLength = hintWord.string.length - 3;\r\n    const startIndex = isRow ? colIndex + 1 : rowIndex + 1;\r\n\r\n    const handleNextQuestion = async (testName: string, hintWordIndex: string, round: string, roomId: string) => {\r\n      await getNextQuestion(testName, hintWordIndex, round, roomId)\r\n    }\r\n\r\n    setCellStyles((prev) => {\r\n      const newStyles = { ...prev };\r\n      if (isRow) {\r\n        for (let col = startIndex; col < startIndex + wordLength; col++) {\r\n          if (col == GRID_SIZE) break\r\n          const key = `${rowIndex}-${col}`;\r\n          // Skip number cells to preserve their appearance\r\n          console.log(\"grid[rowIndex][col]\", grid[rowIndex][col])\r\n          console.log(\"rowIndex\", rowIndex);\r\n          console.log(\"col\", col);\r\n\r\n          if (!grid[rowIndex][col].includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber) {\r\n                setSelectedRow(roomId, hintWordNumber, true, wordLength)\r\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId)\r\n              }\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-black\" };\r\n              let indexInTarget = []\r\n              if (hintWordArray)\r\n                for (let i = 2; i < wordLength; i++) {\r\n                  const char = hintWord.char[i];\r\n                  if (obstacleWord) {\r\n                    if (obstacleWord.includes(char)) {\r\n                      indexInTarget.push(i)\r\n                    }\r\n                  }\r\n                }\r\n              if (hintWordArray && hintWordNumber) {\r\n                console.log(\"hintWordNumber\", hintWordNumber);\r\n                console.log(\"hintWord\", hintWord);\r\n                console.log(\"hintWord.string.slice(2, hintWord.string.length-1)\", hintWord.string.slice(2, hintWord.string.length - 1));\r\n\r\n\r\n                setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), true, wordLength)\r\n              }\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setIncorectRow(roomId, hintWordNumber, true, wordLength)\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        for (let row = startIndex; row < startIndex + wordLength; row++) {\r\n          if (row == GRID_SIZE) break\r\n          const key = `${row}-${colIndex}`;\r\n          console.log(\"grid[row][colIndex]\", grid[row][colIndex])\r\n          console.log(\"colIndex\", colIndex);\r\n          console.log(\"row\", row);\r\n          // Skip number cells to preserve their appearance\r\n          if (!grid[row][colIndex].includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber) {\r\n                setSelectedRow(roomId, hintWordNumber, false, wordLength)\r\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId)\r\n              }\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-black\" };\r\n              let indexInTarget = []\r\n              if (hintWordArray)\r\n                for (let i = 0; i < hintWordArray[hintWordIndex].length; i++) {\r\n                  const char = hintWordArray[hintWordIndex][i];\r\n                  if (obstacleWord) {\r\n                    if (obstacleWord.includes(char)) {\r\n                      indexInTarget.push(i)\r\n                    }\r\n                  }\r\n\r\n\r\n                }\r\n              if (hintWordArray && hintWordNumber)\r\n                setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), false, wordLength)\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setIncorectRow(roomId, hintWordNumber, false, wordLength)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return newStyles;\r\n    });\r\n\r\n    // if (action === \"correct\" || action === \"incorrect\") {\r\n    //   setSelectedRow(roomId, isRow ? rowIndex.toString() : colIndex.toString());\r\n    // }\r\n  };\r\n\r\n\r\n  const revealCellsForPlayer = (\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    action: \"open\" | \"incorrect\" | \"correct\",\r\n    selectedRowNumber: string,\r\n    markedCharacterIndex: string,\r\n    isRow?: boolean,\r\n    wordLength?: number, // For open and incorrect\r\n    correctAnswer?: string, // For correct\r\n  ) => {\r\n    if (isHost) return; // Ensure this runs only for players\r\n\r\n    // Determine word length\r\n    const length = action === \"correct\" ? correctAnswer?.length || 0 : wordLength || 0;\r\n\r\n    if (length === 0) {\r\n      console.warn(`No valid word length for row ${selectedRowNumber}`);\r\n      return;\r\n    }\r\n\r\n    setCellStyles((prev) => {\r\n      const newStyles = { ...prev };\r\n      if (isRow) {\r\n        // Horizontal: style cells from colIndex + 1 to colIndex + length\r\n        for (let col = colIndex + 1; col <= colIndex + length; col++) {\r\n          const key = `${rowIndex}-${col}`;\r\n          // Skip empty and number cells\r\n          if (grid[rowIndex][col] !== \"\" && !grid[rowIndex][col]?.includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = {\r\n                background: \"bg-yellow-200\",\r\n                textColor: JSON.parse(decodeURIComponent(markedCharacterIndex)).includes(col) ? \"text-red-600\" : \"text-black\"\r\n              };\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // Vertical: style cells from rowIndex + 1 to rowIndex + length\r\n        for (let row = rowIndex + 1; row <= rowIndex + length; row++) {\r\n          const key = `${row}-${colIndex}`;\r\n          // Skip empty and number cells\r\n          if (grid[row][colIndex] !== \"\" && !grid[row][colIndex]?.includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = {\r\n                background: \"bg-yellow-200\",\r\n                textColor: JSON.parse(decodeURIComponent(markedCharacterIndex)).includes(row) ? \"text-red-600\" : \"text-black\"\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return newStyles;\r\n    });\r\n\r\n    // For \"correct\", update grid to show the actual word\r\n    if (action === \"correct\" && correctAnswer) {\r\n      setGrid((prevGrid) => {\r\n        const newGrid = prevGrid.map((row) => [...row]);\r\n        if (isRow) {\r\n          for (let col = colIndex + 1, i = 0; col <= colIndex + length && i < correctAnswer.length; col++, i++) {\r\n            newGrid[rowIndex][col] = correctAnswer[i];\r\n          }\r\n        } else {\r\n          for (let row = rowIndex + 1, i = 0; row <= rowIndex + length && i < correctAnswer.length; row++, i++) {\r\n            newGrid[row][colIndex] = correctAnswer[i];\r\n          }\r\n        }\r\n        return newGrid;\r\n      });\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   if (hintWordArray) {\r\n  //     hintWordArray.forEach((word, index) => {\r\n  //       console.log(`Word ${index}: '${word}' has length: ${word.length}`);\r\n  //       console.log([...word]);\r\n  //     });\r\n  //     const lengthArray = hintWordArray.map((word) => word.length);\r\n  //     setHintWordsLength(lengthArray);\r\n  //   }\r\n  // }, [hintWordArray]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const unsubscribePlayers = listenToObstacle(roomId, (obstacle) => {\r\n      // setCurrentQuestion(question)\r\n      // console.log(\"current question\", question)\r\n      const obstacleRevealed = {\r\n        \"question\": obstacle\r\n      }\r\n\r\n      setCurrentQuestion(obstacleRevealed)\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col].includes(\"number\")) {\r\n            revealCellsForPlayer(row, col, \"correct\", grid[row][col].replace(\"number\", \"\"), \"\")\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // No need to set state here; it's handled by useState initializer\r\n    return () => {\r\n      unsubscribePlayers();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const unsubscribePlayers = listenToQuestions(roomId, (question) => {\r\n      setCurrentQuestion(question)\r\n      console.log(\"current question\", question)\r\n\r\n    });\r\n\r\n    // No need to set state here; it's handled by useState initializer\r\n    return () => {\r\n      unsubscribePlayers();\r\n    };\r\n  }, []);\r\n  // Listen for \"open\" (select) signal\r\n  useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeSelect = listenToSelectRow(roomId, (data) => {\r\n\r\n      if (isInitialCall) {\r\n        isInitialCall = false;\r\n        return; // Skip the initial snapshot\r\n      }\r\n\r\n\r\n      let rowIndex = -1;\r\n      let colIndex = -1;\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col] === `number${data.selected_row_number}`) {\r\n            rowIndex = row;\r\n            colIndex = col;\r\n            break;\r\n          }\r\n        }\r\n        if (rowIndex !== -1) break;\r\n      }\r\n\r\n      if (rowIndex === -1 || colIndex === -1) {\r\n        console.warn(`Number cell number${data.selected_row_number} not found`);\r\n        return;\r\n      }\r\n\r\n      revealCellsForPlayer(rowIndex, colIndex, \"open\", data.selected_row_number, data.is_row, data.word_length);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeSelect();\r\n    };\r\n  }, [roomId, grid]);\r\n\r\n  // Listen for \"incorrect\" signal\r\n  useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeIncorrect = listenToIncorrectRow(roomId, (data) => {\r\n      if (isInitialCall) {\r\n        isInitialCall = false;\r\n        return; // Skip the initial snapshot\r\n      }\r\n\r\n      let rowIndex = -1;\r\n      let colIndex = -1;\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col] === `number${data.selected_row_number}`) {\r\n            rowIndex = row;\r\n            colIndex = col;\r\n            break;\r\n          }\r\n        }\r\n        if (rowIndex !== -1) break;\r\n      }\r\n\r\n      if (rowIndex === -1 || colIndex === -1) {\r\n        console.warn(`Number cell number${data.selected_row_number} not found`);\r\n        return;\r\n      }\r\n\r\n      revealCellsForPlayer(rowIndex, colIndex, \"incorrect\", data.selected_row_number, data.is_row, data.word_length);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeIncorrect();\r\n    };\r\n  }, [roomId, grid]);\r\n\r\n  // Listen for \"correct\" signal\r\n  useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeCorrect = listenToCorrectRow(\r\n      roomId,\r\n      (data) => {\r\n        console.log(\"isInitialCall\", isInitialCall);\r\n\r\n        if (isInitialCall) {\r\n          isInitialCall = false;\r\n          return; // Skip the initial snapshot\r\n        }\r\n\r\n        console.log(\"isInitialCall after\", isInitialCall);\r\n        let rowIndex = -1;\r\n        let colIndex = -1;\r\n        console.log(\"grid\", grid);\r\n\r\n        for (let row = 0; row < grid.length; row++) {\r\n          for (let col = 0; col < grid[row].length; col++) {\r\n            if (grid[row][col] === `number${data.selected_row_number}`) {\r\n              rowIndex = row;\r\n              colIndex = col;\r\n              break;\r\n            }\r\n          }\r\n          if (rowIndex !== -1) break;\r\n        }\r\n\r\n        if (rowIndex === -1 || colIndex === -1) {\r\n          console.warn(`Number cell number${data.selected_row_number} not found`);\r\n          return;\r\n        }\r\n\r\n        revealCellsForPlayer(rowIndex, colIndex, \"correct\", data.selected_row_number, data.is_row, undefined, data.correct_answer, data.marked_character_index);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribeCorrect();\r\n    };\r\n  }, [roomId, grid]);\r\n\r\n\r\n  // Reveal cells in a row or column\r\n\r\n\r\n  // Handle number click to show menu\r\n  const handleNumberClick = (rowIndex: number, colIndex: number) => {\r\n    if (!isHost) return;\r\n    setMenu({\r\n      visible: true,\r\n      rowIndex,\r\n      colIndex,\r\n    });\r\n  };\r\n\r\n  // Handle menu actions\r\n  const handleMenuAction = (\r\n    action: \"open\" | \"correct\" | \"incorrect\",\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    hintWordNumber: string\r\n  ) => {\r\n    revealCells(rowIndex, colIndex, action, hintWordNumber);\r\n    setMenu({ visible: false });\r\n  };\r\n\r\n  // Handle cell click to reveal\r\n  const handleCellClick = (rowIndex: number, colIndex: number) => {\r\n    if (!isHost) return;\r\n    revealCells(rowIndex, colIndex, \"open\");\r\n  };\r\n\r\n  const handleOpenObstacle = async () => {\r\n    if (!isHost || !hintWords || !hintWordArray) return;\r\n\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid[row].length; col++) {\r\n        if (Number.isFinite(Number(grid[row][col]))) {\r\n          revealCells(row, col, \"correct\", grid[row][col])\r\n        }\r\n      }\r\n    }\r\n    if (obstacleWord) {\r\n\r\n      await openObstacle(roomId, obstacleWord)\r\n    }\r\n  }\r\n\r\n  // Close menu on outside click\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n        setMenu({ visible: false });\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6 relative\">\r\n      <div className=\"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\">\r\n        {typeof currentQuestion?.question === \"string\"\r\n          ? currentQuestion.question\r\n          : \"\"}\r\n      </div>\r\n      <div className=\"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\">\r\n\r\n\r\n        {(!grid || !Array.isArray(grid) || !grid.every(row => Array.isArray(row))) ?\r\n          <div>Invalid grid data</div>\r\n          :\r\n          grid.map((row, rowIndex) => (\r\n            <React.Fragment key={rowIndex}>\r\n              {row.map((cell, colIndex) => {\r\n                const cellKey = `${rowIndex}-${colIndex}`;\r\n                const cellStyle = cellStyles[cellKey] || {\r\n                  background: cell === \"\" || cell === \" \" ? \"bg-white\" : \"bg-gray-50\",\r\n                  textColor: cell.includes(\"number\") ? \"text-blue-500\" : \"text-transparent\",\r\n                };\r\n\r\n                const showMenu =\r\n                  menu.visible &&\r\n                  menu.rowIndex === rowIndex &&\r\n                  menu.colIndex === colIndex &&\r\n                  cell.includes(\"number\");\r\n\r\n                return (\r\n                  <div className=\"relative flex items-center\" key={colIndex}>\r\n                    <div\r\n                      className={`w-10 h-10 flex items-center justify-center text-lg font-semibold select-none\r\n                      ${cell.includes(\"number\") ? \"text-blue-500 border-none\" : \"\"}\r\n                      ${cell.includes(\"number\") ? \"\" : cellStyle.background}\r\n                      ${cell.includes(\"number\") ? \"text-blue-500\" : cellStyle.textColor}\r\n                      ${obstacleWord?.includes(cell) &&\r\n                          cellStyle.textColor === \"text-black\" &&\r\n                          !cell.includes(\"number\") &&\r\n                          isNaN(Number(cell))\r\n                          ? \"font-bold text-red-500\"\r\n                          : \"\"}\r\n                    `}\r\n                      onClick={() => {\r\n                        if (isHost) {\r\n                          if (cell.includes(\"number\")) {\r\n                            handleNumberClick(rowIndex, colIndex);\r\n                          } else {\r\n                            handleCellClick(rowIndex, colIndex);\r\n                          }\r\n                        }\r\n                      }}\r\n                      style={{\r\n                        cursor:\r\n                          isHost &&\r\n                            (cell.includes(\"number\") ||\r\n                              hintWords.some((word) => word.y === rowIndex || word.x === colIndex))\r\n                            ? \"pointer\"\r\n                            : \"default\",\r\n                      }}\r\n                    >\r\n\r\n                      {typeof cell === \"string\" || typeof cell === \"number\"\r\n                        ? (cell.includes(\"number\") ? cell.replace(\"number\", \"\") : cell)\r\n                        : \"\"}\r\n                    </div>\r\n\r\n\r\n                    {showMenu && (\r\n                      <div\r\n                        ref={menuRef}\r\n                        className=\"absolute left-12 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\"\r\n                      >\r\n                        <button\r\n                          className=\"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n                          onClick={() =>\r\n                            handleMenuAction(\"open\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                          }\r\n                        >\r\n                          SELECT\r\n                        </button>\r\n                        <button\r\n                          className=\"px-2 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600\"\r\n                          onClick={() =>\r\n                            handleMenuAction(\"correct\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                          }\r\n                        >\r\n                          Correct\r\n                        </button>\r\n                        <button\r\n                          className=\"px-2 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600\"\r\n                          onClick={() =>\r\n                            handleMenuAction(\"incorrect\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                          }\r\n                        >\r\n                          Incorrect\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n            </React.Fragment>\r\n          ))}\r\n      </div>\r\n      {\r\n        isHost &&\r\n        <button\r\n          onClick={() => {\r\n            alert('Mở cnv!')\r\n            handleOpenObstacle()\r\n          }}\r\n          className=\"bg-green-500 text-white p-2 flex-1 rounded-md\"\r\n        >\r\n          Mở CNV\r\n        </button>\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionBoxRound2;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}