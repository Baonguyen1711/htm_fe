{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { findCommonLetterPairs } from '../../../layouts/RoundBase/utils';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HostRound2 = () => {\n  _s();\n  useEffect(() => {\n    const wordList = [\"GIÓ\", \"HẠTGIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂUKIỆTLUÂN\"];\n    const renderedWordList = findCommonLetterPairs(wordList, 20);\n    console.log();\n  }, []);\n  // const [params] = useSearchParams()\n  // const roomId = params.get(\"roomId\") || \"\"\n  // const testName = params.get(\"testName\") || \"\"\n  // const [obstacleWord, setObstacleWord] = useState<string>(\"\")\n  // const [buzzedPlayer, setBuzzedPlayer] = useState<string>(\"\");\n  // const [showModal, setShowModal] = useState(false); // State for modal visibility\n  // const [hintWords, setHintWords] = useState<string[]>([])\n  // const isMounted = useRef(false)\n  // useEffect(() => {\n\n  //     const unsubscribeBuzzing = listenToBuzzing(roomId, (playerName) => {\n  //         if (playerName) {\n  //             setBuzzedPlayer(playerName);\n  //             console.log(\"playerName\", typeof playerName);\n\n  //             console.log(playerName, \"đã bấm chuông\")\n  //             setShowModal(true); \n  //         }\n  //     });\n\n  //     return () => {\n  //         unsubscribeBuzzing();\n  //     };\n  // }, [roomId]);\n\n  // useEffect(() => {\n  //     const getSecondRoundQuestion = async () => {\n  //         const result = await getQuestionByRound(testName, \"2\", roomId)\n  //         console.log(\"round 2 data\", result)\n  //         const sortedResult = [...result].sort((a, b) => a.stt - b.stt);\n  //         console.log(\"sorted result\", sortedResult);\n  //         setObstacleWord(sortedResult[6].answer.toUpperCase().replace(/\\s+/g, \"\"))\n  //         const updatedHintWords = []\n  //         for (let i = 0; i < sortedResult.length - 1; i++) {\n  //             const word = sortedResult[i].answer.toUpperCase().replace(/\\s+/g, \"\");\n  //             updatedHintWords.push(word);\n\n  //             // Old style (shows full array due to reference)\n  //             console.log(\"updatedHintWords\", updatedHintWords);\n\n  //             // Better: shows actual content at this step\n  //             console.log(\"updatedHintWords (snapshot)\", [...updatedHintWords]);\n  //         }\n  //         //const hintWords = result.slice(0, result.length - 1).map((item: any) => item.answer.toUpperCase().replace(/\\s+/g, \"\"));\n  //         console.log(\"hintWords\", [...updatedHintWords])\n  //         setHintWords([...updatedHintWords]);\n\n  //     }\n\n  //     getSecondRoundQuestion()\n\n  // }, [])\n\n  // const handleCloseModal = () => {\n  //     setShowModal(false);\n  //     // Optionally clear buzzedPlayer if you want to reset it\n  //     setBuzzedPlayer(\"\");\n  //     resetBuzz(roomId)\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(HostRound2, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = HostRound2;\nexport default HostRound2;\nvar _c;\n$RefreshReg$(_c, \"HostRound2\");","map":{"version":3,"names":["React","useEffect","findCommonLetterPairs","Fragment","_Fragment","jsxDEV","_jsxDEV","HostRound2","_s","wordList","renderedWordList","console","log","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/HostRound2.tsx"],"sourcesContent":["import Round2 from '../../../layouts/RoundBase/Round2';\r\nimport Host from '../../../layouts/Host/Host';\r\nimport QuestionBoxRound2 from '../../../layouts/RoundBase/Round2';\r\nimport { getQuestionByRound } from '../Test/service';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { Question } from '../../../type';\r\nimport { listenToBuzzing } from '../../../services/firebaseServices';\r\nimport { resetBuzz } from './service';\r\nimport { findCommonLetterPairs } from '../../../layouts/RoundBase/utils';\r\n\r\n\r\nconst HostRound2: React.FC = () => {\r\n  useEffect(()=>{\r\n    const wordList = [\"GIÓ\", \"HẠTGIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂUKIỆTLUÂN\"];\r\n    const renderedWordList = findCommonLetterPairs(wordList,20)\r\n\r\n    console.log();\r\n    \r\n  },[])\r\n    // const [params] = useSearchParams()\r\n    // const roomId = params.get(\"roomId\") || \"\"\r\n    // const testName = params.get(\"testName\") || \"\"\r\n    // const [obstacleWord, setObstacleWord] = useState<string>(\"\")\r\n    // const [buzzedPlayer, setBuzzedPlayer] = useState<string>(\"\");\r\n    // const [showModal, setShowModal] = useState(false); // State for modal visibility\r\n    // const [hintWords, setHintWords] = useState<string[]>([])\r\n    // const isMounted = useRef(false)\r\n    // useEffect(() => {\r\n\r\n    //     const unsubscribeBuzzing = listenToBuzzing(roomId, (playerName) => {\r\n    //         if (playerName) {\r\n    //             setBuzzedPlayer(playerName);\r\n    //             console.log(\"playerName\", typeof playerName);\r\n\r\n    //             console.log(playerName, \"đã bấm chuông\")\r\n    //             setShowModal(true); \r\n    //         }\r\n    //     });\r\n\r\n    //     return () => {\r\n    //         unsubscribeBuzzing();\r\n    //     };\r\n    // }, [roomId]);\r\n\r\n\r\n    // useEffect(() => {\r\n    //     const getSecondRoundQuestion = async () => {\r\n    //         const result = await getQuestionByRound(testName, \"2\", roomId)\r\n    //         console.log(\"round 2 data\", result)\r\n    //         const sortedResult = [...result].sort((a, b) => a.stt - b.stt);\r\n    //         console.log(\"sorted result\", sortedResult);\r\n    //         setObstacleWord(sortedResult[6].answer.toUpperCase().replace(/\\s+/g, \"\"))\r\n    //         const updatedHintWords = []\r\n    //         for (let i = 0; i < sortedResult.length - 1; i++) {\r\n    //             const word = sortedResult[i].answer.toUpperCase().replace(/\\s+/g, \"\");\r\n    //             updatedHintWords.push(word);\r\n\r\n    //             // Old style (shows full array due to reference)\r\n    //             console.log(\"updatedHintWords\", updatedHintWords);\r\n\r\n    //             // Better: shows actual content at this step\r\n    //             console.log(\"updatedHintWords (snapshot)\", [...updatedHintWords]);\r\n    //         }\r\n    //         //const hintWords = result.slice(0, result.length - 1).map((item: any) => item.answer.toUpperCase().replace(/\\s+/g, \"\"));\r\n    //         console.log(\"hintWords\", [...updatedHintWords])\r\n    //         setHintWords([...updatedHintWords]);\r\n\r\n    //     }\r\n\r\n    //     getSecondRoundQuestion()\r\n\r\n    // }, [])\r\n\r\n    // const handleCloseModal = () => {\r\n    //     setShowModal(false);\r\n    //     // Optionally clear buzzedPlayer if you want to reset it\r\n    //     setBuzzedPlayer(\"\");\r\n    //     resetBuzz(roomId)\r\n    //   };\r\n    \r\n    return (\r\n        <>\r\n        {/* <Host\r\n            QuestionComponent={<QuestionBoxRound2 obstacleWord={obstacleWord} hintWordArray={hintWords} isHost={true} />}\r\n        />\r\n        {showModal && (\r\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n          <div className=\"bg-white rounded-lg p-6 w-80 shadow-lg\">\r\n            <h2 className=\"text-lg font-semibold text-gray-800 mb-4 text-center\">\r\n              {`${buzzedPlayer} đã nhấn chuông trả lời`} \r\n            </h2>\r\n            <div className=\"flex justify-center\">\r\n              <button\r\n                onClick={handleCloseModal}\r\n                className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n              >\r\n                Đóng\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )} */}\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default HostRound2;\r\n"],"mappings":";AAIA,OAAOA,KAAK,IAAIC,SAAS,QAA0B,OAAO;AAK1D,SAASC,qBAAqB,QAAQ,kCAAkC;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAGzE,MAAMC,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjCP,SAAS,CAAC,MAAI;IACZ,MAAMQ,QAAQ,GAAG,CAAC,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,CAAC;IAC7E,MAAMC,gBAAgB,GAAGR,qBAAqB,CAACO,QAAQ,EAAC,EAAE,CAAC;IAE3DE,OAAO,CAACC,GAAG,CAAC,CAAC;EAEf,CAAC,EAAC,EAAE,CAAC;EACH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACIN,OAAA,CAAAF,SAAA,mBAqBE,CAAC;AAGX,CAAC;AAACI,EAAA,CA9FID,UAAoB;AAAAM,EAAA,GAApBN,UAAoB;AAgG1B,eAAeA,UAAU;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}