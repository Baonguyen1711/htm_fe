{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\User\\\\Round2\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport Play from \"../../../layouts/Play\";\nimport React, { useState, useEffect } from \"react\";\nimport { renderGrid } from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Từ khóa chướng ngại vật\nconst mainKeyword = \"VIETTEL\";\nconst ObstacleQuestionBox = ({\n  obstacleWord\n}) => {\n  _s();\n  // Increased grid size\n  const GRID_SIZE = 20;\n  const generateEmptyGrid = () => {\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n  };\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [grid, setGrid] = useState(generateEmptyGrid());\n  const [revealedRows, setRevealedRows] = useState(Array(GRID_SIZE).fill(false));\n  const [revealedCols, setRevealedCols] = useState(Array(GRID_SIZE).fill(false));\n  const [hintWords, setHintWords] = useState([]);\n  useEffect(() => {\n    const wordList = [\"BƯUCHÍNH\", \"5G\", \"BQP\", \"TẬPĐOÀN\", \"HÀNỘI\", \"RED\"];\n    const {\n      randomHintWords,\n      newGrid\n    } = renderGrid(wordList, mainKeyword, GRID_SIZE);\n    console.log(\"newGrid\", newGrid);\n    setHintWords(randomHintWords);\n    setGrid(newGrid);\n  }, []);\n\n  // Hàm toggle hiển thị hàng/cột\n  const toggleRow = rowIndex => {\n    setRevealedRows(prev => {\n      const newRevealed = [...prev];\n      newRevealed[rowIndex] = !newRevealed[rowIndex];\n      return newRevealed;\n    });\n  };\n  const toggleCol = colIndex => {\n    setRevealedCols(prev => {\n      const newRevealed = [...prev];\n      newRevealed[colIndex] = !newRevealed[colIndex];\n      return newRevealed;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%] ${isExpanded ? \"max-h-none\" : \"max-h-[120px] overflow-hidden\"}`,\n      children: \"Trong c\\xE1c gi\\u1EA3i \\u0111\\u1EA5u th\\u1EC3 thao, nh\\u1EEFng \\u0111\\u1ED9i hay v\\u1EADn \\u0111\\u1ED9ng vi\\xEAn m\\u1EA1nh s\\u1EBD \\u0111\\u01B0\\u1EE3c x\\u1EBFp v\\xE0o c\\xF9ng m\\u1ED9t ho\\u1EB7c nhi\\u1EC1u nh\\xF3m trong khi b\\u1ED1c th\\u0103m \\u0111\\u1EC3 tr\\xE1nh vi\\u1EC7c g\\u1EB7p nhau s\\u1EDBm. T\\xEAn g\\u1ECDi chung c\\u1EE7a c\\xE1c nh\\xF3m v\\u1EADn \\u0111\\u1ED9ng vi\\xEAn n\\xE0y l\\xE0 g\\xEC?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\",\n      children: [Array.from({\n        length: GRID_SIZE\n      }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-10 h-10 bg-white\"\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)), grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map((cell, colIndex) => {\n          const isRevealed = revealedRows[rowIndex] && hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\") || revealedCols[colIndex] && hintWords.some(word => word.x === colIndex && word.direction === \"vertical\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-10 h-10 flex items-center justify-center text-lg font-semibold select-none \n                                    \n                                        ${cell.includes(\"number\") ? \"text-blue-500 bg-white border-none\" : \"\"}\n                                        ${cell === \"\" ? \"bg-white border-none\" : \"border-gray-400 bg-gray-50\"} \n                                        ${\n            // Chỉ áp dụng text-black/text-transparent nếu không phải các trường hợp đặc biệt\n            !cell.includes(\"number\") && isRevealed && !obstacleWord.includes(cell) ? \"text-black\" : !cell.includes(\"number\") ? \"text-transparent\" : \"\"}\n                                        ${obstacleWord.includes(cell) && isRevealed && isNaN(Number(cell)) ? \"font-bold text-red-500\" : \"\"}\n                                `,\n            onClick: () => {\n              if (hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\")) {\n                toggleRow(rowIndex);\n              } else if (hintWords.some(word => word.x === colIndex && word.direction === \"vertical\")) {\n                toggleCol(colIndex);\n              }\n            },\n            style: {\n              cursor: hintWords.some(word => word.y === rowIndex || word.x === colIndex) ? \"pointer\" : \"default\"\n            },\n            children: cell.includes(\"number\") ? cell.replace(\"number\", \"\").trim() : cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 33\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n_s(ObstacleQuestionBox, \"+stKzWJNoW/cV9hYazL8QtFEPaI=\");\n_c = ObstacleQuestionBox;\nfunction Round2() {\n  return /*#__PURE__*/_jsxDEV(Play, {\n    questionComponent: /*#__PURE__*/_jsxDEV(ObstacleQuestionBox, {\n      obstacleWord: mainKeyword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 37\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 12\n  }, this);\n}\n_c2 = Round2;\nexport default Round2;\nvar _c, _c2;\n$RefreshReg$(_c, \"ObstacleQuestionBox\");\n$RefreshReg$(_c2, \"Round2\");","map":{"version":3,"names":["Play","React","useState","useEffect","renderGrid","jsxDEV","_jsxDEV","mainKeyword","ObstacleQuestionBox","obstacleWord","_s","GRID_SIZE","generateEmptyGrid","Array","fill","map","isExpanded","setIsExpanded","grid","setGrid","revealedRows","setRevealedRows","revealedCols","setRevealedCols","hintWords","setHintWords","wordList","randomHintWords","newGrid","console","log","toggleRow","rowIndex","prev","newRevealed","toggleCol","colIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","from","length","_","row","Fragment","cell","isRevealed","some","word","y","direction","x","includes","isNaN","Number","onClick","style","cursor","replace","trim","_c","Round2","questionComponent","_c2","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/User/Round2/Round2.tsx"],"sourcesContent":["import Play from \"../../../layouts/Play\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { renderGrid } from \"./utils\";\r\n\r\ninterface HintWord {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n    obstacleWord: string;\r\n}\r\n\r\ntype PlacedWord = {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n};\r\n\r\n// Từ khóa chướng ngại vật\r\nconst mainKeyword = \"VIETTEL\";\r\n\r\n\r\nconst ObstacleQuestionBox: React.FC<ObstacleQuestionBoxProps> = ({ obstacleWord }) => {\r\n\r\n    // Increased grid size\r\n    const GRID_SIZE = 20;\r\n\r\n    const generateEmptyGrid = () => {\r\n        return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\r\n    };\r\n    const [isExpanded, setIsExpanded] = useState(false);\r\n    const [grid, setGrid] = useState<string[][]>(generateEmptyGrid());\r\n    const [revealedRows, setRevealedRows] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [revealedCols, setRevealedCols] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [hintWords, setHintWords] = useState<HintWord[]>([]);\r\n\r\n    useEffect(() => {\r\n        const wordList = [\"BƯUCHÍNH\", \"5G\", \"BQP\", \"TẬPĐOÀN\", \"HÀNỘI\", \"RED\"];\r\n        const {randomHintWords, newGrid} = renderGrid(wordList,mainKeyword, GRID_SIZE) \r\n\r\n\r\n        console.log(\"newGrid\", newGrid)\r\n        setHintWords(randomHintWords);\r\n        setGrid(newGrid);\r\n    }, []);\r\n\r\n    // Hàm toggle hiển thị hàng/cột\r\n    const toggleRow = (rowIndex: number) => {\r\n        setRevealedRows((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[rowIndex] = !newRevealed[rowIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    const toggleCol = (colIndex: number) => {\r\n        setRevealedCols((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[colIndex] = !newRevealed[colIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6\">\r\n            <div\r\n                className={`text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%] ${isExpanded ? \"max-h-none\" : \"max-h-[120px] overflow-hidden\"\r\n                    }`}\r\n            >\r\n                Trong các giải đấu thể thao, những đội hay vận động viên mạnh sẽ được xếp vào cùng một hoặc nhiều nhóm trong khi bốc thăm để tránh việc gặp nhau sớm. Tên gọi chung của các nhóm vận động viên này là gì?\r\n            </div>\r\n            <div className=\"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\">\r\n                {/* Empty header for alignment */}\r\n                {/* <div className=\"w-10 h-10 bg-white\" /> */}\r\n                {Array.from({ length: GRID_SIZE }).map((_, colIndex) => (\r\n                    <div key={colIndex} className=\"w-10 h-10 bg-white\" />\r\n                ))}\r\n\r\n                {/* Grid with numbers and cells */}\r\n                {grid.map((row, rowIndex) => (\r\n                    <React.Fragment key={rowIndex}>\r\n                        {/* <div className=\"w-10 h-10 bg-white\" />  */}\r\n                        {row.map((cell, colIndex) => {\r\n\r\n                            const isRevealed =\r\n                                (revealedRows[rowIndex] &&\r\n                                    hintWords.some(\r\n                                        (word) => word.y === rowIndex && word.direction === \"horizontal\"\r\n                                    )) ||\r\n                                (revealedCols[colIndex] &&\r\n                                    hintWords.some((word) => word.x === colIndex && word.direction === \"vertical\"));\r\n\r\n                            return (\r\n                                <div\r\n                                    key={colIndex}\r\n                                    className={`w-10 h-10 flex items-center justify-center text-lg font-semibold select-none \r\n                                    \r\n                                        ${cell.includes(\"number\") ? \"text-blue-500 bg-white border-none\" : \"\"}\r\n                                        ${cell === \"\" ? \"bg-white border-none\" : \"border-gray-400 bg-gray-50\"} \r\n                                        ${\r\n                                            // Chỉ áp dụng text-black/text-transparent nếu không phải các trường hợp đặc biệt\r\n                                            !cell.includes(\"number\") && isRevealed && !obstacleWord.includes(cell) \r\n                                                ? \"text-black\" \r\n                                                : !cell.includes(\"number\") \r\n                                                    ? \"text-transparent\" \r\n                                                    : \"\"\r\n                                        }\r\n                                        ${obstacleWord.includes(cell) && isRevealed && isNaN(Number(cell)) ? \"font-bold text-red-500\" : \"\"}\r\n                                `}\r\n                                    onClick={() => {\r\n                                        if (hintWords.some((word) => word.y === rowIndex && word.direction === \"horizontal\")) {\r\n                                            toggleRow(rowIndex);\r\n                                        } else if (hintWords.some((word) => word.x === colIndex && word.direction === \"vertical\")) {\r\n                                            toggleCol(colIndex);\r\n                                        }\r\n                                    }}\r\n                                    style={{\r\n                                        cursor: hintWords.some((word) => word.y === rowIndex || word.x === colIndex)\r\n                                            ? \"pointer\"\r\n                                            : \"default\",\r\n                                    }}\r\n                                >\r\n                                    {cell.includes(\"number\") ? cell.replace(\"number\", \"\").trim() : cell}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </React.Fragment>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nfunction Round2() {\r\n    return <Play questionComponent={<ObstacleQuestionBox obstacleWord={mainKeyword} />} />;\r\n}\r\n\r\nexport default Round2;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}