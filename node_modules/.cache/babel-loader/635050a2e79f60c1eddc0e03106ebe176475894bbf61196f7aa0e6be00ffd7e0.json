{"ast":null,"code":"import React from \"react\";\n\n// Define word object structure\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CrosswordGrid = ({\n  placedWords,\n  boardSize = 20\n}) => {\n  const GRID_SIZE = 18;\n  const EMPTY_CELL = ' ';\n  function createEmptyGrid(size) {\n    return Array.from({\n      length: size\n    }, () => Array(size).fill(EMPTY_CELL));\n  }\n  const wordArr = ['GIÓ', 'HẠTGIỐNG', 'DREAM', 'THUỐC', 'CÚC', 'CHÂUKIỆTLUÂN'];\n  var board, wordBank, wordsActive, mode;\n  var isPos;\n  var classesOfBoard;\n  class WordObj {\n    constructor(str) {\n      this.string = void 0;\n      this.char = void 0;\n      this.totalMatches = 0;\n      this.effectiveMatches = 0;\n      this.successfulMatches = [];\n      this.x = 0;\n      this.y = 0;\n      this.dir = 0;\n      this.string = str;\n      this.char = str.split('');\n    }\n  }\n  const Bounds = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    Update: function (x, y) {\n      this.top = Math.min(y, this.top);\n      this.right = Math.max(x, this.right);\n      this.bottom = Math.max(y, this.bottom);\n      this.left = Math.min(x, this.left);\n    },\n    Clean: function () {\n      this.top = 999;\n      this.right = 0;\n      this.bottom = 0;\n      this.left = 999;\n    }\n  };\n  function CleanVars() {\n    Bounds.Clean();\n    wordBank = [];\n    wordsActive = [];\n    board = [];\n    isPos = [];\n    classesOfBoard = [];\n    for (let i = 0; i < 100; i++) {\n      board.push([]);\n      isPos.push([]);\n      classesOfBoard.push([]);\n      for (let j = 0; j < 100; j++) {\n        board[i].push(null);\n        isPos[i].push(false);\n        classesOfBoard[i].push([]);\n      }\n    }\n  }\n  function PrepareBoard() {\n    wordBank = [];\n    for (let i = 0; i < wordArr.length; i++) {\n      const actualPos = i + 1;\n      wordBank.push(new WordObj(' ' + actualPos.toString() + wordArr[i] + ' '));\n    }\n    for (let i = 0; i < wordBank.length; i++) {\n      const wA = wordBank[i];\n      for (let j = 0; j < wA.char.length; j++) {\n        const cA = wA.char[j];\n        for (let k = 0; k < wordBank.length; k++) {\n          const wB = wordBank[k];\n          if (i !== k) {\n            for (let l = 0; l < wB.char.length; l++) {\n              wA.totalMatches += cA === wB.char[l] ? 1 : 0;\n            }\n          }\n        }\n      }\n    }\n  }\n  function findWordIdx(givenWord) {\n    givenWord = givenWord.substring(2, givenWord.length - 1);\n    for (let i = 0; i < wordArr.length; i++) {\n      if (givenWord === wordArr[i]) return i + 1;\n    }\n    return undefined;\n  }\n  function RemoveClass(el, className) {\n    el.classList.remove(className);\n  }\n  function AddClass(el, className) {\n    el.classList.add(className);\n  }\n  function BoardToHtml(space) {\n    // Assume this is implemented elsewhere\n    return \"\";\n  }\n  function AddWordToBoard() {\n    // KEEP THIS FUNCTION AS IS – it's long and has no type errors once above types are set correctly\n    // Full code already provided above\n    return true; // Just placeholder to satisfy TS\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_c = CrosswordGrid;\nexport default CrosswordGrid;\nvar _c;\n$RefreshReg$(_c, \"CrosswordGrid\");","map":{"version":3,"names":["React","Fragment","_Fragment","jsxDEV","_jsxDEV","CrosswordGrid","placedWords","boardSize","GRID_SIZE","EMPTY_CELL","createEmptyGrid","size","Array","from","length","fill","wordArr","board","wordBank","wordsActive","mode","isPos","classesOfBoard","WordObj","constructor","str","string","char","totalMatches","effectiveMatches","successfulMatches","x","y","dir","split","Bounds","top","right","bottom","left","Update","Math","min","max","Clean","CleanVars","i","push","j","PrepareBoard","actualPos","toString","wA","cA","k","wB","l","findWordIdx","givenWord","substring","undefined","RemoveClass","el","className","classList","remove","AddClass","add","BoardToHtml","space","AddWordToBoard","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/HostRound2.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Define word object structure\r\n\r\ntype WordPlacement = {\r\n  x: number;\r\n  y: number;\r\n  dir: 0 | 1;\r\n};\r\n\r\ninterface CrosswordGridProps {\r\n  placedWords?: WordPlacement[];\r\n  boardSize?: number;\r\n}\r\n\r\n\r\n\r\nconst CrosswordGrid: React.FC<CrosswordGridProps> = ({ placedWords, boardSize = 20 }) => {\r\n\r\n \r\n\r\n  const GRID_SIZE = 18;\r\n  const EMPTY_CELL = ' ';\r\n\r\n  function createEmptyGrid(size: number): string[][] {\r\n    return Array.from({ length: size }, () => Array(size).fill(EMPTY_CELL));\r\n  }\r\n\r\n  const wordArr = [\r\n    'GIÓ',\r\n    'HẠTGIỐNG',\r\n    'DREAM',\r\n    'THUỐC',\r\n    'CÚC',\r\n    'CHÂUKIỆTLUÂN',\r\n  ]\r\n\r\n  var board: (string | null)[][], wordBank: WordObj[], wordsActive: WordObj[], mode: number;\r\n\r\ninterface MatchPosition {\r\n  x: number;\r\n  y: number;\r\n  dir: number; // 0 = horizontal, 1 = vertical\r\n}\r\n\r\ninterface Question {\r\n  answer: string;\r\n}\r\n\r\nvar isPos: boolean[][];\r\nvar classesOfBoard: number[][][];\r\n\r\nclass WordObj {\r\n  string: string;\r\n  char: string[];\r\n  totalMatches: number = 0;\r\n  effectiveMatches: number = 0;\r\n  successfulMatches: MatchPosition[] = [];\r\n  x: number = 0;\r\n  y: number = 0;\r\n  dir: number = 0;\r\n\r\n  constructor(str: string){\r\n    this.string = str;\r\n    this.char = str.split('');\r\n  }\r\n}\r\n\r\nconst Bounds = {\r\n  top: 0,\r\n  right: 0,\r\n  bottom: 0,\r\n  left: 0,\r\n\r\n  Update: function(x: number, y: number){\r\n    this.top = Math.min(y,this.top);\r\n    this.right = Math.max(x,this.right);\r\n    this.bottom = Math.max(y,this.bottom);\r\n    this.left = Math.min(x,this.left);\r\n  },\r\n\r\n  Clean: function(){\r\n    this.top = 999;\r\n    this.right = 0;\r\n    this.bottom = 0;\r\n    this.left = 999;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction CleanVars(): void {\r\n  Bounds.Clean();\r\n  wordBank = [];\r\n  wordsActive = [];\r\n  board = [];\r\n  isPos = [];\r\n  classesOfBoard = [];\r\n\r\n  for(let i = 0; i < 100; i++){\r\n    board.push([]);\r\n    isPos.push([]);\r\n    classesOfBoard.push([]);\r\n    for(let j = 0; j < 100; j++){\r\n      board[i].push(null);\r\n      isPos[i].push(false);\r\n      classesOfBoard[i].push([]);\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction PrepareBoard(): void {\r\n  wordBank = [];\r\n\r\n  for(let i = 0; i < wordArr.length; i++){\r\n    const actualPos = i + 1;\r\n    wordBank.push(new WordObj(' '+actualPos.toString()+wordArr[i]+' '));\r\n  }\r\n\r\n  for(let i = 0; i < wordBank.length; i++){\r\n    const wA = wordBank[i];\r\n    for(let j = 0; j < wA.char.length; j++){\r\n      const cA = wA.char[j];\r\n      for(let k = 0; k < wordBank.length; k++){\r\n        const wB = wordBank[k];\r\n        if (i !== k) {\r\n          for(let l = 0; l < wB.char.length; l++){\r\n            wA.totalMatches += (cA === wB.char[l]) ? 1 : 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction findWordIdx(givenWord: string): number | undefined {\r\n  givenWord = givenWord.substring(2, givenWord.length - 1);\r\n  for(let i = 0; i < wordArr.length; i++){\r\n    if(givenWord === wordArr[i]) return i + 1;\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction RemoveClass(el: Element, className: string): void {\r\n  el.classList.remove(className);\r\n}\r\n\r\nfunction AddClass(el: Element, className: string): void {\r\n  el.classList.add(className);\r\n}\r\n\r\nfunction BoardToHtml(space: string): string {\r\n  // Assume this is implemented elsewhere\r\n  return \"\";\r\n}\r\n\r\nfunction AddWordToBoard(): boolean {\r\n  // KEEP THIS FUNCTION AS IS – it's long and has no type errors once above types are set correctly\r\n  // Full code already provided above\r\n  return true; // Just placeholder to satisfy TS\r\n}\r\n  \r\n  \r\n\r\n  return (\r\n    <>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CrosswordGrid;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}