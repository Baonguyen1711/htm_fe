{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { renderGrid } from \"./utils\";\nimport { usePlayer } from \"../../context/playerContext\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { setSelectedRow, listenToGridActions } from \"../../components/services\"; // Assume this includes the new listener\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mainKeyword = \"BÒCÔNGANH\";\nconst QuestionBoxRound2 = ({\n  obstacleWord = mainKeyword,\n  hintWordArray,\n  initialGrid,\n  isHost = false\n}) => {\n  _s();\n  console.log(\"hintWordArray\", typeof hintWordArray, hintWordArray);\n  console.log(\"obstacle\", obstacleWord);\n  const [searchParams] = useSearchParams();\n  const {\n    setInitialGrid\n  } = usePlayer();\n  const roomId = searchParams.get(\"roomId\") || \"\";\n  const GRID_SIZE = 20;\n  const generateEmptyGrid = () => {\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n  };\n  const [grid, setGrid] = useState(generateEmptyGrid());\n  const [revealedRows, setRevealedRows] = useState(Array(GRID_SIZE).fill(false));\n  const [revealedCols, setRevealedCols] = useState(Array(GRID_SIZE).fill(false));\n  const [hintWords, setHintWords] = useState([]);\n  const [cellStyles, setCellStyles] = useState({}); // Tracks background colors\n  const [menu, setMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0\n  });\n\n  // Ref to track menu container\n  const menuRef = useRef(null);\n\n  // Initialize grid for host or player\n  useEffect(() => {\n    if (isHost) {\n      if (hintWordArray && obstacleWord) {\n        const wordList = [\"GIÓ\", \"HẠTGIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂUKIỆTLUÂN\"];\n        const {\n          randomHintWords,\n          newGrid\n        } = renderGrid(hintWordArray, obstacleWord, GRID_SIZE);\n        console.log(\"randomHintWords\", randomHintWords);\n        console.log(\"newGrid\", newGrid);\n        setHintWords(randomHintWords);\n        setInitialGrid(newGrid);\n        setGrid(newGrid);\n\n        // Send grid to backend (as in previous response)\n        const saveGrid = async () => {\n          try {\n            const response = await fetch(\"/api/rooms/round\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                room_id: roomId,\n                round: \"2\",\n                grid: {\n                  grid: newGrid\n                }\n              })\n            });\n            if (!response.ok) throw new Error(\"Failed to save grid\");\n            console.log(\"Grid saved:\", await response.json());\n          } catch (error) {\n            console.error(\"Error saving grid:\", error);\n          }\n        };\n        saveGrid();\n      }\n    } else {\n      if (initialGrid) {\n        setGrid(initialGrid);\n      }\n    }\n  }, [isHost, hintWordArray, obstacleWord, initialGrid, roomId, setInitialGrid]);\n\n  // Player: Listen for grid actions (open, correct, incorrect)\n  useEffect(() => {\n    if (!isHost) {\n      const unsubscribe = listenToGridActions(roomId, action => {\n        if (!action) return;\n        const {\n          type,\n          index,\n          isRow\n        } = action;\n        if (isRow) {\n          if (type === \"open\") {\n            // Turn row cells yellow\n            setCellStyles(prev => {\n              const newStyles = {\n                ...prev\n              };\n              for (let col = 0; col < GRID_SIZE; col++) {\n                newStyles[`${index}-${col}`] = \"bg-yellow-200\";\n              }\n              return newStyles;\n            });\n          } else if (type === \"correct\") {\n            // Reveal row\n            setRevealedRows(prev => {\n              const newRevealed = [...prev];\n              newRevealed[index] = true;\n              return newRevealed;\n            });\n          } else if (type === \"incorrect\") {\n            // Turn row cells grey\n            setCellStyles(prev => {\n              const newStyles = {\n                ...prev\n              };\n              for (let col = 0; col < GRID_SIZE; col++) {\n                newStyles[`${index}-${col}`] = \"bg-gray-400\";\n              }\n              return newStyles;\n            });\n          }\n        } else {\n          if (type === \"open\") {\n            // Turn column cells yellow\n            setCellStyles(prev => {\n              const newStyles = {\n                ...prev\n              };\n              for (let row = 0; row < GRID_SIZE; row++) {\n                newStyles[`${row}-${index}`] = \"bg-yellow-200\";\n              }\n              return newStyles;\n            });\n          } else if (type === \"correct\") {\n            // Reveal column\n            setRevealedCols(prev => {\n              const newRevealed = [...prev];\n              newRevealed[index] = true;\n              return newRevealed;\n            });\n          } else if (type === \"incorrect\") {\n            // Turn column cells grey\n            setCellStyles(prev => {\n              const newStyles = {\n                ...prev\n              };\n              for (let row = 0; row < GRID_SIZE; row++) {\n                newStyles[`${row}-${index}`] = \"bg-gray-400\";\n              }\n              return newStyles;\n            });\n          }\n        }\n      });\n      return () => unsubscribe();\n    }\n  }, [isHost, roomId]);\n\n  // Host: Toggle row\n  const toggleRow = async rowIndex => {\n    if (!isHost) return;\n    setRevealedRows(prev => {\n      const newRevealed = [...prev];\n      newRevealed[rowIndex] = !newRevealed[rowIndex];\n      return newRevealed;\n    });\n    try {\n      await setSelectedRow(roomId, rowIndex.toString());\n      // Send open signal\n      await fetch(\"/api/rooms/round/action\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          room_id: roomId,\n          action: {\n            type: \"open\",\n            index: rowIndex,\n            isRow: true\n          }\n        })\n      });\n    } catch (error) {\n      console.error(\"Error sending open row signal:\", error);\n    }\n  };\n\n  // Host: Toggle column\n  const toggleCol = async colIndex => {\n    if (!isHost) return;\n    setRevealedCols(prev => {\n      const newRevealed = [...prev];\n      newRevealed[colIndex] = !newRevealed[colIndex];\n      return newRevealed;\n    });\n    try {\n      await setSelectedRow(roomId, colIndex.toString());\n      // Send open signal\n      await fetch(\"/api/rooms/round/action\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          room_id: roomId,\n          action: {\n            type: \"open\",\n            index: colIndex,\n            isRow: false\n          }\n        })\n      });\n    } catch (error) {\n      console.error(\"Error sending open column signal:\", error);\n    }\n  };\n\n  // Host: Handle number click to show menu\n  const handleNumberClick = (rowIndex, colIndex, event) => {\n    if (!isHost || !cell.includes(\"number\")) return;\n    const {\n      clientX,\n      clientY\n    } = event;\n    setMenu({\n      visible: true,\n      rowIndex,\n      colIndex,\n      x: clientX,\n      y: clientY\n    });\n  };\n\n  // Host: Handle menu actions\n  const handleMenuAction = async action => {\n    if (!menu.rowIndex && menu.colIndex === undefined) return;\n    const index = menu.rowIndex !== undefined ? menu.rowIndex : menu.colIndex;\n    const isRow = menu.rowIndex !== undefined && hintWords.some(word => word.y === index && word.direction === \"horizontal\");\n    try {\n      if (action === \"open\") {\n        if (isRow) {\n          await toggleRow(index);\n        } else {\n          await toggleCol(index);\n        }\n      } else {\n        // Send correct/incorrect signal\n        await fetch(\"/api/rooms/round/action\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            room_id: roomId,\n            action: {\n              type: action,\n              index,\n              isRow\n            }\n          })\n        });\n      }\n    } catch (error) {\n      console.error(`Error sending ${action} signal:`, error);\n    }\n    setMenu({\n      visible: false,\n      x: 0,\n      y: 0\n    });\n  };\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setMenu({\n          visible: false,\n          x: 0,\n          y: 0\n        });\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6 relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\",\n      children: \"Trong c\\xE1c gi\\u1EA3i \\u0111\\u1EA5u th\\u1EC3 thao, nh\\u1EEFng \\u0111\\u1ED9i hay v\\u1EADn \\u0111\\u1ED9ng vi\\xEAn m\\u1EA1nh s\\u1EBD \\u0111\\u01B0\\u1EE3c x\\u1EBFp v\\xE0o c\\xF9ng m\\u1ED9t ho\\u1EB7c nhi\\u1EC1u nh\\xF3m trong khi b\\u1ED1c th\\u0103m \\u0111\\u1EC3 tr\\xE1nh vi\\u1EC7c g\\u1EB7p nhau s\\u1EDBm. T\\xEAn g\\u1ECDi chung c\\u1EE7a c\\xE1c nh\\xF3m v\\u1EADn \\u0111\\u1ED9ng vi\\xEAn n\\xE0y l\\xE0 g\\xEC?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map((cell, colIndex) => {\n          const isRevealed = revealedRows[rowIndex] && hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\") || revealedCols[colIndex] && hintWords.some(word => word.x === colIndex && word.direction === \"vertical\");\n          const cellKey = `${rowIndex}-${colIndex}`;\n          const cellBg = cellStyles[cellKey] || (cell === \"\" ? \"bg-white\" : \"bg-gray-50\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-10 h-10 flex items-center justify-center text-lg font-semibold select-none\n                    ${cell.includes(\"number\") ? \"text-blue-500 border-none\" : \"\"}\n                    ${cellBg}\n                    ${!cell.includes(\"number\") && isRevealed && !obstacleWord.includes(cell) ? \"text-black\" : !cell.includes(\"number\") ? \"text-transparent\" : \"\"}\n                    ${obstacleWord.includes(cell) && isRevealed && isNaN(Number(cell)) ? \"font-bold text-red-500\" : \"\"}`,\n            onClick: e => {\n              if (cell.includes(\"number\")) {\n                handleNumberClick(rowIndex, colIndex, e);\n              } else if (isHost) {\n                if (hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\")) {\n                  toggleRow(rowIndex);\n                } else if (hintWords.some(word => word.x === colIndex && word.direction === \"vertical\")) {\n                  toggleCol(colIndex);\n                }\n              }\n            },\n            style: {\n              cursor: isHost && (cell.includes(\"number\") || hintWords.some(word => word.y === rowIndex || word.x === colIndex)) ? \"pointer\" : \"default\"\n            },\n            children: cell.includes(\"number\") ? cell.replace(\"number\", \"\").trim() : cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 17\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), menu.visible && /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: menuRef,\n      className: \"absolute bg-white border border-gray-300 rounded shadow-lg flex flex-col z-10\",\n      style: {\n        top: menu.y,\n        left: menu.x\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-4 py-2 text-sm hover:bg-gray-100\",\n        onClick: () => handleMenuAction(\"open\"),\n        children: \"Open\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-4 py-2 text-sm hover:bg-gray-100\",\n        onClick: () => handleMenuAction(\"correct\"),\n        children: \"Correct\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"px-4 py-2 text-sm hover:bg-gray-100\",\n        onClick: () => handleMenuAction(\"incorrect\"),\n        children: \"Incorrect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionBoxRound2, \"H8oQvMLg1AFF4bsjDl6Wki4uRVQ=\", false, function () {\n  return [useSearchParams, usePlayer];\n});\n_c = QuestionBoxRound2;\nexport default QuestionBoxRound2;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound2\");","map":{"version":3,"names":["React","useState","useEffect","useRef","renderGrid","usePlayer","useSearchParams","setSelectedRow","listenToGridActions","jsxDEV","_jsxDEV","mainKeyword","QuestionBoxRound2","obstacleWord","hintWordArray","initialGrid","isHost","_s","console","log","searchParams","setInitialGrid","roomId","get","GRID_SIZE","generateEmptyGrid","Array","fill","map","grid","setGrid","revealedRows","setRevealedRows","revealedCols","setRevealedCols","hintWords","setHintWords","cellStyles","setCellStyles","menu","setMenu","visible","x","y","menuRef","wordList","randomHintWords","newGrid","saveGrid","response","fetch","method","headers","body","JSON","stringify","room_id","round","ok","Error","json","error","unsubscribe","action","type","index","isRow","prev","newStyles","col","newRevealed","row","toggleRow","rowIndex","toString","toggleCol","colIndex","handleNumberClick","event","cell","includes","clientX","clientY","handleMenuAction","undefined","some","word","direction","handleClickOutside","current","contains","target","document","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","isRevealed","cellKey","cellBg","isNaN","Number","onClick","e","style","cursor","replace","trim","ref","top","left","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round2.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { renderGrid } from \"./utils\";\r\nimport { usePlayer } from \"../../context/playerContext\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { setSelectedRow, listenToGridActions } from \"../../components/services\"; // Assume this includes the new listener\r\n\r\ninterface HintWord {\r\n  word: string;\r\n  x: number;\r\n  y: number;\r\n  direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n  obstacleWord?: string;\r\n  hintWordArray?: string[];\r\n  isHost?: boolean;\r\n  initialGrid?: string[][];\r\n}\r\n\r\nconst mainKeyword = \"BÒCÔNGANH\";\r\n\r\nconst QuestionBoxRound2: React.FC<ObstacleQuestionBoxProps> = ({\r\n  obstacleWord = mainKeyword,\r\n  hintWordArray,\r\n  initialGrid,\r\n  isHost = false,\r\n}) => {\r\n  console.log(\"hintWordArray\", typeof hintWordArray, hintWordArray);\r\n  console.log(\"obstacle\", obstacleWord);\r\n\r\n  const [searchParams] = useSearchParams();\r\n  const { setInitialGrid } = usePlayer();\r\n  const roomId = searchParams.get(\"roomId\") || \"\";\r\n  const GRID_SIZE = 20;\r\n\r\n  const generateEmptyGrid = () => {\r\n    return Array(GRID_SIZE)\r\n      .fill(null)\r\n      .map(() => Array(GRID_SIZE).fill(\"\"));\r\n  };\r\n\r\n  const [grid, setGrid] = useState<string[][]>(generateEmptyGrid());\r\n  const [revealedRows, setRevealedRows] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n  const [revealedCols, setRevealedCols] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n  const [hintWords, setHintWords] = useState<HintWord[]>([]);\r\n  const [cellStyles, setCellStyles] = useState<Record<string, string>>({}); // Tracks background colors\r\n  const [menu, setMenu] = useState<{\r\n    visible: boolean;\r\n    rowIndex?: number;\r\n    colIndex?: number;\r\n    x: number;\r\n    y: number;\r\n  }>({ visible: false, x: 0, y: 0 });\r\n\r\n  // Ref to track menu container\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Initialize grid for host or player\r\n  useEffect(() => {\r\n    if (isHost) {\r\n      if (hintWordArray && obstacleWord) {\r\n        const wordList = [\"GIÓ\", \"HẠTGIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂUKIỆTLUÂN\"];\r\n        const { randomHintWords, newGrid } = renderGrid(hintWordArray, obstacleWord, GRID_SIZE);\r\n        console.log(\"randomHintWords\", randomHintWords);\r\n        console.log(\"newGrid\", newGrid);\r\n        setHintWords(randomHintWords);\r\n        setInitialGrid(newGrid);\r\n        setGrid(newGrid);\r\n\r\n        // Send grid to backend (as in previous response)\r\n        const saveGrid = async () => {\r\n          try {\r\n            const response = await fetch(\"/api/rooms/round\", {\r\n              method: \"POST\",\r\n              headers: { \"Content-Type\": \"application/json\" },\r\n              body: JSON.stringify({\r\n                room_id: roomId,\r\n                round: \"2\",\r\n                grid: { grid: newGrid },\r\n              }),\r\n            });\r\n            if (!response.ok) throw new Error(\"Failed to save grid\");\r\n            console.log(\"Grid saved:\", await response.json());\r\n          } catch (error) {\r\n            console.error(\"Error saving grid:\", error);\r\n          }\r\n        };\r\n        saveGrid();\r\n      }\r\n    } else {\r\n      if (initialGrid) {\r\n        setGrid(initialGrid);\r\n      }\r\n    }\r\n  }, [isHost, hintWordArray, obstacleWord, initialGrid, roomId, setInitialGrid]);\r\n\r\n  // Player: Listen for grid actions (open, correct, incorrect)\r\n  useEffect(() => {\r\n    if (!isHost) {\r\n      const unsubscribe = listenToGridActions(roomId, (action) => {\r\n        if (!action) return;\r\n        const { type, index, isRow } = action;\r\n        if (isRow) {\r\n          if (type === \"open\") {\r\n            // Turn row cells yellow\r\n            setCellStyles((prev) => {\r\n              const newStyles = { ...prev };\r\n              for (let col = 0; col < GRID_SIZE; col++) {\r\n                newStyles[`${index}-${col}`] = \"bg-yellow-200\";\r\n              }\r\n              return newStyles;\r\n            });\r\n          } else if (type === \"correct\") {\r\n            // Reveal row\r\n            setRevealedRows((prev) => {\r\n              const newRevealed = [...prev];\r\n              newRevealed[index] = true;\r\n              return newRevealed;\r\n            });\r\n          } else if (type === \"incorrect\") {\r\n            // Turn row cells grey\r\n            setCellStyles((prev) => {\r\n              const newStyles = { ...prev };\r\n              for (let col = 0; col < GRID_SIZE; col++) {\r\n                newStyles[`${index}-${col}`] = \"bg-gray-400\";\r\n              }\r\n              return newStyles;\r\n            });\r\n          }\r\n        } else {\r\n          if (type === \"open\") {\r\n            // Turn column cells yellow\r\n            setCellStyles((prev) => {\r\n              const newStyles = { ...prev };\r\n              for (let row = 0; row < GRID_SIZE; row++) {\r\n                newStyles[`${row}-${index}`] = \"bg-yellow-200\";\r\n              }\r\n              return newStyles;\r\n            });\r\n          } else if (type === \"correct\") {\r\n            // Reveal column\r\n            setRevealedCols((prev) => {\r\n              const newRevealed = [...prev];\r\n              newRevealed[index] = true;\r\n              return newRevealed;\r\n            });\r\n          } else if (type === \"incorrect\") {\r\n            // Turn column cells grey\r\n            setCellStyles((prev) => {\r\n              const newStyles = { ...prev };\r\n              for (let row = 0; row < GRID_SIZE; row++) {\r\n                newStyles[`${row}-${index}`] = \"bg-gray-400\";\r\n              }\r\n              return newStyles;\r\n            });\r\n          }\r\n        }\r\n      });\r\n      return () => unsubscribe();\r\n    }\r\n  }, [isHost, roomId]);\r\n\r\n  // Host: Toggle row\r\n  const toggleRow = async (rowIndex: number) => {\r\n    if (!isHost) return;\r\n    setRevealedRows((prev) => {\r\n      const newRevealed = [...prev];\r\n      newRevealed[rowIndex] = !newRevealed[rowIndex];\r\n      return newRevealed;\r\n    });\r\n    try {\r\n      await setSelectedRow(roomId, rowIndex.toString());\r\n      // Send open signal\r\n      await fetch(\"/api/rooms/round/action\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          room_id: roomId,\r\n          action: { type: \"open\", index: rowIndex, isRow: true },\r\n        }),\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error sending open row signal:\", error);\r\n    }\r\n  };\r\n\r\n  // Host: Toggle column\r\n  const toggleCol = async (colIndex: number) => {\r\n    if (!isHost) return;\r\n    setRevealedCols((prev) => {\r\n      const newRevealed = [...prev];\r\n      newRevealed[colIndex] = !newRevealed[colIndex];\r\n      return newRevealed;\r\n    });\r\n    try {\r\n      await setSelectedRow(roomId, colIndex.toString());\r\n      // Send open signal\r\n      await fetch(\"/api/rooms/round/action\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          room_id: roomId,\r\n          action: { type: \"open\", index: colIndex, isRow: false },\r\n        }),\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error sending open column signal:\", error);\r\n    }\r\n  };\r\n\r\n  // Host: Handle number click to show menu\r\n  const handleNumberClick = (\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    event: React.MouseEvent\r\n  ) => {\r\n    if (!isHost || !cell.includes(\"number\")) return;\r\n    const { clientX, clientY } = event;\r\n    setMenu({\r\n      visible: true,\r\n      rowIndex,\r\n      colIndex,\r\n      x: clientX,\r\n      y: clientY,\r\n    });\r\n  };\r\n\r\n  // Host: Handle menu actions\r\n  const handleMenuAction = async (action: \"open\" | \"correct\" | \"incorrect\") => {\r\n    if (!menu.rowIndex && menu.colIndex === undefined) return;\r\n    const index = menu.rowIndex !== undefined ? menu.rowIndex : menu.colIndex!;\r\n    const isRow = menu.rowIndex !== undefined && hintWords.some(\r\n      (word) => word.y === index && word.direction === \"horizontal\"\r\n    );\r\n\r\n    try {\r\n      if (action === \"open\") {\r\n        if (isRow) {\r\n          await toggleRow(index);\r\n        } else {\r\n          await toggleCol(index);\r\n        }\r\n      } else {\r\n        // Send correct/incorrect signal\r\n        await fetch(\"/api/rooms/round/action\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            room_id: roomId,\r\n            action: { type: action, index, isRow },\r\n          }),\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error sending ${action} signal:`, error);\r\n    }\r\n    setMenu({ visible: false, x: 0, y: 0 });\r\n  };\r\n\r\n  // Close menu when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n        setMenu({ visible: false, x: 0, y: 0 });\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6 relative\">\r\n      <div className=\"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\">\r\n        Trong các giải đấu thể thao, những đội hay vận động viên mạnh sẽ được xếp vào cùng một hoặc nhiều nhóm trong khi bốc thăm để tránh việc gặp nhau sớm. Tên gọi chung của các nhóm vận động viên này là gì?\r\n      </div>\r\n      <div className=\"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\">\r\n        {grid.map((row, rowIndex) => (\r\n          <React.Fragment key={rowIndex}>\r\n            {row.map((cell, colIndex) => {\r\n              const isRevealed =\r\n                (revealedRows[rowIndex] &&\r\n                  hintWords.some(\r\n                    (word) => word.y === rowIndex && word.direction === \"horizontal\"\r\n                  )) ||\r\n                (revealedCols[colIndex] &&\r\n                  hintWords.some(\r\n                    (word) => word.x === colIndex && word.direction === \"vertical\"\r\n                  ));\r\n\r\n              const cellKey = `${rowIndex}-${colIndex}`;\r\n              const cellBg = cellStyles[cellKey] || (cell === \"\" ? \"bg-white\" : \"bg-gray-50\");\r\n\r\n              return (\r\n                <div\r\n                  key={colIndex}\r\n                  className={`w-10 h-10 flex items-center justify-center text-lg font-semibold select-none\r\n                    ${cell.includes(\"number\") ? \"text-blue-500 border-none\" : \"\"}\r\n                    ${cellBg}\r\n                    ${\r\n                      !cell.includes(\"number\") && isRevealed && !obstacleWord.includes(cell)\r\n                        ? \"text-black\"\r\n                        : !cell.includes(\"number\")\r\n                        ? \"text-transparent\"\r\n                        : \"\"\r\n                    }\r\n                    ${\r\n                      obstacleWord.includes(cell) && isRevealed && isNaN(Number(cell))\r\n                        ? \"font-bold text-red-500\"\r\n                        : \"\"\r\n                    }`}\r\n                  onClick={(e) => {\r\n                    if (cell.includes(\"number\")) {\r\n                      handleNumberClick(rowIndex, colIndex, e);\r\n                    } else if (isHost) {\r\n                      if (\r\n                        hintWords.some(\r\n                          (word) => word.y === rowIndex && word.direction === \"horizontal\"\r\n                        )\r\n                      ) {\r\n                        toggleRow(rowIndex);\r\n                      } else if (\r\n                        hintWords.some(\r\n                          (word) => word.x === colIndex && word.direction === \"vertical\"\r\n                        )\r\n                      ) {\r\n                        toggleCol(colIndex);\r\n                      }\r\n                    }\r\n                  }}\r\n                  style={{\r\n                    cursor:\r\n                      isHost &&\r\n                      (cell.includes(\"number\") ||\r\n                        hintWords.some(\r\n                          (word) => word.y === rowIndex || word.x === colIndex\r\n                        ))\r\n                        ? \"pointer\"\r\n                        : \"default\",\r\n                  }}\r\n                >\r\n                  {cell.includes(\"number\") ? cell.replace(\"number\", \"\").trim() : cell}\r\n                </div>\r\n              );\r\n            })}\r\n          </React.Fragment>\r\n        ))}\r\n      </div>\r\n      {menu.visible && (\r\n        <div\r\n          ref={menuRef}\r\n          className=\"absolute bg-white border border-gray-300 rounded shadow-lg flex flex-col z-10\"\r\n          style={{ top: menu.y, left: menu.x }}\r\n        >\r\n          <button\r\n            className=\"px-4 py-2 text-sm hover:bg-gray-100\"\r\n            onClick={() => handleMenuAction(\"open\")}\r\n          >\r\n            Open\r\n          </button>\r\n          <button\r\n            className=\"px-4 py-2 text-sm hover:bg-gray-100\"\r\n            onClick={() => handleMenuAction(\"correct\")}\r\n          >\r\n            Correct\r\n          </button>\r\n          <button\r\n            className=\"px-4 py-2 text-sm hover:bg-gray-100\"\r\n            onClick={() => handleMenuAction(\"incorrect\")}\r\n          >\r\n            Incorrect\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionBoxRound2;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}