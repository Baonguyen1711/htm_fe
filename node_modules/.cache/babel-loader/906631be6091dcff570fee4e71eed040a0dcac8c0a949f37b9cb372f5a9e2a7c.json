{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\context\\\\timeListenerContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport { listenToTimeStart } from \"../services/firebaseServices\";\nimport { useSounds } from \"./soundContext\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimeStartContext = /*#__PURE__*/createContext(undefined);\nexport const TimeStartProvider = ({\n  roomId,\n  children\n}) => {\n  _s();\n  // const {setAnimationKey} = useHost();\n  const [timeLeft, setTimeLeft] = useState(0);\n  const timerRef = useRef(null);\n  const sounds = useSounds();\n  const [searchParams] = useSearchParams();\n  const round = searchParams.get(\"round\") || \"1\";\n  const startTimer = async duration => {\n    // Clear any existing timer\n    if (timerRef.current) clearInterval(timerRef.current);\n    console.log(\"duration\", duration);\n\n    // Set the new time\n    setTimeLeft(duration);\n\n    // Start the countdown\n    timerRef.current = setInterval(() => {\n      setTimeLeft(prev => {\n        console.log(prev);\n        if (prev <= 1) {\n          // setAnimationKey((prev: number) => prev + 1);\n          clearInterval(timerRef.current);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const setExternalTimer = seconds => {\n    startTimer(seconds);\n  };\n  const isInitialMount = useRef(true);\n  useEffect(() => {\n    if (timerRef.current) clearInterval(timerRef.current);\n    console.log(\"isInitialMount  before\", isInitialMount.current);\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n      return;\n    }\n    console.log(\"isInitialMount  after\", isInitialMount.current);\n    const unsubscribe = listenToTimeStart(roomId, async () => {\n      console.log(\"round on time listener\", round);\n      if (round === \"1\") {\n        startTimer(10);\n      }\n      if (round === \"2\") {\n        startTimer(15);\n      }\n      if (round === \"3\") {\n        startTimer(60);\n      }\n      if (round === \"4\") {\n        startTimer(15);\n      }\n\n      // or 60 depending on your needs\n    });\n    return () => {\n      unsubscribe();\n      if (timerRef.current) clearInterval(timerRef.current);\n    };\n  }, [round]);\n  return /*#__PURE__*/_jsxDEV(TimeStartContext.Provider, {\n    value: {\n      timeLeft,\n      startTimer,\n      setExternalTimer\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeStartProvider, \"fnHpNhzXQHVGp9+9f9hGAc7QQyM=\", false, function () {\n  return [useSounds, useSearchParams];\n});\n_c = TimeStartProvider;\nexport const useTimeStart = () => {\n  _s2();\n  const context = useContext(TimeStartContext);\n  if (!context) {\n    throw new Error(\"useTimeStart must be used within a TimeStartProvider\");\n  }\n  return context;\n};\n_s2(useTimeStart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TimeStartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useRef","useState","listenToTimeStart","useSounds","useSearchParams","jsxDEV","_jsxDEV","TimeStartContext","undefined","TimeStartProvider","roomId","children","_s","timeLeft","setTimeLeft","timerRef","sounds","searchParams","round","get","startTimer","duration","current","clearInterval","console","log","setInterval","prev","setExternalTimer","seconds","isInitialMount","unsubscribe","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTimeStart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/context/timeListenerContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { deletePath, listenToTimeStart } from \"../services/firebaseServices\";\r\nimport { useSounds } from \"./soundContext\";\r\nimport { round } from \"react-placeholder/lib/placeholders\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { useHost } from \"./hostContext\";\r\n\r\ntype TimeStartContextType = {\r\n  timeLeft: number;\r\n  startTimer: (duration: number) => void;\r\n  setExternalTimer: (seconds: number) => void;\r\n};\r\n\r\nconst TimeStartContext = createContext<TimeStartContextType | undefined>(undefined);\r\n\r\nexport const TimeStartProvider: React.FC<{ roomId: string; children: React.ReactNode }> = ({\r\n  roomId,\r\n  children,\r\n}) => {\r\n  // const {setAnimationKey} = useHost();\r\n  const [timeLeft, setTimeLeft] = useState<number>(0);\r\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\r\n  const sounds = useSounds();\r\n  const [searchParams] = useSearchParams();\r\n  const round = searchParams.get(\"round\") || \"1\";\r\n\r\n  const startTimer = async (duration: number) => {\r\n    // Clear any existing timer\r\n    if (timerRef.current) clearInterval(timerRef.current);\r\n    console.log(\"duration\", duration);\r\n\r\n    // Set the new time\r\n    setTimeLeft(duration);\r\n\r\n    // Start the countdown\r\n    timerRef.current = setInterval(() => {\r\n      setTimeLeft((prev) => {\r\n        console.log(prev);\r\n        if (prev <= 1) {\r\n          // setAnimationKey((prev: number) => prev + 1);\r\n          clearInterval(timerRef.current!);\r\n          return 0;\r\n        }\r\n        return prev - 1;\r\n      });\r\n    }, 1000);\r\n  };\r\n  const setExternalTimer = (seconds: number) => {\r\n    startTimer(seconds);\r\n  };\r\n\r\n  const isInitialMount = useRef(true);\r\n  useEffect(() => {\r\n    if (timerRef.current) clearInterval(timerRef.current);\r\n    console.log(\"isInitialMount  before\", isInitialMount.current);\r\n\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n      return;\r\n    }\r\n\r\n    console.log(\"isInitialMount  after\", isInitialMount.current);\r\n    const unsubscribe = listenToTimeStart(roomId, async () => {\r\n      console.log(\"round on time listener\", round);\r\n\r\n      if (round === \"1\") {\r\n        startTimer(10);\r\n      }\r\n\r\n      if (round === \"2\") {\r\n        startTimer(15);\r\n      }\r\n\r\n      if (round === \"3\") {\r\n        startTimer(60);\r\n      }\r\n\r\n      if (round === \"4\") {\r\n        startTimer(15);\r\n      }\r\n\r\n      // or 60 depending on your needs\r\n    });\r\n\r\n    return () => {\r\n      unsubscribe();\r\n      if (timerRef.current) clearInterval(timerRef.current);\r\n    };\r\n  }, [round]);\r\n\r\n  return (\r\n    <TimeStartContext.Provider value={{ timeLeft, startTimer, setExternalTimer }}>\r\n      {children}\r\n    </TimeStartContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTimeStart = (): TimeStartContextType => {\r\n  const context = useContext(TimeStartContext);\r\n  if (!context) {\r\n    throw new Error(\"useTimeStart must be used within a TimeStartProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}