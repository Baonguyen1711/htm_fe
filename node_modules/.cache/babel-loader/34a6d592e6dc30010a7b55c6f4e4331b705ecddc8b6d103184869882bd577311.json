{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\Host\\\\Management\\\\HostRound2.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HostRound2 = () => {\n  var _s = $RefreshSig$();\n  // Game logic\n  const wordArr = [\"PLANET\", \"STAR\", \"GALAXY\", \"ORBIT\", \"MOON\", \"SUN\"];\n  let wordBank = [];\n  let wordsActive = [];\n  let board = Array(20).fill(null).map(() => Array(50).fill(null));\n  let isPos = Array(20).fill(false).map(() => Array(50).fill(false));\n  let classesOfBoard = Array(20).fill(null).map(() => Array(50).fill(null).map(() => []));\n  const Bounds = {\n    top: 50,\n    bottom: 0,\n    left: 20,\n    right: 0,\n    Update: function (x, y) {\n      this.top = Math.min(this.top, y);\n      this.bottom = Math.max(this.bottom, y);\n      this.left = Math.min(this.left, x);\n      this.right = Math.max(this.right, x);\n    }\n  };\n  function PrepareBoard() {\n    wordBank = [];\n    for (let i = 0, len = wordArr.length; i < len; i++) {\n      let actualPos = i + 1;\n      wordBank.push({\n        string: ' ' + actualPos.toString() + wordArr[i] + ' ',\n        char: (' ' + actualPos.toString() + wordArr[i] + ' ').split(''),\n        totalMatches: 0,\n        effectiveMatches: 0,\n        successfulMatches: [],\n        x: 0,\n        y: 0,\n        dir: 0\n      });\n    }\n    for (let i = 0; i < wordBank.length; i++) {\n      let wA = wordBank[i];\n      for (let j = 0; j < wA.char.length; j++) {\n        let cA = wA.char[j];\n        for (let k = 0; k < wordBank.length; k++) {\n          if (k === i) continue;\n          let wB = wordBank[k];\n          for (let l = 0; l < wB.char.length; l++) {\n            wA.totalMatches += cA === wB.char[l] ? 1 : 0;\n          }\n        }\n      }\n    }\n  }\n  function findWordIdx(givenWord) {\n    givenWord = givenWord.substring(2, givenWord.length - 1);\n    for (let i = 0, len = wordArr.length; i < len; i++) {\n      if (givenWord === wordArr[i]) return i + 1;\n    }\n    return -1;\n  }\n  function AddWordToBoard() {\n    let curIndex,\n      minMatchDiff = 9999;\n    if (wordsActive.length < 1) {\n      curIndex = 0;\n      for (let i = 0, len = wordBank.length; i < len; i++) {\n        if (wordBank[i].totalMatches < wordBank[curIndex].totalMatches) {\n          curIndex = i;\n        }\n      }\n      wordBank[curIndex].successfulMatches = [{\n        x: 12,\n        y: 12,\n        dir: 0\n      }];\n    } else {\n      curIndex = -1;\n      for (let i = 0, len = wordBank.length; i < len; i++) {\n        let curWord = wordBank[i];\n        curWord.effectiveMatches = 0;\n        curWord.successfulMatches = [];\n        for (let j = 0, lenJ = curWord.char.length; j < lenJ; j++) {\n          if (j === 1) continue;\n          let curChar = curWord.char[j];\n          for (let k = 0, lenK = wordsActive.length; k < lenK; k++) {\n            let testWord = wordsActive[k];\n            for (let l = 0, lenL = testWord.char.length; l < lenL; l++) {\n              if (l === 1) continue;\n              let testChar = testWord.char[l];\n              if (curChar === testChar) {\n                curWord.effectiveMatches++;\n                let curCross = {\n                  x: testWord.x,\n                  y: testWord.y,\n                  dir: 0\n                };\n                if (testWord.dir === 0) {\n                  curCross.dir = 1;\n                  curCross.x += l;\n                  curCross.y -= j;\n                } else {\n                  curCross.dir = 0;\n                  curCross.y += l;\n                  curCross.x -= j;\n                }\n                let isMatch = true;\n                for (let m = -1, lenM = curWord.char.length + 1; m < lenM; m++) {\n                  let crossVal = [];\n                  if (m !== j) {\n                    if (curCross.dir === 0) {\n                      let xIndex = curCross.x + m;\n                      if (xIndex < 0 || xIndex >= board.length) {\n                        isMatch = false;\n                        break;\n                      }\n                      crossVal.push(board[xIndex][curCross.y]);\n                      crossVal.push(board[xIndex][curCross.y + 1] || null);\n                      crossVal.push(board[xIndex][curCross.y - 1] || null);\n                    } else {\n                      let yIndex = curCross.y + m;\n                      if (yIndex < 0 || yIndex >= board[curCross.x].length) {\n                        isMatch = false;\n                        break;\n                      }\n                      crossVal.push(board[curCross.x][yIndex]);\n                      crossVal.push(board[curCross.x + 1] ? board[curCross.x + 1][yIndex] : null);\n                      crossVal.push(board[curCross.x - 1] ? board[curCross.x - 1][yIndex] : null);\n                    }\n                    if (m > -1 && m < lenM - 1) {\n                      if (crossVal[0] !== curWord.char[m]) {\n                        if (crossVal[0] !== null || crossVal[1] !== null || crossVal[2] !== null) {\n                          isMatch = false;\n                          break;\n                        }\n                      }\n                    } else if (crossVal[0] !== null) {\n                      isMatch = false;\n                      break;\n                    }\n                  }\n                }\n                if (isMatch) {\n                  curWord.successfulMatches.push(curCross);\n                }\n              }\n            }\n          }\n        }\n        let curMatchDiff = curWord.totalMatches - curWord.effectiveMatches;\n        if (curMatchDiff < minMatchDiff && curWord.successfulMatches.length > 0) {\n          minMatchDiff = curMatchDiff;\n          curIndex = i;\n        } else if (curMatchDiff <= 0) {\n          return false;\n        }\n      }\n    }\n    if (curIndex === -1) {\n      return false;\n    }\n    let spliced = wordBank.splice(curIndex, 1);\n    wordsActive.push(spliced[0]);\n    let pushIndex = wordsActive.length - 1,\n      rand = Math.random(),\n      matchArr = wordsActive[pushIndex].successfulMatches,\n      matchIndex = Math.floor(rand * matchArr.length),\n      matchData = matchArr[matchIndex];\n    wordsActive[pushIndex].x = matchData.x;\n    wordsActive[pushIndex].y = matchData.y;\n    wordsActive[pushIndex].dir = matchData.dir;\n    let actualIndex = findWordIdx(wordsActive[pushIndex].string);\n    for (let i = 0, len = wordsActive[pushIndex].char.length; i < len; i++) {\n      let xIndex = matchData.x,\n        yIndex = matchData.y;\n      if (matchData.dir === 0) {\n        xIndex += i;\n      } else {\n        yIndex += i;\n      }\n      board[xIndex][yIndex] = wordsActive[pushIndex].char[i];\n      isPos[xIndex][yIndex] = i === 1;\n      classesOfBoard[xIndex][yIndex].push(actualIndex);\n      Bounds.Update(xIndex, yIndex);\n    }\n    return true;\n  }\n  function PopulateBoard() {\n    PrepareBoard();\n    for (let i = 0, isOk = true, len = wordArr.length; i < len && isOk; i++) {\n      isOk = AddWordToBoard();\n    }\n    return isOk;\n  }\n  function BoardCharToElement(char, isPosition, classes) {\n    let className = \"w-8 h-8 flex items-center justify-center border border-gray-300 text-lg font-bold \";\n    if (char === null) {\n      className += \"bg-white\";\n      char = \"\";\n    } else if (isPosition) {\n      className += \"bg-blue-200 cursor-pointer\";\n    } else {\n      className += \"bg-white\";\n    }\n    return `<div class=\"${className}\" data-classes=\"${classes.join(',')}\" data-is-pos=\"${isPosition}\">${char || \"\"}</div>`;\n  }\n  function BoardToHtml(blank = \"\") {\n    let str = \"\";\n    for (let i = Bounds.top - 1; i < Bounds.bottom + 2; i++) {\n      str += \"<div class='flex'>\";\n      for (let j = Bounds.left - 1; j < Bounds.right + 2; j++) {\n        str += BoardCharToElement(board[j][i], isPos[j][i], classesOfBoard[j][i]);\n      }\n      str += \"</div>\";\n    }\n    return str;\n  }\n\n  // React Component\n  const KnowledgeGame = () => {\n    _s();\n    const [boardHtml, setBoardHtml] = React.useState(\"\");\n    const [wordStates, setWordStates] = React.useState(wordArr.reduce((acc, _, idx) => ({\n      ...acc,\n      [idx + 1]: \"unrevealed\"\n    }), {}));\n    const [selectedNumber, setSelectedNumber] = React.useState(null);\n    const initializeBoard = () => {\n      // Reset board state\n      board = Array(20).fill(null).map(() => Array(50).fill(null));\n      isPos = Array(20).fill(false).map(() => Array(50).fill(false));\n      classesOfBoard = Array(20).fill(null).map(() => Array(50).fill(null).map(() => []));\n      Bounds.top = 50;\n      Bounds.bottom = 0;\n      Bounds.left = 20;\n      Bounds.right = 0;\n      wordsActive = [];\n      PopulateBoard();\n      setBoardHtml(BoardToHtml());\n    };\n    React.useEffect(() => {\n      initializeBoard();\n    }, []);\n    const handleNumberClick = classes => {\n      if (classes.length > 0) {\n        setSelectedNumber(classes[0]);\n      }\n    };\n    const handleMenuAction = action => {\n      if (selectedNumber !== null) {\n        setWordStates(prev => ({\n          ...prev,\n          [selectedNumber]: action\n        }));\n        setSelectedNumber(null);\n        // Update board to reflect new word states\n        setBoardHtml(BoardToHtml());\n      }\n    };\n    const handleShuffle = () => {\n      initializeBoard();\n      setWordStates(wordArr.reduce((acc, _, idx) => ({\n        ...acc,\n        [idx + 1]: \"unrevealed\"\n      }), {}));\n    };\n    const getCellClass = (classes, isPos) => {\n      let className = \"w-8 h-8 flex items-center justify-center border border-gray-300 text-lg font-bold \";\n      if (!classes.length) {\n        className += \"bg-white\";\n      } else if (isPos) {\n        className += \"bg-blue-200 cursor-pointer\";\n      } else {\n        const state = wordStates[classes[0]];\n        if (state === \"unrevealed\") className += \"bg-white\";else if (state === \"open\") className += \"bg-yellow-200\";else if (state === \"incorrect\") className += \"bg-gray-200\";else if (state === \"correct\") className += \"bg-green-200\";\n      }\n      return className;\n    };\n    const renderBoard = () => {\n      const rows = [];\n      for (let i = Bounds.top - 1; i < Bounds.bottom + 2; i++) {\n        const cells = [];\n        for (let j = Bounds.left - 1; j < Bounds.right + 2; j++) {\n          const classes = classesOfBoard[j][i];\n          const isPosition = isPos[j][i];\n          const char = board[j][i] || \"\";\n          cells.push(/*#__PURE__*/_jsxDEV(\"div\", {\n            className: getCellClass(classes, isPosition),\n            onClick: () => isPosition && handleNumberClick(classes),\n            \"data-classes\": classes.join(','),\n            \"data-is-pos\": isPosition,\n            children: char\n          }, `${j}-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this));\n        }\n        rows.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex\",\n          children: cells\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 21\n        }, this));\n      }\n      return rows;\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 max-w-4xl mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold mb-4\",\n        children: \"Knowledge Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleShuffle,\n        className: \"mb-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n        children: \"Shuffle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-block\",\n        children: renderBoard()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }, this), selectedNumber !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-4 rounded shadow-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-lg font-bold mb-2\",\n            children: [\"Hint \", selectedNumber]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleMenuAction(\"open\"),\n            className: \"block w-full mb-2 px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600\",\n            children: \"Open\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleMenuAction(\"incorrect\"),\n            className: \"block w-full mb-2 px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600\",\n            children: \"Incorrect\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleMenuAction(\"correct\"),\n            className: \"block w-full mb-2 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600\",\n            children: \"Correct\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setSelectedNumber(null),\n            className: \"block w-full px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\",\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 9\n    }, this);\n  };\n  _s(KnowledgeGame, \"gsuelnpy1iaVuO4rqb6VEYIvjJk=\");\n};\n_c = HostRound2;\nexport default HostRound2;\nvar _c;\n$RefreshReg$(_c, \"HostRound2\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","HostRound2","_s","$RefreshSig$","wordArr","wordBank","wordsActive","board","Array","fill","map","isPos","classesOfBoard","Bounds","top","bottom","left","right","Update","x","y","Math","min","max","PrepareBoard","i","len","length","actualPos","push","string","toString","char","split","totalMatches","effectiveMatches","successfulMatches","dir","wA","j","cA","k","wB","l","findWordIdx","givenWord","substring","AddWordToBoard","curIndex","minMatchDiff","curWord","lenJ","curChar","lenK","testWord","lenL","testChar","curCross","isMatch","m","lenM","crossVal","xIndex","yIndex","curMatchDiff","spliced","splice","pushIndex","rand","random","matchArr","matchIndex","floor","matchData","actualIndex","PopulateBoard","isOk","BoardCharToElement","isPosition","classes","className","join","BoardToHtml","blank","str","KnowledgeGame","boardHtml","setBoardHtml","useState","wordStates","setWordStates","reduce","acc","_","idx","selectedNumber","setSelectedNumber","initializeBoard","useEffect","handleNumberClick","handleMenuAction","action","prev","handleShuffle","getCellClass","state","renderBoard","rows","cells","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/HostRound2.tsx"],"sourcesContent":["import Round2 from '../../../layouts/RoundBase/Round2';\r\nimport Host from '../../../layouts/Host/Host';\r\nimport QuestionBoxRound2 from '../../../layouts/RoundBase/Round2';\r\nimport { getQuestionByRound } from '../Test/service';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { Question } from '../../../type';\r\nimport { listenToBuzzing } from '../../../services/firebaseServices';\r\nimport { resetBuzz } from './service';\r\nimport { findCommonLetterPairs } from '../../../layouts/RoundBase/utils';\r\nimport { generateCrossword } from '../../../layouts/RoundBase/utils';\r\n\r\n\r\nconst HostRound2: React.FC = () => {\r\n  interface WordObj {\r\n      string: string;\r\n      char: string[];\r\n      totalMatches: number;\r\n      effectiveMatches: number;\r\n      successfulMatches: { x: number; y: number; dir: number }[];\r\n      x: number;\r\n      y: number;\r\n      dir: number;\r\n    }\r\n\r\n    interface Bounds {\r\n      top: number;\r\n      bottom: number;\r\n      left: number;\r\n      right: number;\r\n      Update: (x: number, y: number) => void;\r\n    }\r\n\r\n    // Game logic\r\n    const wordArr = [\"PLANET\", \"STAR\", \"GALAXY\", \"ORBIT\", \"MOON\", \"SUN\"];\r\n    let wordBank: WordObj[] = [];\r\n    let wordsActive: WordObj[] = [];\r\n    let board: (string | null)[][] = Array(20).fill(null).map(() => Array(50).fill(null));\r\n    let isPos: boolean[][] = Array(20).fill(false).map(() => Array(50).fill(false));\r\n    let classesOfBoard: number[][][] = Array(20).fill(null).map(() => Array(50).fill(null).map(() => []));\r\n    const Bounds: Bounds = {\r\n      top: 50,\r\n      bottom: 0,\r\n      left: 20,\r\n      right: 0,\r\n      Update: function (x: number, y: number) {\r\n        this.top = Math.min(this.top, y);\r\n        this.bottom = Math.max(this.bottom, y);\r\n        this.left = Math.min(this.left, x);\r\n        this.right = Math.max(this.right, x);\r\n      }\r\n    };\r\n\r\n    function PrepareBoard() {\r\n      wordBank = [];\r\n      for (let i = 0, len = wordArr.length; i < len; i++) {\r\n        let actualPos = i + 1;\r\n        wordBank.push({\r\n          string: ' ' + actualPos.toString() + wordArr[i] + ' ',\r\n          char: (' ' + actualPos.toString() + wordArr[i] + ' ').split(''),\r\n          totalMatches: 0,\r\n          effectiveMatches: 0,\r\n          successfulMatches: [],\r\n          x: 0,\r\n          y: 0,\r\n          dir: 0\r\n        });\r\n      }\r\n\r\n      for (let i = 0; i < wordBank.length; i++) {\r\n        let wA = wordBank[i];\r\n        for (let j = 0; j < wA.char.length; j++) {\r\n          let cA = wA.char[j];\r\n          for (let k = 0; k < wordBank.length; k++) {\r\n            if (k === i) continue;\r\n            let wB = wordBank[k];\r\n            for (let l = 0; l < wB.char.length; l++) {\r\n              wA.totalMatches += (cA === wB.char[l]) ? 1 : 0;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function findWordIdx(givenWord: string): number {\r\n      givenWord = givenWord.substring(2, givenWord.length - 1);\r\n      for (let i = 0, len = wordArr.length; i < len; i++) {\r\n        if (givenWord === wordArr[i]) return i + 1;\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    function AddWordToBoard(): boolean {\r\n      let curIndex: number, minMatchDiff = 9999;\r\n\r\n      if (wordsActive.length < 1) {\r\n        curIndex = 0;\r\n        for (let i = 0, len = wordBank.length; i < len; i++) {\r\n          if (wordBank[i].totalMatches < wordBank[curIndex].totalMatches) {\r\n            curIndex = i;\r\n          }\r\n        }\r\n        wordBank[curIndex].successfulMatches = [{ x: 12, y: 12, dir: 0 }];\r\n      } else {\r\n        curIndex = -1;\r\n\r\n        for (let i = 0, len = wordBank.length; i < len; i++) {\r\n          let curWord = wordBank[i];\r\n          curWord.effectiveMatches = 0;\r\n          curWord.successfulMatches = [];\r\n          for (let j = 0, lenJ = curWord.char.length; j < lenJ; j++) {\r\n            if (j === 1) continue;\r\n            let curChar = curWord.char[j];\r\n            for (let k = 0, lenK = wordsActive.length; k < lenK; k++) {\r\n              let testWord = wordsActive[k];\r\n              for (let l = 0, lenL = testWord.char.length; l < lenL; l++) {\r\n                if (l === 1) continue;\r\n                let testChar = testWord.char[l];\r\n                if (curChar === testChar) {\r\n                  curWord.effectiveMatches++;\r\n                  let curCross = { x: testWord.x, y: testWord.y, dir: 0 };\r\n                  if (testWord.dir === 0) {\r\n                    curCross.dir = 1;\r\n                    curCross.x += l;\r\n                    curCross.y -= j;\r\n                  } else {\r\n                    curCross.dir = 0;\r\n                    curCross.y += l;\r\n                    curCross.x -= j;\r\n                  }\r\n\r\n                  let isMatch = true;\r\n                  for (let m = -1, lenM = curWord.char.length + 1; m < lenM; m++) {\r\n                    let crossVal: (string | null)[] = [];\r\n                    if (m !== j) {\r\n                      if (curCross.dir === 0) {\r\n                        let xIndex = curCross.x + m;\r\n                        if (xIndex < 0 || xIndex >= board.length) {\r\n                          isMatch = false;\r\n                          break;\r\n                        }\r\n                        crossVal.push(board[xIndex][curCross.y]);\r\n                        crossVal.push(board[xIndex][curCross.y + 1] || null);\r\n                        crossVal.push(board[xIndex][curCross.y - 1] || null);\r\n                      } else {\r\n                        let yIndex = curCross.y + m;\r\n                        if (yIndex < 0 || yIndex >= board[curCross.x].length) {\r\n                          isMatch = false;\r\n                          break;\r\n                        }\r\n                        crossVal.push(board[curCross.x][yIndex]);\r\n                        crossVal.push(board[curCross.x + 1] ? board[curCross.x + 1][yIndex] : null);\r\n                        crossVal.push(board[curCross.x - 1] ? board[curCross.x - 1][yIndex] : null);\r\n                      }\r\n\r\n                      if (m > -1 && m < lenM - 1) {\r\n                        if (crossVal[0] !== curWord.char[m]) {\r\n                          if (crossVal[0] !== null || crossVal[1] !== null || crossVal[2] !== null) {\r\n                            isMatch = false;\r\n                            break;\r\n                          }\r\n                        }\r\n                      } else if (crossVal[0] !== null) {\r\n                        isMatch = false;\r\n                        break;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  if (isMatch) {\r\n                    curWord.successfulMatches.push(curCross);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          let curMatchDiff = curWord.totalMatches - curWord.effectiveMatches;\r\n          if (curMatchDiff < minMatchDiff && curWord.successfulMatches.length > 0) {\r\n            minMatchDiff = curMatchDiff;\r\n            curIndex = i;\r\n          } else if (curMatchDiff <= 0) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (curIndex === -1) {\r\n        return false;\r\n      }\r\n\r\n      let spliced = wordBank.splice(curIndex, 1);\r\n      wordsActive.push(spliced[0]);\r\n\r\n      let pushIndex = wordsActive.length - 1,\r\n          rand = Math.random(),\r\n          matchArr = wordsActive[pushIndex].successfulMatches,\r\n          matchIndex = Math.floor(rand * matchArr.length),\r\n          matchData = matchArr[matchIndex];\r\n\r\n      wordsActive[pushIndex].x = matchData.x;\r\n      wordsActive[pushIndex].y = matchData.y;\r\n      wordsActive[pushIndex].dir = matchData.dir;\r\n\r\n      let actualIndex = findWordIdx(wordsActive[pushIndex].string);\r\n      for (let i = 0, len = wordsActive[pushIndex].char.length; i < len; i++) {\r\n        let xIndex = matchData.x,\r\n            yIndex = matchData.y;\r\n\r\n        if (matchData.dir === 0) {\r\n          xIndex += i;\r\n        } else {\r\n          yIndex += i;\r\n        }\r\n        board[xIndex][yIndex] = wordsActive[pushIndex].char[i];\r\n        isPos[xIndex][yIndex] = (i === 1);\r\n        classesOfBoard[xIndex][yIndex].push(actualIndex);\r\n        Bounds.Update(xIndex, yIndex);\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    function PopulateBoard(): boolean {\r\n      PrepareBoard();\r\n      for (let i = 0, isOk = true, len = wordArr.length; i < len && isOk; i++) {\r\n        isOk = AddWordToBoard();\r\n      }\r\n      return isOk;\r\n    }\r\n\r\n    function BoardCharToElement(char: string | null, isPosition: boolean, classes: number[]): string {\r\n      let className = \"w-8 h-8 flex items-center justify-center border border-gray-300 text-lg font-bold \";\r\n      if (char === null) {\r\n        className += \"bg-white\";\r\n        char = \"\";\r\n      } else if (isPosition) {\r\n        className += \"bg-blue-200 cursor-pointer\";\r\n      } else {\r\n        className += \"bg-white\";\r\n      }\r\n      return `<div class=\"${className}\" data-classes=\"${classes.join(',')}\" data-is-pos=\"${isPosition}\">${char || \"\"}</div>`;\r\n    }\r\n\r\n    function BoardToHtml(blank: string = \"\"): string {\r\n      let str = \"\";\r\n      for (let i = Bounds.top - 1; i < Bounds.bottom + 2; i++) {\r\n        str += \"<div class='flex'>\";\r\n        for (let j = Bounds.left - 1; j < Bounds.right + 2; j++) {\r\n          str += BoardCharToElement(board[j][i], isPos[j][i], classesOfBoard[j][i]);\r\n        }\r\n        str += \"</div>\";\r\n      }\r\n      return str;\r\n    }\r\n\r\n    // React Component\r\n    const KnowledgeGame: React.FC = () => {\r\n      const [boardHtml, setBoardHtml] = React.useState<string>(\"\");\r\n      const [wordStates, setWordStates] = React.useState<{ [key: number]: string }>(\r\n        wordArr.reduce((acc, _, idx) => ({ ...acc, [idx + 1]: \"unrevealed\" }), {})\r\n      );\r\n      const [selectedNumber, setSelectedNumber] = React.useState<number | null>(null);\r\n\r\n      const initializeBoard = () => {\r\n        // Reset board state\r\n        board = Array(20).fill(null).map(() => Array(50).fill(null));\r\n        isPos = Array(20).fill(false).map(() => Array(50).fill(false));\r\n        classesOfBoard = Array(20).fill(null).map(() => Array(50).fill(null).map(() => []));\r\n        Bounds.top = 50;\r\n        Bounds.bottom = 0;\r\n        Bounds.left = 20;\r\n        Bounds.right = 0;\r\n        wordsActive = [];\r\n        PopulateBoard();\r\n        setBoardHtml(BoardToHtml());\r\n      };\r\n\r\n      React.useEffect(() => {\r\n        initializeBoard();\r\n      }, []);\r\n\r\n      const handleNumberClick = (classes: number[]) => {\r\n        if (classes.length > 0) {\r\n          setSelectedNumber(classes[0]);\r\n        }\r\n      };\r\n\r\n      const handleMenuAction = (action: string) => {\r\n        if (selectedNumber !== null) {\r\n          setWordStates(prev => ({\r\n            ...prev,\r\n            [selectedNumber]: action\r\n          }));\r\n          setSelectedNumber(null);\r\n          // Update board to reflect new word states\r\n          setBoardHtml(BoardToHtml());\r\n        }\r\n      };\r\n\r\n      const handleShuffle = () => {\r\n        initializeBoard();\r\n        setWordStates(wordArr.reduce((acc, _, idx) => ({ ...acc, [idx + 1]: \"unrevealed\" }), {}));\r\n      };\r\n\r\n      const getCellClass = (classes: number[], isPos: boolean) => {\r\n        let className = \"w-8 h-8 flex items-center justify-center border border-gray-300 text-lg font-bold \";\r\n        if (!classes.length) {\r\n          className += \"bg-white\";\r\n        } else if (isPos) {\r\n          className += \"bg-blue-200 cursor-pointer\";\r\n        } else {\r\n          const state = wordStates[classes[0]];\r\n          if (state === \"unrevealed\") className += \"bg-white\";\r\n          else if (state === \"open\") className += \"bg-yellow-200\";\r\n          else if (state === \"incorrect\") className += \"bg-gray-200\";\r\n          else if (state === \"correct\") className += \"bg-green-200\";\r\n        }\r\n        return className;\r\n      };\r\n\r\n      const renderBoard = () => {\r\n        const rows: [] = [];\r\n        for (let i = Bounds.top - 1; i < Bounds.bottom + 2; i++) {\r\n          const cells: [] = [];\r\n          for (let j = Bounds.left - 1; j < Bounds.right + 2; j++) {\r\n            const classes = classesOfBoard[j][i];\r\n            const isPosition = isPos[j][i];\r\n            const char = board[j][i] || \"\";\r\n            cells.push(\r\n              <div\r\n                key={`${j}-${i}`}\r\n                className={getCellClass(classes, isPosition)}\r\n                onClick={() => isPosition && handleNumberClick(classes)}\r\n                data-classes={classes.join(',')}\r\n                data-is-pos={isPosition}\r\n              >\r\n                {char}\r\n              </div>\r\n            );\r\n          }\r\n          rows.push(<div key={i} className=\"flex\">{cells}</div>);\r\n        }\r\n        return rows;\r\n      };\r\n\r\n      return (\r\n        <div className=\"p-4 max-w-4xl mx-auto\">\r\n          <h1 className=\"text-2xl font-bold mb-4\">Knowledge Game</h1>\r\n          <button\r\n            onClick={handleShuffle}\r\n            className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n          >\r\n            Shuffle\r\n          </button>\r\n          <div className=\"inline-block\">{renderBoard()}</div>\r\n          {selectedNumber !== null && (\r\n            <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\r\n              <div className=\"bg-white p-4 rounded shadow-lg\">\r\n                <h2 className=\"text-lg font-bold mb-2\">Hint {selectedNumber}</h2>\r\n                <button\r\n                  onClick={() => handleMenuAction(\"open\")}\r\n                  className=\"block w-full mb-2 px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600\"\r\n                >\r\n                  Open\r\n                </button>\r\n                <button\r\n                  onClick={() => handleMenuAction(\"incorrect\")}\r\n                  className=\"block w-full mb-2 px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n                >\r\n                  Incorrect\r\n                </button>\r\n                <button\r\n                  onClick={() => handleMenuAction(\"correct\")}\r\n                  className=\"block w-full mb-2 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600\"\r\n                >\r\n                  Correct\r\n                </button>\r\n                <button\r\n                  onClick={() => setSelectedNumber(null)}\r\n                  className=\"block w-full px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\"\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    };  \r\n\r\n};\r\n\r\nexport default HostRound2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}