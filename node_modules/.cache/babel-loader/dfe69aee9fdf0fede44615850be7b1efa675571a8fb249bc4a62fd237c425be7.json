{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\User\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport Play from \"../../layouts/Play\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Từ khóa chướng ngại vật\nconst mainKeyword = \"BOCONGANH\";\n\n// Tạo từ khóa gợi ý với vị trí và hướng random\nconst generateHintWords = (words, gridSize, obstacleWord) => {\n  const placedWords = []; // Danh sách từ đã đặt\n  const grid = Array(gridSize).fill(null).map(() => Array(gridSize).fill(\"\")); // Mảng kiểm tra vị trí\n\n  const findCommonLetterPairs = words => {\n    let results = [];\n    let usedWords = new Set(); // Lưu lại các từ đã dùng\n\n    let remainingPairs = [];\n    for (let i = 0; i < words.length; i++) {\n      for (let j = i + 1; j < words.length; j++) {\n        const word1 = words[i];\n        const word2 = words[j];\n\n        // Tìm ký tự chung giữa 2 từ\n        const commonLetters = [...new Set(word1)].filter(letter => word2.includes(letter));\n        if (commonLetters.length >= 2) {\n          // Tính điểm ưu tiên (chữ gần trung tâm hơn)\n          const scoredLetters = commonLetters.map(letter => {\n            const index1 = word1.indexOf(letter);\n            const index2 = word2.indexOf(letter);\n            const center1 = word1.length / 2;\n            const center2 = word2.length / 2;\n            const score = Math.abs(index1 - center1) + Math.abs(index2 - center2);\n            return {\n              letter,\n              score\n            };\n          });\n\n          // Sắp xếp theo điểm ưu tiên\n          scoredLetters.sort((a, b) => a.score - b.score);\n          const prioritizedLetters = scoredLetters.map(item => item.letter);\n          remainingPairs.push({\n            word1,\n            word2,\n            commonLetters: prioritizedLetters\n          });\n        }\n      }\n    }\n\n    // Bước 2: Chọn tối đa 2 cặp theo quy tắc\n    for (const pair of remainingPairs) {\n      if (results.length >= 2) break; // Đủ 2 cặp thì dừng\n      if (!usedWords.has(pair.word1) && !usedWords.has(pair.word2)) {\n        results.push(pair);\n        usedWords.add(pair.word1);\n        usedWords.add(pair.word2);\n      }\n    }\n\n    // Nếu vẫn chưa đủ 2 cặp, chọn tiếp từ các cặp có từ đã dùng\n    for (const pair of remainingPairs) {\n      if (results.length >= 2) break;\n      if (!usedWords.has(pair.word1) || !usedWords.has(pair.word2)) {\n        results.push(pair);\n        usedWords.add(pair.word1);\n        usedWords.add(pair.word2);\n      }\n    }\n    return results;\n  };\n\n  // 🛠 Test\n  const testwords = [\"hạtgiống\", \"cúc\", \"thuốc\", \"dream\", \"châukiệtluân\"];\n  console.log(findCommonLetterPairs(testwords));\n  const canPlaceWord = (word, x, y, direction) => {\n    for (let i = 0; i < word.length; i++) {\n      const newX = direction === \"horizontal\" ? x + i : x;\n      const newY = direction === \"horizontal\" ? y : y + i;\n      if (newX >= gridSize || newY >= gridSize) return false; // Vượt giới hạn\n\n      // Nếu ô đã có ký tự khác từ trước, kiểm tra xem có trùng với ký tự cần đặt không\n      if (grid[newY][newX] && grid[newY][newX] !== word[i]) return false;\n    }\n    return true;\n  };\n  words.forEach(word => {\n    let placed = false;\n    for (let attempt = 0; attempt < 100; attempt++) {\n      // Thử đặt tối đa 100 lần\n      const direction = Math.random() > 0.5 ? \"horizontal\" : \"vertical\";\n      let x = direction === \"horizontal\" ? Math.floor(Math.random() * (gridSize - word.length + 1)) : Math.floor(Math.random() * gridSize);\n      let y = direction === \"vertical\" ? Math.floor(Math.random() * (gridSize - word.length + 1)) : Math.floor(Math.random() * gridSize);\n      if (canPlaceWord(word, x, y, direction)) {\n        // Ghi vào grid để kiểm tra sau\n        for (let i = 0; i < word.length; i++) {\n          const newX = direction === \"horizontal\" ? x + i : x;\n          const newY = direction === \"horizontal\" ? y : y + i;\n          grid[newY][newX] = word[i];\n        }\n        placedWords.push({\n          word,\n          x,\n          y,\n          direction\n        });\n        placed = true;\n        break;\n      }\n    }\n    if (!placed) console.warn(`Không thể đặt từ: ${word}`);\n  });\n  return placedWords;\n};\n\n// Kích thước lưới\nconst GRID_SIZE = 10;\n\n// Tạo lưới trống\nconst generateEmptyGrid = () => {\n  return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n};\nconst ObstacleQuestionBox = ({\n  obstacleWord\n}) => {\n  _s();\n  const [grid, setGrid] = useState(generateEmptyGrid());\n  const [revealedRows, setRevealedRows] = useState(Array(GRID_SIZE).fill(false));\n  const [revealedCols, setRevealedCols] = useState(Array(GRID_SIZE).fill(false));\n  const [hintWords, setHintWords] = useState([]);\n  useEffect(() => {\n    const randomHintWords = generateHintWords([\"GIÓ\", \"HẠT\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂU\"], GRID_SIZE, mainKeyword);\n    setHintWords(randomHintWords);\n    let newGrid = generateEmptyGrid();\n\n    // Thêm từ vào lưới\n    randomHintWords.forEach(({\n      word,\n      x,\n      y,\n      direction\n    }) => {\n      for (let i = 0; i < word.length; i++) {\n        if (direction === \"horizontal\") {\n          newGrid[y][x + i] = word[i];\n        } else {\n          newGrid[y + i][x] = word[i];\n        }\n      }\n    });\n    setGrid(newGrid);\n  }, []);\n\n  // Hàm toggle hiển thị hàng/cột\n  const toggleRow = rowIndex => {\n    setRevealedRows(prev => {\n      const newRevealed = [...prev];\n      newRevealed[rowIndex] = !newRevealed[rowIndex];\n      return newRevealed;\n    });\n  };\n  const toggleCol = colIndex => {\n    setRevealedCols(prev => {\n      const newRevealed = [...prev];\n      newRevealed[colIndex] = !newRevealed[colIndex];\n      return newRevealed;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[30px_repeat(10,40px)] gap-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), \" \", Array.from({\n        length: GRID_SIZE\n      }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"font-bold text-blue-500 cursor-pointer\",\n        onClick: () => toggleCol(colIndex),\n        children: colIndex + 1\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }, this)), grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"font-bold text-blue-500 cursor-pointer\",\n          onClick: () => toggleRow(rowIndex),\n          children: rowIndex + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this), row.map((cell, colIndex) => {\n          const isRevealed = revealedRows[rowIndex] && hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\") || revealedCols[colIndex] && hintWords.some(word => word.x === colIndex && word.direction === \"vertical\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-10 h-10 border flex items-center justify-center text-lg font-semibold select-none \n                                    ${isRevealed ? \"text-black\" : \"text-transparent\"}\n                                    ${obstacleWord.includes(cell) && isRevealed ? \"font-bold text-red-500\" : \"\"}\n                                    ${cell === \"\" ? \"border-none\" : \"border-gray-400\"}\n                                `,\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 33\n          }, this);\n        })]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n};\n_s(ObstacleQuestionBox, \"0tXfE1RkmpIdWy/liPKPIQWuBnQ=\");\n_c = ObstacleQuestionBox;\nfunction Round2() {\n  return /*#__PURE__*/_jsxDEV(Play, {\n    questionComponent: /*#__PURE__*/_jsxDEV(ObstacleQuestionBox, {\n      obstacleWord: mainKeyword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 37\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 12\n  }, this);\n}\n_c2 = Round2;\nexport default Round2;\nvar _c, _c2;\n$RefreshReg$(_c, \"ObstacleQuestionBox\");\n$RefreshReg$(_c2, \"Round2\");","map":{"version":3,"names":["Play","React","useState","useEffect","jsxDEV","_jsxDEV","mainKeyword","generateHintWords","words","gridSize","obstacleWord","placedWords","grid","Array","fill","map","findCommonLetterPairs","results","usedWords","Set","remainingPairs","i","length","j","word1","word2","commonLetters","filter","letter","includes","scoredLetters","index1","indexOf","index2","center1","center2","score","Math","abs","sort","a","b","prioritizedLetters","item","push","pair","has","add","testwords","console","log","canPlaceWord","word","x","y","direction","newX","newY","forEach","placed","attempt","random","floor","warn","GRID_SIZE","generateEmptyGrid","ObstacleQuestionBox","_s","setGrid","revealedRows","setRevealedRows","revealedCols","setRevealedCols","hintWords","setHintWords","randomHintWords","newGrid","toggleRow","rowIndex","prev","newRevealed","toggleCol","colIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","from","_","onClick","row","Fragment","cell","isRevealed","some","_c","Round2","questionComponent","_c2","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/User/Round2.tsx"],"sourcesContent":["import Play from \"../../layouts/Play\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n\r\ninterface HintWord {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n    obstacleWord: string;\r\n}\r\n\r\n// Từ khóa chướng ngại vật\r\nconst mainKeyword = \"BOCONGANH\";\r\n\r\n// Tạo từ khóa gợi ý với vị trí và hướng random\r\nconst generateHintWords = (words: string[], gridSize: number, obstacleWord: string): HintWord[] => {\r\n    const placedWords: HintWord[] = []; // Danh sách từ đã đặt\r\n    const grid: string[][] = Array(gridSize).fill(null).map(() => Array(gridSize).fill(\"\")); // Mảng kiểm tra vị trí\r\n\r\n    const findCommonLetterPairs = (words: string[]): { word1: string; word2: string; commonLetters: string[] }[] => {\r\n        let results: { word1: string; word2: string; commonLetters: string[] }[] = [];\r\n        let usedWords = new Set<string>(); // Lưu lại các từ đã dùng\r\n    \r\n        let remainingPairs: { word1: string; word2: string; commonLetters: string[] }[] = [];\r\n    \r\n        for (let i = 0; i < words.length; i++) {\r\n            for (let j = i + 1; j < words.length; j++) {\r\n                const word1 = words[i];\r\n                const word2 = words[j];\r\n    \r\n                // Tìm ký tự chung giữa 2 từ\r\n                const commonLetters = [...new Set(word1)].filter(letter => word2.includes(letter));\r\n    \r\n                if (commonLetters.length >= 2) {\r\n                    // Tính điểm ưu tiên (chữ gần trung tâm hơn)\r\n                    const scoredLetters = commonLetters.map(letter => {\r\n                        const index1 = word1.indexOf(letter);\r\n                        const index2 = word2.indexOf(letter);\r\n                        const center1 = word1.length / 2;\r\n                        const center2 = word2.length / 2;\r\n                        const score = Math.abs(index1 - center1) + Math.abs(index2 - center2);\r\n                        return { letter, score };\r\n                    });\r\n    \r\n                    // Sắp xếp theo điểm ưu tiên\r\n                    scoredLetters.sort((a, b) => a.score - b.score);\r\n                    const prioritizedLetters = scoredLetters.map(item => item.letter);\r\n    \r\n                    remainingPairs.push({ word1, word2, commonLetters: prioritizedLetters });\r\n                }\r\n            }\r\n        }\r\n    \r\n        // Bước 2: Chọn tối đa 2 cặp theo quy tắc\r\n        for (const pair of remainingPairs) {\r\n            if (results.length >= 2) break; // Đủ 2 cặp thì dừng\r\n            if (!usedWords.has(pair.word1) && !usedWords.has(pair.word2)) {\r\n                results.push(pair);\r\n                usedWords.add(pair.word1);\r\n                usedWords.add(pair.word2);\r\n            }\r\n        }\r\n    \r\n        // Nếu vẫn chưa đủ 2 cặp, chọn tiếp từ các cặp có từ đã dùng\r\n        for (const pair of remainingPairs) {\r\n            if (results.length >= 2) break;\r\n            if (!usedWords.has(pair.word1) || !usedWords.has(pair.word2)) {\r\n                results.push(pair);\r\n                usedWords.add(pair.word1);\r\n                usedWords.add(pair.word2);\r\n            }\r\n        }\r\n    \r\n        return results;\r\n    };\r\n    \r\n    // 🛠 Test\r\n    const testwords = [\"hạtgiống\", \"cúc\", \"thuốc\", \"dream\", \"châukiệtluân\"];\r\n    console.log(findCommonLetterPairs(testwords));\r\n    const canPlaceWord = (word: string, x: number, y: number, direction: \"horizontal\" | \"vertical\") => {\r\n        for (let i = 0; i < word.length; i++) {\r\n            const newX = direction === \"horizontal\" ? x + i : x;\r\n            const newY = direction === \"horizontal\" ? y : y + i;\r\n    \r\n            if (newX >= gridSize || newY >= gridSize) return false; // Vượt giới hạn\r\n    \r\n            // Nếu ô đã có ký tự khác từ trước, kiểm tra xem có trùng với ký tự cần đặt không\r\n            if (grid[newY][newX] && grid[newY][newX] !== word[i]) return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    words.forEach((word) => {\r\n        let placed = false;\r\n        for (let attempt = 0; attempt < 100; attempt++) { // Thử đặt tối đa 100 lần\r\n            const direction: \"horizontal\" | \"vertical\" = Math.random() > 0.5 ? \"horizontal\" : \"vertical\";\r\n            let x = direction === \"horizontal\" ? Math.floor(Math.random() * (gridSize - word.length + 1)) : Math.floor(Math.random() * gridSize);\r\n            let y = direction === \"vertical\" ? Math.floor(Math.random() * (gridSize - word.length + 1)) : Math.floor(Math.random() * gridSize);\r\n\r\n            if (canPlaceWord(word, x, y, direction)) {\r\n                // Ghi vào grid để kiểm tra sau\r\n                for (let i = 0; i < word.length; i++) {\r\n                    const newX = direction === \"horizontal\" ? x + i : x;\r\n                    const newY = direction === \"horizontal\" ? y : y + i;\r\n                    grid[newY][newX] = word[i];\r\n                }\r\n\r\n                placedWords.push({ word, x, y, direction });\r\n                placed = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!placed) console.warn(`Không thể đặt từ: ${word}`);\r\n    });\r\n\r\n    return placedWords;\r\n};\r\n\r\n// Kích thước lưới\r\nconst GRID_SIZE = 10;\r\n\r\n// Tạo lưới trống\r\nconst generateEmptyGrid = () => {\r\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\r\n};\r\n\r\n\r\nconst ObstacleQuestionBox: React.FC<ObstacleQuestionBoxProps> = ({ obstacleWord }) => {\r\n    const [grid, setGrid] = useState<string[][]>(generateEmptyGrid());\r\n    const [revealedRows, setRevealedRows] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [revealedCols, setRevealedCols] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [hintWords, setHintWords] = useState<HintWord[]>([]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const randomHintWords = generateHintWords([\"GIÓ\", \"HẠT\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂU\"], GRID_SIZE, mainKeyword);\r\n        setHintWords(randomHintWords);\r\n        let newGrid = generateEmptyGrid();\r\n\r\n        // Thêm từ vào lưới\r\n        randomHintWords.forEach(({ word, x, y, direction }) => {\r\n            for (let i = 0; i < word.length; i++) {\r\n                if (direction === \"horizontal\") {\r\n                    newGrid[y][x + i] = word[i];\r\n                } else {\r\n                    newGrid[y + i][x] = word[i];\r\n                }\r\n            }\r\n        });\r\n\r\n        setGrid(newGrid);\r\n    }, []);\r\n\r\n    // Hàm toggle hiển thị hàng/cột\r\n    const toggleRow = (rowIndex: number) => {\r\n        setRevealedRows((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[rowIndex] = !newRevealed[rowIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    const toggleCol = (colIndex: number) => {\r\n        setRevealedCols((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[colIndex] = !newRevealed[colIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6\">\r\n            <div className=\"grid grid-cols-[30px_repeat(10,40px)] gap-1\">\r\n                {/* Hàng đầu tiên chứa số cột */}\r\n                <div></div> {/* Ô trống ở góc */}\r\n                {Array.from({ length: GRID_SIZE }).map((_, colIndex) => (\r\n                    <button\r\n                        key={colIndex}\r\n                        className=\"font-bold text-blue-500 cursor-pointer\"\r\n                        onClick={() => toggleCol(colIndex)}\r\n                    >\r\n                        {colIndex + 1}\r\n                    </button>\r\n                ))}\r\n\r\n                {/* Hiển thị lưới chữ */}\r\n                {grid.map((row, rowIndex) => (\r\n                    <React.Fragment key={rowIndex}>\r\n                        {/* Số hàng bên trái */}\r\n                        <button\r\n                            className=\"font-bold text-blue-500 cursor-pointer\"\r\n                            onClick={() => toggleRow(rowIndex)}\r\n                        >\r\n                            {rowIndex + 1}\r\n                        </button>\r\n\r\n                        {row.map((cell, colIndex) => {\r\n                            const isRevealed =\r\n                                (revealedRows[rowIndex] && hintWords.some((word) => word.y === rowIndex && word.direction === \"horizontal\")) ||\r\n                                (revealedCols[colIndex] && hintWords.some((word) => word.x === colIndex && word.direction === \"vertical\"));\r\n\r\n                            return (\r\n                                <div\r\n                                    key={colIndex}\r\n                                    className={`w-10 h-10 border flex items-center justify-center text-lg font-semibold select-none \r\n                                    ${isRevealed ? \"text-black\" : \"text-transparent\"}\r\n                                    ${obstacleWord.includes(cell) && isRevealed ? \"font-bold text-red-500\" : \"\"}\r\n                                    ${cell === \"\" ? \"border-none\" : \"border-gray-400\"}\r\n                                `}\r\n                                >\r\n                                    {cell}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </React.Fragment>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction Round2() {\r\n    return <Play questionComponent={<ObstacleQuestionBox obstacleWord={mainKeyword} />} />;\r\n}\r\n\r\nexport default Round2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}