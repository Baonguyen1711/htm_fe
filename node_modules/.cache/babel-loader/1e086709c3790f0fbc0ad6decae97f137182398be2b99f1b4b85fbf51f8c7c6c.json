{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\context\\\\hostContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, createContext, useContext } from \"react\";\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { getNextQuestion } from '../pages/Host/Test/service';\nimport { sendAnswerToPlayer, startTime } from \"../pages/Host/Management/service\";\nimport { goToNextRound } from \"../components/services\";\nimport { setCurrentChunk, setCurrentPacketQuestion, sendCorrectAnswer } from \"../components/services\";\n\n// Create a context for Axios with Authentication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HostContext = /*#__PURE__*/createContext(null);\nexport const HostProvider = ({\n  children\n}) => {\n  _s();\n  const spotsNumber = [1, 2, 3, 4];\n  const [searchParams] = useSearchParams();\n  const currentRound = searchParams.get(\"round\") || \"\";\n  const testName = searchParams.get(\"testName\") || \"\";\n  const hostRoomId = searchParams.get(\"roomId\") || \"\";\n  const navigate = useNavigate();\n  const [playerScores, setPlayerScores] = useState(Array(4).fill(null).map(() => ({\n    score: \"0\",\n    isCorrect: false,\n    playerName: \"\",\n    avatar: \"\"\n  })));\n  const [playerFlashes, setPlayerFlashes] = useState(Array(playerScores.length).fill(\"\"));\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(\"1\");\n  const [currentAnswer, setCurrentAnswer] = useState(\"\");\n  const [timeLeft, setTimeLeft] = useState(30);\n  const [hostInitialGrid, setHostInitialGrid] = useState([]);\n  const [currentQuestionNumber, setCurrentQuestionNumber] = useState(0);\n  const handleScoreAdjust = (index, amount, isCorrect, playerName, avatar) => {\n    setPlayerScores(prevScores => {\n      const newScores = [...prevScores];\n      newScores[index].score = (parseInt(newScores[index].score) + amount).toString();\n      newScores[index].isCorrect = isCorrect;\n      newScores[index].playerName = playerName;\n      newScores[index].avatar = avatar;\n      return newScores;\n    });\n  };\n  const handleNextQuestion = async (topic, difficulty, number) => {\n    if (currentRound === \"3\") {\n      setCurrentPacketQuestion(hostRoomId, parseInt(currentQuestionIndex));\n      if (currentQuestionIndex === \"1\" && topic) {\n        setCurrentChunk(hostRoomId, topic, 1, testName);\n        setCurrentQuestionIndex(prev => (parseInt(prev) + 1).toString());\n        alert('Moving to the next question!');\n        return;\n      }\n      if (currentQuestionIndex === \"3\" && topic) {\n        setCurrentChunk(hostRoomId, topic, 2, testName);\n        setCurrentQuestionIndex(prev => (parseInt(prev) + 1).toString());\n        alert('Moving to the next question!');\n        return;\n      }\n      if (currentQuestionIndex === \"7\" && topic) {\n        setCurrentChunk(hostRoomId, topic, 3, testName);\n        setCurrentQuestionIndex(prev => (parseInt(prev) + 1).toString());\n        alert('Moving to the next question!');\n        return;\n      }\n      setCurrentQuestionIndex(prev => (parseInt(prev) + 1).toString());\n      alert('Moving to the next question!');\n      return;\n    }\n    if (currentRound === \"4\" && difficulty && number) {\n      const question = await getNextQuestion(testName, number, currentRound, hostRoomId, undefined, difficulty);\n      setCurrentAnswer(question.answer);\n      console.log(question);\n      alert('Moving to the next question!');\n      return;\n    }\n    setCurrentQuestionIndex(prev => (parseInt(prev) + 1).toString());\n    const question = await getNextQuestion(testName, currentQuestionIndex, currentRound, hostRoomId);\n    setCurrentAnswer(question.answer);\n    console.log(question);\n    alert('Moving to the next question!');\n  };\n  const handleShowAnswer = async () => {\n    await sendAnswerToPlayer(hostRoomId);\n    alert(\"answer sent!\");\n  };\n  const handleStartTime = async () => {\n    await startTime(hostRoomId);\n    alert(\"time started!\");\n  };\n  const handleStartRound = async (round, roomId, grid) => {\n    if (grid) {\n      console.log(\"grid\", grid);\n      await goToNextRound(roomId, round, grid);\n      alert(\"grid sent!\");\n      return;\n    }\n    await goToNextRound(roomId, round);\n  };\n  const handleCorrectAnswer = async answer => {\n    await sendCorrectAnswer(hostRoomId, answer);\n    alert(\"correct answer sent!\");\n  };\n\n  // const getSortedPlayers = (): Player[] => {\n  //     return playerScores\n  //         .map((score, index) => ({ score, index, username: `Player ${index + 1}`, position: index }))\n  //         .sort((a, b) => b.score - a.score)\n  //         .map((player, rank) => ({ ...player, position: rank }));\n  // };\n\n  return /*#__PURE__*/_jsxDEV(HostContext.Provider, {\n    value: {\n      handleScoreAdjust,\n      handleNextQuestion,\n      handleStartRound,\n      currentQuestionIndex,\n      setCurrentQuestionIndex,\n      playerFlashes,\n      setPlayerFlashes,\n      playerScores,\n      setPlayerScores,\n      spotsNumber,\n      handleShowAnswer,\n      handleStartTime,\n      hostInitialGrid,\n      setHostInitialGrid,\n      currentQuestionNumber,\n      setCurrentQuestionNumber,\n      handleCorrectAnswer\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use Axios with Bearer authentication\n_s(HostProvider, \"L0oI7B0edmpEW2VfKVUJYwAqucs=\", false, function () {\n  return [useSearchParams, useNavigate];\n});\n_c = HostProvider;\nexport const useHost = () => {\n  _s2();\n  return useContext(HostContext);\n};\n_s2(useHost, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"HostProvider\");","map":{"version":3,"names":["useState","createContext","useContext","useNavigate","useSearchParams","getNextQuestion","sendAnswerToPlayer","startTime","goToNextRound","setCurrentChunk","setCurrentPacketQuestion","sendCorrectAnswer","jsxDEV","_jsxDEV","HostContext","HostProvider","children","_s","spotsNumber","searchParams","currentRound","get","testName","hostRoomId","navigate","playerScores","setPlayerScores","Array","fill","map","score","isCorrect","playerName","avatar","playerFlashes","setPlayerFlashes","length","currentQuestionIndex","setCurrentQuestionIndex","currentAnswer","setCurrentAnswer","timeLeft","setTimeLeft","hostInitialGrid","setHostInitialGrid","currentQuestionNumber","setCurrentQuestionNumber","handleScoreAdjust","index","amount","prevScores","newScores","parseInt","toString","handleNextQuestion","topic","difficulty","number","prev","alert","question","undefined","answer","console","log","handleShowAnswer","handleStartTime","handleStartRound","round","roomId","grid","handleCorrectAnswer","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useHost","_s2","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/context/hostContext.tsx"],"sourcesContent":["\r\nimport { useEffect, useState, createContext, useContext } from \"react\";\r\nimport { User, Score } from \"../type\";\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport { getNextQuestion } from '../pages/Host/Test/service';\r\nimport { sendAnswerToPlayer, startTime } from \"../pages/Host/Management/service\";\r\nimport { sendGridToPlayers, goToNextRound } from \"../components/services\";\r\nimport { setCurrentChunk, setCurrentPacketQuestion, sendCorrectAnswer } from \"../components/services\";\r\n\r\n// Create a context for Axios with Authentication\r\nconst HostContext = createContext<any>(null);\r\n\r\nexport const HostProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const spotsNumber = [1, 2, 3, 4]\r\n  const [searchParams] = useSearchParams()\r\n  const currentRound = searchParams.get(\"round\") || \"\"\r\n  const testName = searchParams.get(\"testName\") || \"\"\r\n  const hostRoomId = searchParams.get(\"roomId\") || \"\"\r\n  const navigate = useNavigate()\r\n  const [playerScores, setPlayerScores] = useState<Score[]>(\r\n    Array(4).fill(null).map(() => ({\r\n      score: \"0\",\r\n      isCorrect: false,\r\n      playerName: \"\",\r\n      avatar: \"\"\r\n    }))\r\n  );\r\n  const [playerFlashes, setPlayerFlashes] = useState(Array(playerScores.length).fill(\"\"));\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<string>(\"1\")\r\n  const [currentAnswer, setCurrentAnswer] = useState<string>(\"\")\r\n  const [timeLeft, setTimeLeft] = useState(30);\r\n  const [hostInitialGrid, setHostInitialGrid] = useState<string[][]>([])\r\n  const [currentQuestionNumber, setCurrentQuestionNumber] = useState<Number>(0)\r\n\r\n  const handleScoreAdjust = (index: number, amount: number, isCorrect: boolean, playerName: string, avatar: string) => {\r\n    setPlayerScores((prevScores) => {\r\n      const newScores = [...prevScores];\r\n      newScores[index].score = (parseInt(newScores[index].score) + amount).toString();\r\n      newScores[index].isCorrect = isCorrect\r\n      newScores[index].playerName = playerName\r\n      newScores[index].avatar = avatar\r\n      return newScores;\r\n    });\r\n  };\r\n\r\n  const handleNextQuestion = async (topic?: string, difficulty?: string, number?: string) => {\r\n    if (currentRound === \"3\") {\r\n      setCurrentPacketQuestion(hostRoomId, parseInt(currentQuestionIndex))\r\n      if (currentQuestionIndex === \"1\" && topic) {\r\n        setCurrentChunk(hostRoomId, topic, 1, testName)\r\n        setCurrentQuestionIndex((prev) => (parseInt(prev) + 1).toString())\r\n        alert('Moving to the next question!');\r\n        return\r\n      }\r\n\r\n      if (currentQuestionIndex === \"3\" && topic) {\r\n        setCurrentChunk(hostRoomId, topic, 2, testName)\r\n        setCurrentQuestionIndex((prev) => (parseInt(prev) + 1).toString())\r\n        alert('Moving to the next question!');\r\n        return\r\n      }\r\n\r\n      if (currentQuestionIndex === \"7\" && topic) {\r\n        setCurrentChunk(hostRoomId, topic, 3, testName)\r\n        setCurrentQuestionIndex((prev) => (parseInt(prev) + 1).toString())\r\n        alert('Moving to the next question!');\r\n        return\r\n      }\r\n      setCurrentQuestionIndex((prev) => (parseInt(prev) + 1).toString())\r\n      alert('Moving to the next question!');\r\n      return\r\n    }\r\n\r\n    if (currentRound === \"4\" && difficulty && number) {\r\n      const question = await getNextQuestion(testName, number, currentRound, hostRoomId, undefined, difficulty)\r\n      setCurrentAnswer(question.answer)\r\n      console.log(question)\r\n      alert('Moving to the next question!')\r\n      return\r\n    }\r\n    setCurrentQuestionIndex((prev) => (parseInt(prev) + 1).toString())\r\n    const question = await getNextQuestion(testName, currentQuestionIndex, currentRound, hostRoomId)\r\n    setCurrentAnswer(question.answer)\r\n    console.log(question)\r\n    alert('Moving to the next question!');\r\n  };\r\n\r\n  const handleShowAnswer = async () => {\r\n    await sendAnswerToPlayer(hostRoomId)\r\n    alert(\"answer sent!\")\r\n  };\r\n\r\n  const handleStartTime = async () => {\r\n    await startTime(hostRoomId)\r\n    alert(\"time started!\")\r\n  }\r\n\r\n  const handleStartRound = async (round: string, roomId: string, grid?: string[][],) => {\r\n    if (grid) {\r\n      console.log(\"grid\", grid)\r\n      await goToNextRound(roomId, round, grid)\r\n      alert(\"grid sent!\")\r\n      return;\r\n    }\r\n    await goToNextRound(roomId, round)\r\n\r\n  }\r\n\r\n  const handleCorrectAnswer = async (answer: string) => {\r\n    await sendCorrectAnswer(hostRoomId,answer)\r\n    alert(\"correct answer sent!\")\r\n  }\r\n\r\n\r\n  // const getSortedPlayers = (): Player[] => {\r\n  //     return playerScores\r\n  //         .map((score, index) => ({ score, index, username: `Player ${index + 1}`, position: index }))\r\n  //         .sort((a, b) => b.score - a.score)\r\n  //         .map((player, rank) => ({ ...player, position: rank }));\r\n  // };\r\n\r\n  return (\r\n    <HostContext.Provider value={{ handleScoreAdjust, handleNextQuestion, handleStartRound, currentQuestionIndex, setCurrentQuestionIndex, playerFlashes, setPlayerFlashes, playerScores, setPlayerScores, spotsNumber, handleShowAnswer, handleStartTime, hostInitialGrid, setHostInitialGrid, currentQuestionNumber, setCurrentQuestionNumber,handleCorrectAnswer }}>\r\n      {children}\r\n    </HostContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use Axios with Bearer authentication\r\nexport const useHost = () => {\r\n  return useContext(HostContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}