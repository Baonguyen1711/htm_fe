{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { usePlayer } from \"../../context/playerContext\";\nimport { setSelectedRow, setCorrectRow, setIncorectRow } from \"../../components/services\";\nimport { listenToSound, listenToCorrectRow, listenToIncorrectRow, listenToSelectRow, listenToQuestions, listenToObstacle } from \"../../services/firebaseServices\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { getNextQuestion } from \"../../pages/Host/Test/service\";\nimport { openObstacle } from \"../../components/services\";\nimport { generateGrid } from \"../../pages/User/Round2/utils\";\nimport PlayerAnswerInput from \"../../components/ui/PlayerAnswerInput\";\nimport { useSounds } from \"../../context/soundContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nconst mainKeyword = \"BÒCÔNGANH\";\nconst QuestionBoxRound2 = ({\n  obstacleWord,\n  hintWordArray,\n  initialGrid,\n  isHost = false\n}) => {\n  _s();\n  console.log(\"initialGrid inside player\", initialGrid);\n  const sounds = useSounds();\n  const [searchParams] = useSearchParams();\n  const {\n    setInitialGrid\n  } = usePlayer();\n  const roomId = searchParams.get(\"roomId\") || \"\";\n  const testName = searchParams.get(\"testName\") || \"\";\n  const GRID_SIZE = 30;\n  const [grid, setGrid] = useState([[]]);\n  const [hintWords, setHintWords] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState();\n  const [cellStyles, setCellStyles] = useState({}); // Tracks background and text styles\n  const [menu, setMenu] = useState({\n    visible: false\n  });\n  const [hintWordsLength, setHintWordsLength] = useState([]);\n  const [markedCharacters, setMarkedCharacters] = useState({});\n  const [highlightedCharacters, setHighlightedCharacters] = useState({});\n  const handleSuffleGrid = async () => {\n    if (isHost && hintWordArray) {\n      const result = await generateGrid(hintWordArray, 30);\n      console.log(\"board\", result.grid);\n      setHintWords(result.placementArray);\n      setGrid(result.grid);\n      const blankGrid = result.grid.map((row, rowIndex) => row.map((cell, colIndex) => result.grid[rowIndex][colIndex].includes(\"number\") ? cell :\n      // Keep \"numberX\"\n      cell !== \" \" && cell !== \"\" ? \"1\" : \"\" // Non-empty to \"1\", empty stays \"\"\n      ));\n      setInitialGrid(blankGrid);\n    }\n  };\n  useEffect(() => {\n    const unsubscribePlayers = listenToAnswers(roomId, answer => {\n      const audio = sounds['correct'];\n      if (audio) {\n        audio.play();\n      }\n      setCorrectAnswer(`Đáp án: ${answer}`);\n      const timeOut = setTimeout(() => {\n        setCorrectAnswer(\"\");\n      }, 4000);\n      console.log(\"answer\", answer);\n      clearTimeout(timeOut);\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToSound(roomId, type => {\n      const audio = sounds[`${type}`];\n      if (audio) {\n        audio.play();\n      }\n      console.log(\"sound type\", type);\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const markedCharactersMap = {};\n    const highlightedMap = {};\n    if (hintWordArray) {\n      for (const word of hintWordArray) {\n        const presentArray = [];\n        for (let i = 0; i < word.length; i++) {\n          if (obstacleWord !== null && obstacleWord !== void 0 && obstacleWord.includes(word[i])) {\n            presentArray.push(i);\n          }\n        }\n        markedCharactersMap[word] = presentArray;\n\n        // Randomly pick up to 2 indices\n        const shuffled = [...presentArray].sort(() => Math.random() - 0.5);\n        highlightedMap[word] = shuffled.slice(0, 2);\n      }\n      setMarkedCharacters(markedCharactersMap);\n      setHighlightedCharacters(highlightedMap);\n    }\n  }, [hintWordArray, obstacleWord]);\n  useEffect(() => {\n    const generateInitialGrid = async () => {\n      if (hintWordArray) {\n        if (isHost) {\n          console.log(\"hintWordArray\", hintWordArray);\n          console.log(\"obstacle\", obstacleWord);\n          const result = await generateGrid(hintWordArray, 30);\n          console.log(\"board\", result.grid);\n          setHintWords(result.placementArray);\n          setGrid(result.grid);\n          const blankGrid = result.grid.map((row, rowIndex) => row.map((cell, colIndex) => result.grid[rowIndex][colIndex].includes(\"number\") ? cell :\n          // Keep \"numberX\"\n          cell !== \" \" && cell !== \"\" ? \"1\" : \"\" // Non-empty to \"1\", empty stays \"\"\n          ));\n          setInitialGrid(blankGrid);\n        }\n      }\n      if (initialGrid) {\n        setGrid(initialGrid);\n      }\n    };\n    generateInitialGrid();\n  }, [hintWordArray, obstacleWord, initialGrid]);\n  const menuRef = useRef(null);\n  const revealCells = (rowIndex, colIndex, action, hintWordNumber) => {\n    if (!isHost) return;\n    const hintWordIndex = hintWordNumber ? parseInt(hintWordNumber) : -1;\n    const hintWord = hintWords.find(word => word.index === hintWordIndex);\n    console.log(\"hintWord\", hintWord);\n    console.log(\"hintWords\", hintWords);\n    if (!hintWord) return;\n    const isRow = hintWord.dir === 1;\n    console.log(hintWord, \"is\", hintWord.dir);\n    const wordLength = hintWord.string.length - 3;\n    const startIndex = isRow ? colIndex + 1 : rowIndex + 1;\n    const handleNextQuestion = async (testName, hintWordIndex, round, roomId) => {\n      await getNextQuestion(testName, hintWordIndex, round, roomId);\n    };\n    setCellStyles(prev => {\n      const newStyles = {\n        ...prev\n      };\n      if (isRow) {\n        for (let col = startIndex; col < startIndex + wordLength; col++) {\n          if (col == GRID_SIZE) break;\n          const key = `${rowIndex}-${col}`;\n          // Skip number cells to preserve their appearance\n          console.log(\"grid[rowIndex][col]\", grid[rowIndex][col]);\n          console.log(\"rowIndex\", rowIndex);\n          console.log(\"col\", col);\n          if (!grid[rowIndex][col].includes(\"number\")) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) {\n                setSelectedRow(roomId, hintWordNumber, true, wordLength);\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId);\n              }\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-black\"\n              };\n              let indexInTarget = [];\n              if (hintWordArray) for (let i = 2; i <= wordLength + 1; i++) {\n                const char = hintWord.char[i];\n                if (obstacleWord) {\n                  if (obstacleWord.includes(char)) {\n                    console.log(\"obstacleWord\", obstacleWord);\n                    console.log(\"char\", char);\n                    console.log(\"obstacleWord.includes(char)\", obstacleWord.includes(char));\n                    console.log(\"i\", i);\n                    console.log(\"i-2\", i - 2);\n                    indexInTarget.push(i - 2);\n                  }\n                }\n              }\n              if (hintWordArray && hintWordNumber) {\n                console.log(\"hintWordNumber\", hintWordNumber);\n                console.log(\"hintWord\", hintWord);\n                console.log(\"hintWord.string.slice(2, hintWord.string.length-1)\", hintWord.string.slice(2, hintWord.string.length - 1));\n                console.log(\"indexInTarget\", indexInTarget);\n                console.log(\"encodeURIComponent(JSON.stringify(indexInTarget))\", encodeURIComponent(JSON.stringify(indexInTarget)));\n                setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), true, wordLength);\n              }\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setIncorectRow(roomId, hintWordNumber, true, wordLength);\n            }\n          }\n        }\n      } else {\n        for (let row = startIndex; row < startIndex + wordLength; row++) {\n          if (row == GRID_SIZE) break;\n          const key = `${row}-${colIndex}`;\n          console.log(\"grid[row][colIndex]\", grid[row][colIndex]);\n          console.log(\"colIndex\", colIndex);\n          console.log(\"row\", row);\n          // Skip number cells to preserve their appearance\n          if (!grid[row][colIndex].includes(\"number\")) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) {\n                setSelectedRow(roomId, hintWordNumber, false, wordLength);\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId);\n              }\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-black\"\n              };\n              let indexInTarget = [];\n              if (hintWordArray) for (let i = 2; i <= wordLength + 1; i++) {\n                const char = hintWord.char[i];\n                if (obstacleWord) {\n                  if (obstacleWord.includes(char)) {\n                    console.log(\"obstacleWord\", obstacleWord);\n                    console.log(\"char\", char);\n                    console.log(\"obstacleWord.includes(char)\", obstacleWord.includes(char));\n                    console.log(\"i\", i);\n                    console.log(\"i-2\", i - 2);\n                    indexInTarget.push(i - 2);\n                  }\n                }\n              }\n              if (hintWordArray && hintWordNumber) setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), false, wordLength);\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setIncorectRow(roomId, hintWordNumber, false, wordLength);\n            }\n          }\n        }\n      }\n      return newStyles;\n    });\n\n    // if (action === \"correct\" || action === \"incorrect\") {\n    //   setSelectedRow(roomId, isRow ? rowIndex.toString() : colIndex.toString());\n    // }\n  };\n  const revealCellsForPlayer = (rowIndex, colIndex, action, selectedRowNumber, markedCharacterIndex, isRow, wordLength, correctAnswer // For correct\n  ) => {\n    if (isHost) return; // Ensure this runs only for players\n\n    // Determine word length\n    const length = action === \"correct\" ? (correctAnswer === null || correctAnswer === void 0 ? void 0 : correctAnswer.length) || 0 : wordLength || 0;\n    if (length === 0) {\n      console.warn(`No valid word length for row ${selectedRowNumber}`);\n      return;\n    }\n    setCellStyles(prev => {\n      const newStyles = {\n        ...prev\n      };\n      if (isRow) {\n        // Horizontal: style cells from colIndex + 1 to colIndex + length\n        for (let col = colIndex + 1; col <= colIndex + length; col++) {\n          var _grid$rowIndex$col;\n          const key = `${rowIndex}-${col}`;\n          console.log(\"markedCharacterIndex\", markedCharacterIndex);\n          console.log(\"col\", col);\n          console.log(\"col-colIndex\", col - colIndex - 1);\n          console.log(\"markedCharacterIndex.includes(col)\", markedCharacterIndex.includes(col - colIndex));\n\n          // Skip empty and number cells\n          if (grid[rowIndex][col] !== \"\" && !((_grid$rowIndex$col = grid[rowIndex][col]) !== null && _grid$rowIndex$col !== void 0 && _grid$rowIndex$col.includes(\"number\"))) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: markedCharacterIndex.includes(col - colIndex - 1) ? \"text-red-600\" : \"text-black\"\n              };\n            }\n          }\n        }\n      } else {\n        // Vertical: style cells from rowIndex + 1 to rowIndex + length\n        for (let row = rowIndex + 1; row <= rowIndex + length; row++) {\n          var _grid$row$colIndex;\n          const key = `${row}-${colIndex}`;\n          console.log(\"markedCharacterIndex\", markedCharacterIndex);\n          console.log(\"col\", row);\n          console.log(\"row-rowIndex\", row - rowIndex - 1);\n          console.log(\"markedCharacterIndex.includes(col)\", markedCharacterIndex.includes(row - rowIndex));\n          // Skip empty and number cells\n          if (grid[row][colIndex] !== \"\" && !((_grid$row$colIndex = grid[row][colIndex]) !== null && _grid$row$colIndex !== void 0 && _grid$row$colIndex.includes(\"number\"))) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: markedCharacterIndex.includes(row - rowIndex - 1) ? \"text-red-600\" : \"text-black\"\n              };\n            }\n          }\n        }\n      }\n      return newStyles;\n    });\n\n    // For \"correct\", update grid to show the actual word\n    if (action === \"correct\" && correctAnswer) {\n      setGrid(prevGrid => {\n        const newGrid = prevGrid.map(row => [...row]);\n        if (isRow) {\n          for (let col = colIndex + 1, i = 0; col <= colIndex + length && i < correctAnswer.length; col++, i++) {\n            newGrid[rowIndex][col] = correctAnswer[i];\n          }\n        } else {\n          for (let row = rowIndex + 1, i = 0; row <= rowIndex + length && i < correctAnswer.length; row++, i++) {\n            newGrid[row][colIndex] = correctAnswer[i];\n          }\n        }\n        return newGrid;\n      });\n    }\n  };\n  // useEffect(() => {\n  //   if (hintWordArray) {\n  //     hintWordArray.forEach((word, index) => {\n  //       console.log(`Word ${index}: '${word}' has length: ${word.length}`);\n  //       console.log([...word]);\n  //     });\n  //     const lengthArray = hintWordArray.map((word) => word.length);\n  //     setHintWordsLength(lengthArray);\n  //   }\n  // }, [hintWordArray]);\n\n  useEffect(() => {\n    const unsubscribePlayers = listenToObstacle(roomId, obstacle => {\n      // setCurrentQuestion(question)\n      // console.log(\"current question\", question)\n      const obstacleRevealed = {\n        \"question\": obstacle\n      };\n      setCurrentQuestion(obstacleRevealed);\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col].includes(\"number\")) {\n            revealCellsForPlayer(row, col, \"correct\", grid[row][col].replace(\"number\", \"\"), []);\n          }\n        }\n      }\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToQuestions(roomId, question => {\n      setCurrentQuestion(question);\n      console.log(\"current question\", question);\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  // Listen for \"open\" (select) signal\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeSelect = listenToSelectRow(roomId, data => {\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      let rowIndex = -1;\n      let colIndex = -1;\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"open\", data.selected_row_number, [], data.is_row, data.word_length);\n    });\n    return () => {\n      unsubscribeSelect();\n    };\n  }, [roomId, grid]);\n\n  // Listen for \"incorrect\" signal\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeIncorrect = listenToIncorrectRow(roomId, data => {\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      let rowIndex = -1;\n      let colIndex = -1;\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"incorrect\", data.selected_row_number, [], data.is_row, data.word_length);\n    });\n    return () => {\n      unsubscribeIncorrect();\n    };\n  }, [roomId, grid]);\n\n  // Listen for \"correct\" signal\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeCorrect = listenToCorrectRow(roomId, data => {\n      console.log(\"isInitialCall\", isInitialCall);\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      console.log(\"isInitialCall after\", isInitialCall);\n      let rowIndex = -1;\n      let colIndex = -1;\n      console.log(\"grid\", grid);\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"correct\", data.selected_row_number, data.marked_character_index, data.is_row, undefined, data.correct_answer);\n    });\n    return () => {\n      unsubscribeCorrect();\n    };\n  }, [roomId, grid]);\n\n  // Reveal cells in a row or column\n\n  // Handle number click to show menu\n  const handleNumberClick = (rowIndex, colIndex) => {\n    if (!isHost) return;\n    setMenu({\n      visible: true,\n      rowIndex,\n      colIndex\n    });\n  };\n\n  // Handle menu actions\n  const handleMenuAction = (action, rowIndex, colIndex, hintWordNumber) => {\n    revealCells(rowIndex, colIndex, action, hintWordNumber);\n    setMenu({\n      visible: false\n    });\n  };\n\n  // Handle cell click to reveal\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (!isHost) return;\n    revealCells(rowIndex, colIndex, \"open\");\n  };\n  const handleOpenObstacle = async () => {\n    if (!isHost || !hintWords || !hintWordArray) return;\n    for (let row = 0; row < grid.length; row++) {\n      for (let col = 0; col < grid[row].length; col++) {\n        if (Number.isFinite(Number(grid[row][col]))) {\n          revealCells(row, col, \"correct\", grid[row][col]);\n        }\n      }\n    }\n    if (obstacleWord) {\n      await openObstacle(roomId, obstacleWord);\n    }\n  };\n\n  // Close menu on outside click\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setMenu({\n          visible: false\n        });\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6 relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\",\n      children: typeof (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question) === \"string\" ? currentQuestion.question : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[repeat(30,30px)] grid-rows-[repeat(30,30px)] gap-1 max-h-[400px] overflow-y-scroll\",\n      children: !grid || !Array.isArray(grid) || !grid.every(row => Array.isArray(row)) ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Invalid grid data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 11\n      }, this) : grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map((cell, colIndex) => {\n          const cellKey = `${rowIndex}-${colIndex}`;\n          const cellStyle = cellStyles[cellKey] || {\n            background: cell === \"\" || cell === \" \" ? \"bg-white\" : \"bg-gray-50\",\n            textColor: cell.includes(\"number\") ? \"text-blue-500\" : \"text-transparent\"\n          };\n          const showMenu = menu.visible && menu.rowIndex === rowIndex && menu.colIndex === colIndex && cell.includes(\"number\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `w-10 h-10 flex items-center justify-center text-lg font-semibold select-none\n                      ${cell.includes(\"number\") ? \"text-blue-500 border-none\" : \"\"}\n                      ${cell.includes(\"number\") ? \"\" : cellStyle.background}\n                      ${cell.includes(\"number\") ? \"text-blue-500\" : cellStyle.textColor}\n                      ${obstacleWord !== null && obstacleWord !== void 0 && obstacleWord.includes(cell) && cellStyle.textColor === \"text-black\" && !cell.includes(\"number\") && isNaN(Number(cell)) ? \"font-bold text-red-500\" : \"\"}\n                    `,\n              onClick: () => {\n                if (isHost) {\n                  if (cell.includes(\"number\")) {\n                    handleNumberClick(rowIndex, colIndex);\n                  } else {\n                    handleCellClick(rowIndex, colIndex);\n                  }\n                }\n              },\n              style: {\n                cursor: isHost && (cell.includes(\"number\") || hintWords.some(word => word.y === rowIndex || word.x === colIndex)) ? \"pointer\" : \"default\"\n              },\n              children: typeof cell === \"string\" || typeof cell === \"number\" ? cell.includes(\"number\") ? cell.replace(\"number\", \"\") : cell : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 689,\n              columnNumber: 21\n            }, this), showMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: menuRef,\n              className: \"absolute left-12 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\",\n                onClick: () => handleMenuAction(\"open\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"SELECT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 731,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600\",\n                onClick: () => handleMenuAction(\"correct\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"Correct\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 739,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600\",\n                onClick: () => handleMenuAction(\"incorrect\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"Incorrect\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 747,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 727,\n              columnNumber: 23\n            }, this)]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 19\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayerAnswerInput, {\n      isHost: isHost,\n      question: currentQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 764,\n      columnNumber: 7\n    }, this), isHost && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          alert('Mở cnv!');\n          handleOpenObstacle();\n        },\n        className: \"bg-green-500 text-white p-2 flex-1 rounded-md whitespace-nowrap\",\n        children: \"M\\u1EDF CNV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleSuffleGrid();\n        },\n        className: \"bg-green-500 text-white p-2 flex-1 rounded-md whitespace-nowrap\",\n        children: \"X\\xE1o tr\\u1ED9n h\\xE0ng ngang\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 770,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 659,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionBoxRound2, \"jgY5HxyGzJ3Zmzd38jUk+mSVYhk=\", false, function () {\n  return [useSounds, useSearchParams, usePlayer];\n});\n_c = QuestionBoxRound2;\nexport default QuestionBoxRound2;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound2\");","map":{"version":3,"names":["React","useState","useEffect","useRef","usePlayer","setSelectedRow","setCorrectRow","setIncorectRow","listenToSound","listenToCorrectRow","listenToIncorrectRow","listenToSelectRow","listenToQuestions","listenToObstacle","useSearchParams","getNextQuestion","openObstacle","generateGrid","PlayerAnswerInput","useSounds","jsxDEV","_jsxDEV","mainKeyword","QuestionBoxRound2","obstacleWord","hintWordArray","initialGrid","isHost","_s","console","log","sounds","searchParams","setInitialGrid","roomId","get","testName","GRID_SIZE","grid","setGrid","hintWords","setHintWords","currentQuestion","setCurrentQuestion","cellStyles","setCellStyles","menu","setMenu","visible","hintWordsLength","setHintWordsLength","markedCharacters","setMarkedCharacters","highlightedCharacters","setHighlightedCharacters","handleSuffleGrid","result","placementArray","blankGrid","map","row","rowIndex","cell","colIndex","includes","unsubscribePlayers","listenToAnswers","answer","audio","play","setCorrectAnswer","timeOut","setTimeout","clearTimeout","type","markedCharactersMap","highlightedMap","word","presentArray","i","length","push","shuffled","sort","Math","random","slice","generateInitialGrid","menuRef","revealCells","action","hintWordNumber","hintWordIndex","parseInt","hintWord","find","index","isRow","dir","wordLength","string","startIndex","handleNextQuestion","round","prev","newStyles","col","key","background","textColor","toString","indexInTarget","char","encodeURIComponent","JSON","stringify","revealCellsForPlayer","selectedRowNumber","markedCharacterIndex","correctAnswer","warn","_grid$rowIndex$col","_grid$row$colIndex","prevGrid","newGrid","obstacle","obstacleRevealed","replace","question","isInitialCall","unsubscribeSelect","data","selected_row_number","is_row","word_length","unsubscribeIncorrect","unsubscribeCorrect","marked_character_index","undefined","correct_answer","handleNumberClick","handleMenuAction","handleCellClick","handleOpenObstacle","Number","isFinite","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","every","Fragment","cellKey","cellStyle","showMenu","isNaN","onClick","style","cursor","some","y","x","ref","alert","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round2.tsx"],"sourcesContent":["import Play from \"../Play\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { renderGrid } from \"./utils\";\r\nimport { usePlayer } from \"../../context/playerContext\";\r\nimport { setSelectedRow, setCorrectRow, setIncorectRow } from \"../../components/services\";\r\nimport { listenToSound, listenToCorrectRow, listenToIncorrectRow, listenToSelectRow, listenToQuestions, listenToObstacle } from \"../../services/firebaseServices\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { getNextQuestion } from \"../../pages/Host/Test/service\";\r\nimport { openObstacle } from \"../../components/services\";\r\nimport { generateGrid } from \"../../pages/User/Round2/utils\";\r\nimport PlayerAnswerInput from \"../../components/ui/PlayerAnswerInput\";\r\nimport { Question } from \"../../type\";\r\nimport { useSounds } from \"../../context/soundContext\";\r\n\r\ninterface HintWord {\r\n  word: string;\r\n  x: number;\r\n  y: number;\r\n  direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\n\r\n\r\ninterface MatchPosition {\r\n  x: number;\r\n  y: number;\r\n  dir: number;\r\n}\r\n\r\ninterface WordObj {\r\n  string: string;\r\n  char: string[];\r\n  totalMatches: number;\r\n  effectiveMatches: number;\r\n  successfulMatches: MatchPosition[];\r\n  x: number;\r\n  y: number;\r\n  dir: number;\r\n  index: number;\r\n};\r\n\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n  obstacleWord?: string;\r\n  hintWordArray?: string[];\r\n  isHost?: boolean;\r\n  initialGrid?: string[][];\r\n}\r\n\r\ninterface QuestionBoxProps {\r\n  question: string;\r\n  imageUrl?: string;\r\n  isHost?: boolean\r\n}\r\n\r\nconst mainKeyword = \"BÒCÔNGANH\";\r\n\r\nconst QuestionBoxRound2: React.FC<ObstacleQuestionBoxProps> = ({\r\n  obstacleWord,\r\n  hintWordArray,\r\n  initialGrid,\r\n  isHost = false,\r\n}) => {\r\n  console.log(\"initialGrid inside player\", initialGrid);\r\n  const sounds = useSounds();\r\n  const [searchParams] = useSearchParams();\r\n  const { setInitialGrid } = usePlayer();\r\n  const roomId = searchParams.get(\"roomId\") || \"\";\r\n  const testName = searchParams.get(\"testName\") || \"\"\r\n  const GRID_SIZE = 30;\r\n\r\n  const [grid, setGrid] = useState<string[][]>([[]]);\r\n  const [hintWords, setHintWords] = useState<WordObj[]>([]);\r\n  const [currentQuestion, setCurrentQuestion] = useState<Question>()\r\n\r\n  const [cellStyles, setCellStyles] = useState<\r\n    Record<string, { background: string; textColor: string }>\r\n  >({}); // Tracks background and text styles\r\n  const [menu, setMenu] = useState<{\r\n    visible: boolean;\r\n    rowIndex?: number;\r\n    colIndex?: number;\r\n  }>({ visible: false });\r\n  const [hintWordsLength, setHintWordsLength] = useState<number[]>([]);\r\n  const [markedCharacters, setMarkedCharacters] = useState<Record<string, number[]>>({});\r\n  const [highlightedCharacters, setHighlightedCharacters] = useState<Record<string, number[]>>({});\r\n\r\n  const handleSuffleGrid = async () => {\r\n    if (isHost && hintWordArray) {\r\n      const result = await generateGrid(hintWordArray, 30)\r\n      console.log(\"board\", result.grid);\r\n      setHintWords(result.placementArray)\r\n      setGrid(result.grid)\r\n\r\n      const blankGrid = result.grid.map((row, rowIndex) =>\r\n        row.map((cell, colIndex) =>\r\n          result.grid[rowIndex][colIndex].includes(\"number\") ? cell : // Keep \"numberX\"\r\n            (cell !== \" \" && cell !== \"\") ? \"1\" : \"\" // Non-empty to \"1\", empty stays \"\"\r\n        )\r\n      );\r\n      setInitialGrid(blankGrid)\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n  \r\n          const unsubscribePlayers = listenToAnswers(roomId, (answer) => {\r\n              const audio = sounds['correct'];\r\n              if (audio) {\r\n                  audio.play();\r\n              }\r\n              setCorrectAnswer(`Đáp án: ${answer}`)\r\n              const timeOut = setTimeout(() => {\r\n                  setCorrectAnswer(\"\")\r\n              }, 4000)\r\n              console.log(\"answer\", answer)\r\n              clearTimeout(timeOut)\r\n          });\r\n  \r\n          // No need to set state here; it's handled by useState initializer\r\n          return () => {\r\n              unsubscribePlayers();\r\n  \r\n          };\r\n      }, []);\r\n\r\n  useEffect(() => {\r\n        const unsubscribePlayers = listenToSound(roomId, (type) => {\r\n\r\n            const audio = sounds[`${type}`];\r\n            if (audio) {\r\n                audio.play();\r\n            }\r\n            console.log(\"sound type\", type)\r\n        });\r\n\r\n        // No need to set state here; it's handled by useState initializer\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n  useEffect(() => {\r\n    const markedCharactersMap: Record<string, number[]> = {};\r\n    const highlightedMap: Record<string, number[]> = {};\r\n\r\n    if (hintWordArray) {\r\n      for (const word of hintWordArray) {\r\n        const presentArray: number[] = [];\r\n\r\n        for (let i = 0; i < word.length; i++) {\r\n          if (obstacleWord?.includes(word[i])) {\r\n            presentArray.push(i);\r\n          }\r\n        }\r\n\r\n        markedCharactersMap[word] = presentArray;\r\n\r\n        // Randomly pick up to 2 indices\r\n        const shuffled = [...presentArray].sort(() => Math.random() - 0.5);\r\n        highlightedMap[word] = shuffled.slice(0, 2);\r\n      }\r\n\r\n      setMarkedCharacters(markedCharactersMap);\r\n      setHighlightedCharacters(highlightedMap);\r\n    }\r\n  }, [hintWordArray, obstacleWord]);\r\n\r\n  useEffect(() => {\r\n    const generateInitialGrid = async () => {\r\n      if (hintWordArray) {\r\n        if (isHost) {\r\n          console.log(\"hintWordArray\", hintWordArray);\r\n          console.log(\"obstacle\", obstacleWord);\r\n\r\n          const result = await generateGrid(hintWordArray, 30)\r\n          console.log(\"board\", result.grid);\r\n          setHintWords(result.placementArray)\r\n          setGrid(result.grid)\r\n\r\n          const blankGrid = result.grid.map((row, rowIndex) =>\r\n            row.map((cell, colIndex) =>\r\n              result.grid[rowIndex][colIndex].includes(\"number\") ? cell : // Keep \"numberX\"\r\n                (cell !== \" \" && cell !== \"\") ? \"1\" : \"\" // Non-empty to \"1\", empty stays \"\"\r\n            )\r\n          );\r\n          setInitialGrid(blankGrid)\r\n        }\r\n      }\r\n\r\n      if (initialGrid) {\r\n        setGrid(initialGrid)\r\n      }\r\n    }\r\n\r\n    generateInitialGrid()\r\n  }, [hintWordArray, obstacleWord, initialGrid])\r\n\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n\r\n  const revealCells = (\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    action: \"open\" | \"correct\" | \"incorrect\",\r\n    hintWordNumber?: string\r\n  ) => {\r\n    if (!isHost) return;\r\n\r\n    const hintWordIndex = hintWordNumber ? parseInt(hintWordNumber) : -1;\r\n    const hintWord = hintWords.find(\r\n      (word) =>\r\n        (word.index === hintWordIndex)\r\n    );\r\n\r\n    console.log(\"hintWord\", hintWord);\r\n    console.log(\"hintWords\", hintWords);\r\n\r\n\r\n    if (!hintWord) return;\r\n\r\n    const isRow = hintWord.dir === 1;\r\n    console.log(hintWord, \"is\", hintWord.dir);\r\n\r\n    const wordLength = hintWord.string.length - 3;\r\n    const startIndex = isRow ? colIndex + 1 : rowIndex + 1;\r\n\r\n    const handleNextQuestion = async (testName: string, hintWordIndex: string, round: string, roomId: string) => {\r\n      await getNextQuestion(testName, hintWordIndex, round, roomId)\r\n    }\r\n\r\n    setCellStyles((prev) => {\r\n      const newStyles = { ...prev };\r\n      if (isRow) {\r\n        for (let col = startIndex; col < startIndex + wordLength; col++) {\r\n          if (col == GRID_SIZE) break\r\n          const key = `${rowIndex}-${col}`;\r\n          // Skip number cells to preserve their appearance\r\n          console.log(\"grid[rowIndex][col]\", grid[rowIndex][col])\r\n          console.log(\"rowIndex\", rowIndex);\r\n          console.log(\"col\", col);\r\n\r\n          if (!grid[rowIndex][col].includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber) {\r\n                setSelectedRow(roomId, hintWordNumber, true, wordLength)\r\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId)\r\n              }\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-black\" };\r\n              let indexInTarget = []\r\n              if (hintWordArray)\r\n                for (let i = 2; i <= wordLength + 1; i++) {\r\n                  const char = hintWord.char[i];\r\n\r\n\r\n                  if (obstacleWord) {\r\n                    if (obstacleWord.includes(char)) {\r\n                      console.log(\"obstacleWord\", obstacleWord);\r\n                      console.log(\"char\", char);\r\n                      console.log(\"obstacleWord.includes(char)\", obstacleWord.includes(char));\r\n                      console.log(\"i\", i);\r\n                      console.log(\"i-2\", i - 2);\r\n\r\n\r\n\r\n                      indexInTarget.push(i - 2)\r\n                    }\r\n                  }\r\n                }\r\n              if (hintWordArray && hintWordNumber) {\r\n                console.log(\"hintWordNumber\", hintWordNumber);\r\n                console.log(\"hintWord\", hintWord);\r\n                console.log(\"hintWord.string.slice(2, hintWord.string.length-1)\", hintWord.string.slice(2, hintWord.string.length - 1));\r\n                console.log(\"indexInTarget\", indexInTarget);\r\n                console.log(\"encodeURIComponent(JSON.stringify(indexInTarget))\", encodeURIComponent(JSON.stringify(indexInTarget)),);\r\n\r\n\r\n\r\n\r\n                setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), true, wordLength)\r\n              }\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setIncorectRow(roomId, hintWordNumber, true, wordLength)\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        for (let row = startIndex; row < startIndex + wordLength; row++) {\r\n          if (row == GRID_SIZE) break\r\n          const key = `${row}-${colIndex}`;\r\n          console.log(\"grid[row][colIndex]\", grid[row][colIndex])\r\n          console.log(\"colIndex\", colIndex);\r\n          console.log(\"row\", row);\r\n          // Skip number cells to preserve their appearance\r\n          if (!grid[row][colIndex].includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber) {\r\n                setSelectedRow(roomId, hintWordNumber, false, wordLength)\r\n                handleNextQuestion(testName, hintWordNumber.toString(), \"2\", roomId)\r\n              }\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-black\" };\r\n              let indexInTarget = []\r\n              if (hintWordArray)\r\n                for (let i = 2; i <= wordLength + 1; i++) {\r\n                  const char = hintWord.char[i];\r\n\r\n                  if (obstacleWord) {\r\n                    if (obstacleWord.includes(char)) {\r\n                      console.log(\"obstacleWord\", obstacleWord);\r\n                      console.log(\"char\", char);\r\n                      console.log(\"obstacleWord.includes(char)\", obstacleWord.includes(char));\r\n                      console.log(\"i\", i);\r\n                      console.log(\"i-2\", i - 2);\r\n\r\n                      indexInTarget.push(i - 2)\r\n                    }\r\n                  }\r\n                }\r\n              if (hintWordArray && hintWordNumber)\r\n                setCorrectRow(roomId, hintWordNumber, hintWord.string.slice(2, hintWord.string.length - 1), encodeURIComponent(JSON.stringify(indexInTarget)), false, wordLength)\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setIncorectRow(roomId, hintWordNumber, false, wordLength)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return newStyles;\r\n    });\r\n\r\n    // if (action === \"correct\" || action === \"incorrect\") {\r\n    //   setSelectedRow(roomId, isRow ? rowIndex.toString() : colIndex.toString());\r\n    // }\r\n  };\r\n\r\n\r\n  const revealCellsForPlayer = (\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    action: \"open\" | \"incorrect\" | \"correct\",\r\n    selectedRowNumber: string,\r\n    markedCharacterIndex: number[],\r\n    isRow?: boolean,\r\n    wordLength?: number, // For open and incorrect\r\n    correctAnswer?: string, // For correct\r\n  ) => {\r\n    if (isHost) return; // Ensure this runs only for players\r\n\r\n    // Determine word length\r\n    const length = action === \"correct\" ? correctAnswer?.length || 0 : wordLength || 0;\r\n\r\n    if (length === 0) {\r\n      console.warn(`No valid word length for row ${selectedRowNumber}`);\r\n      return;\r\n    }\r\n\r\n    setCellStyles((prev) => {\r\n      const newStyles = { ...prev };\r\n      if (isRow) {\r\n        // Horizontal: style cells from colIndex + 1 to colIndex + length\r\n        for (let col = colIndex + 1; col <= colIndex + length; col++) {\r\n          const key = `${rowIndex}-${col}`;\r\n          console.log(\"markedCharacterIndex\", markedCharacterIndex);\r\n          console.log(\"col\", col);\r\n          console.log(\"col-colIndex\", col - colIndex - 1);\r\n\r\n          console.log(\"markedCharacterIndex.includes(col)\", markedCharacterIndex.includes(col - colIndex));\r\n\r\n\r\n\r\n          // Skip empty and number cells\r\n          if (grid[rowIndex][col] !== \"\" && !grid[rowIndex][col]?.includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = {\r\n                background: \"bg-yellow-200\",\r\n                textColor: markedCharacterIndex.includes(col - colIndex - 1) ? \"text-red-600\" : \"text-black\"\r\n              };\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // Vertical: style cells from rowIndex + 1 to rowIndex + length\r\n        for (let row = rowIndex + 1; row <= rowIndex + length; row++) {\r\n          const key = `${row}-${colIndex}`;\r\n          console.log(\"markedCharacterIndex\", markedCharacterIndex);\r\n          console.log(\"col\", row);\r\n          console.log(\"row-rowIndex\", row - rowIndex - 1);\r\n          console.log(\"markedCharacterIndex.includes(col)\", markedCharacterIndex.includes(row - rowIndex));\r\n          // Skip empty and number cells\r\n          if (grid[row][colIndex] !== \"\" && !grid[row][colIndex]?.includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = {\r\n                background: \"bg-yellow-200\",\r\n                textColor: markedCharacterIndex.includes(row - rowIndex - 1) ? \"text-red-600\" : \"text-black\"\r\n              };\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return newStyles;\r\n    });\r\n\r\n    // For \"correct\", update grid to show the actual word\r\n    if (action === \"correct\" && correctAnswer) {\r\n      setGrid((prevGrid) => {\r\n        const newGrid = prevGrid.map((row) => [...row]);\r\n        if (isRow) {\r\n          for (let col = colIndex + 1, i = 0; col <= colIndex + length && i < correctAnswer.length; col++, i++) {\r\n            newGrid[rowIndex][col] = correctAnswer[i];\r\n          }\r\n        } else {\r\n          for (let row = rowIndex + 1, i = 0; row <= rowIndex + length && i < correctAnswer.length; row++, i++) {\r\n            newGrid[row][colIndex] = correctAnswer[i];\r\n          }\r\n        }\r\n        return newGrid;\r\n      });\r\n    }\r\n  };\r\n  // useEffect(() => {\r\n  //   if (hintWordArray) {\r\n  //     hintWordArray.forEach((word, index) => {\r\n  //       console.log(`Word ${index}: '${word}' has length: ${word.length}`);\r\n  //       console.log([...word]);\r\n  //     });\r\n  //     const lengthArray = hintWordArray.map((word) => word.length);\r\n  //     setHintWordsLength(lengthArray);\r\n  //   }\r\n  // }, [hintWordArray]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const unsubscribePlayers = listenToObstacle(roomId, (obstacle) => {\r\n      // setCurrentQuestion(question)\r\n      // console.log(\"current question\", question)\r\n      const obstacleRevealed = {\r\n        \"question\": obstacle\r\n      }\r\n\r\n      setCurrentQuestion(obstacleRevealed)\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col].includes(\"number\")) {\r\n            revealCellsForPlayer(row, col, \"correct\", grid[row][col].replace(\"number\", \"\"), [])\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // No need to set state here; it's handled by useState initializer\r\n    return () => {\r\n      unsubscribePlayers();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const unsubscribePlayers = listenToQuestions(roomId, (question) => {\r\n      setCurrentQuestion(question)\r\n      console.log(\"current question\", question)\r\n\r\n    });\r\n\r\n    // No need to set state here; it's handled by useState initializer\r\n    return () => {\r\n      unsubscribePlayers();\r\n    };\r\n  }, []);\r\n  // Listen for \"open\" (select) signal\r\n  useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeSelect = listenToSelectRow(roomId, (data) => {\r\n\r\n      if (isInitialCall) {\r\n        isInitialCall = false;\r\n        return; // Skip the initial snapshot\r\n      }\r\n\r\n\r\n      let rowIndex = -1;\r\n      let colIndex = -1;\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col] === `number${data.selected_row_number}`) {\r\n            rowIndex = row;\r\n            colIndex = col;\r\n            break;\r\n          }\r\n        }\r\n        if (rowIndex !== -1) break;\r\n      }\r\n\r\n      if (rowIndex === -1 || colIndex === -1) {\r\n        console.warn(`Number cell number${data.selected_row_number} not found`);\r\n        return;\r\n      }\r\n\r\n      revealCellsForPlayer(rowIndex, colIndex, \"open\", data.selected_row_number, [], data.is_row, data.word_length);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeSelect();\r\n    };\r\n  }, [roomId, grid]);\r\n\r\n  // Listen for \"incorrect\" signal\r\n  useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeIncorrect = listenToIncorrectRow(roomId, (data) => {\r\n      if (isInitialCall) {\r\n        isInitialCall = false;\r\n        return; // Skip the initial snapshot\r\n      }\r\n\r\n      let rowIndex = -1;\r\n      let colIndex = -1;\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col] === `number${data.selected_row_number}`) {\r\n            rowIndex = row;\r\n            colIndex = col;\r\n            break;\r\n          }\r\n        }\r\n        if (rowIndex !== -1) break;\r\n      }\r\n\r\n      if (rowIndex === -1 || colIndex === -1) {\r\n        console.warn(`Number cell number${data.selected_row_number} not found`);\r\n        return;\r\n      }\r\n\r\n      revealCellsForPlayer(rowIndex, colIndex, \"incorrect\", data.selected_row_number, [], data.is_row, data.word_length);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeIncorrect();\r\n    };\r\n  }, [roomId, grid]);\r\n\r\n  // Listen for \"correct\" signal\r\n  useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeCorrect = listenToCorrectRow(\r\n      roomId,\r\n      (data) => {\r\n        console.log(\"isInitialCall\", isInitialCall);\r\n\r\n        if (isInitialCall) {\r\n          isInitialCall = false;\r\n          return; // Skip the initial snapshot\r\n        }\r\n\r\n        console.log(\"isInitialCall after\", isInitialCall);\r\n        let rowIndex = -1;\r\n        let colIndex = -1;\r\n        console.log(\"grid\", grid);\r\n\r\n        for (let row = 0; row < grid.length; row++) {\r\n          for (let col = 0; col < grid[row].length; col++) {\r\n            if (grid[row][col] === `number${data.selected_row_number}`) {\r\n              rowIndex = row;\r\n              colIndex = col;\r\n              break;\r\n            }\r\n          }\r\n          if (rowIndex !== -1) break;\r\n        }\r\n\r\n        if (rowIndex === -1 || colIndex === -1) {\r\n          console.warn(`Number cell number${data.selected_row_number} not found`);\r\n          return;\r\n        }\r\n\r\n        revealCellsForPlayer(rowIndex, colIndex, \"correct\", data.selected_row_number, data.marked_character_index, data.is_row, undefined, data.correct_answer);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribeCorrect();\r\n    };\r\n  }, [roomId, grid]);\r\n\r\n\r\n  // Reveal cells in a row or column\r\n\r\n\r\n  // Handle number click to show menu\r\n  const handleNumberClick = (rowIndex: number, colIndex: number) => {\r\n    if (!isHost) return;\r\n    setMenu({\r\n      visible: true,\r\n      rowIndex,\r\n      colIndex,\r\n    });\r\n  };\r\n\r\n  // Handle menu actions\r\n  const handleMenuAction = (\r\n    action: \"open\" | \"correct\" | \"incorrect\",\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    hintWordNumber: string\r\n  ) => {\r\n    revealCells(rowIndex, colIndex, action, hintWordNumber);\r\n    setMenu({ visible: false });\r\n  };\r\n\r\n  // Handle cell click to reveal\r\n  const handleCellClick = (rowIndex: number, colIndex: number) => {\r\n    if (!isHost) return;\r\n    revealCells(rowIndex, colIndex, \"open\");\r\n  };\r\n\r\n  const handleOpenObstacle = async () => {\r\n    if (!isHost || !hintWords || !hintWordArray) return;\r\n\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid[row].length; col++) {\r\n        if (Number.isFinite(Number(grid[row][col]))) {\r\n          revealCells(row, col, \"correct\", grid[row][col])\r\n        }\r\n      }\r\n    }\r\n    if (obstacleWord) {\r\n\r\n      await openObstacle(roomId, obstacleWord)\r\n    }\r\n  }\r\n\r\n  // Close menu on outside click\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n        setMenu({ visible: false });\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6 relative\">\r\n      <div className=\"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\">\r\n        {typeof currentQuestion?.question === \"string\"\r\n          ? currentQuestion.question\r\n          : \"\"}\r\n      </div>\r\n      <div className=\"grid grid-cols-[repeat(30,30px)] grid-rows-[repeat(30,30px)] gap-1 max-h-[400px] overflow-y-scroll\">\r\n\r\n\r\n        {(!grid || !Array.isArray(grid) || !grid.every(row => Array.isArray(row))) ?\r\n          <div>Invalid grid data</div>\r\n          :\r\n          grid.map((row, rowIndex) => (\r\n            <React.Fragment key={rowIndex}>\r\n              {row.map((cell, colIndex) => {\r\n\r\n                const cellKey = `${rowIndex}-${colIndex}`;\r\n                const cellStyle = cellStyles[cellKey] || {\r\n                  background: cell === \"\" || cell === \" \" ? \"bg-white\" : \"bg-gray-50\",\r\n                  textColor: cell.includes(\"number\") ? \"text-blue-500\" : \"text-transparent\",\r\n                };\r\n\r\n                const showMenu =\r\n                  menu.visible &&\r\n                  menu.rowIndex === rowIndex &&\r\n                  menu.colIndex === colIndex &&\r\n                  cell.includes(\"number\");\r\n\r\n                return (\r\n                  <div className=\"relative flex items-center\" key={colIndex}>\r\n                    <div\r\n                      className={`w-10 h-10 flex items-center justify-center text-lg font-semibold select-none\r\n                      ${cell.includes(\"number\") ? \"text-blue-500 border-none\" : \"\"}\r\n                      ${cell.includes(\"number\") ? \"\" : cellStyle.background}\r\n                      ${cell.includes(\"number\") ? \"text-blue-500\" : cellStyle.textColor}\r\n                      ${obstacleWord?.includes(cell) &&\r\n                          cellStyle.textColor === \"text-black\" &&\r\n                          !cell.includes(\"number\") &&\r\n                          isNaN(Number(cell))\r\n                          ? \"font-bold text-red-500\"\r\n                          : \"\"}\r\n                    `}\r\n                      onClick={() => {\r\n                        if (isHost) {\r\n                          if (cell.includes(\"number\")) {\r\n                            handleNumberClick(rowIndex, colIndex);\r\n                          } else {\r\n                            handleCellClick(rowIndex, colIndex);\r\n                          }\r\n                        }\r\n                      }}\r\n                      style={{\r\n                        cursor:\r\n                          isHost &&\r\n                            (cell.includes(\"number\") ||\r\n                              hintWords.some((word) => word.y === rowIndex || word.x === colIndex))\r\n                            ? \"pointer\"\r\n                            : \"default\",\r\n                      }}\r\n                    >\r\n\r\n                      {typeof cell === \"string\" || typeof cell === \"number\"\r\n                        ? (cell.includes(\"number\") ? cell.replace(\"number\", \"\") : cell)\r\n                        : \"\"}\r\n                    </div>\r\n\r\n\r\n                    {showMenu && (\r\n                      <div\r\n                        ref={menuRef}\r\n                        className=\"absolute left-12 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\"\r\n                      >\r\n                        <button\r\n                          className=\"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n                          onClick={() =>\r\n                            handleMenuAction(\"open\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                          }\r\n                        >\r\n                          SELECT\r\n                        </button>\r\n                        <button\r\n                          className=\"px-2 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600\"\r\n                          onClick={() =>\r\n                            handleMenuAction(\"correct\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                          }\r\n                        >\r\n                          Correct\r\n                        </button>\r\n                        <button\r\n                          className=\"px-2 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600\"\r\n                          onClick={() =>\r\n                            handleMenuAction(\"incorrect\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                          }\r\n                        >\r\n                          Incorrect\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                );\r\n              })}\r\n            </React.Fragment>\r\n          ))}\r\n      </div>\r\n\r\n      <PlayerAnswerInput\r\n                isHost={isHost}\r\n                question={currentQuestion}\r\n            />\r\n      {\r\n        isHost && (\r\n          <div className=\"flex gap-2\"> {/* Flex container with spacing */}\r\n            <button\r\n              onClick={() => {\r\n                alert('Mở cnv!')\r\n                handleOpenObstacle()\r\n              }}\r\n              className=\"bg-green-500 text-white p-2 flex-1 rounded-md whitespace-nowrap\"\r\n            >\r\n              Mở CNV\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                handleSuffleGrid()\r\n              }}\r\n              className=\"bg-green-500 text-white p-2 flex-1 rounded-md whitespace-nowrap\"\r\n            >\r\n              Xáo trộn hàng ngang\r\n            </button>\r\n          </div>\r\n        )\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionBoxRound2;"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAE1D,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,cAAc,EAAEC,aAAa,EAAEC,cAAc,QAAQ,2BAA2B;AACzF,SAASC,aAAa,EAAEC,kBAAkB,EAAEC,oBAAoB,EAAEC,iBAAiB,EAAEC,iBAAiB,EAAEC,gBAAgB,QAAQ,iCAAiC;AACjK,SAASC,eAAe,QAAQ,kBAAkB;AAClD,SAASC,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,YAAY,QAAQ,+BAA+B;AAC5D,OAAOC,iBAAiB,MAAM,uCAAuC;AAErE,SAASC,SAAS,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AA2BtD;AAgBD,MAAMC,WAAW,GAAG,WAAW;AAE/B,MAAMC,iBAAqD,GAAGA,CAAC;EAC7DC,YAAY;EACZC,aAAa;EACbC,WAAW;EACXC,MAAM,GAAG;AACX,CAAC,KAAK;EAAAC,EAAA;EACJC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEJ,WAAW,CAAC;EACrD,MAAMK,MAAM,GAAGZ,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACa,YAAY,CAAC,GAAGlB,eAAe,CAAC,CAAC;EACxC,MAAM;IAAEmB;EAAe,CAAC,GAAG7B,SAAS,CAAC,CAAC;EACtC,MAAM8B,MAAM,GAAGF,YAAY,CAACG,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE;EAC/C,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE;EACnD,MAAME,SAAS,GAAG,EAAE;EAEpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGtC,QAAQ,CAAa,CAAC,EAAE,CAAC,CAAC;EAClD,MAAM,CAACuC,SAAS,EAAEC,YAAY,CAAC,GAAGxC,QAAQ,CAAY,EAAE,CAAC;EACzD,MAAM,CAACyC,eAAe,EAAEC,kBAAkB,CAAC,GAAG1C,QAAQ,CAAW,CAAC;EAElE,MAAM,CAAC2C,UAAU,EAAEC,aAAa,CAAC,GAAG5C,QAAQ,CAE1C,CAAC,CAAC,CAAC,CAAC,CAAC;EACP,MAAM,CAAC6C,IAAI,EAAEC,OAAO,CAAC,GAAG9C,QAAQ,CAI7B;IAAE+C,OAAO,EAAE;EAAM,CAAC,CAAC;EACtB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjD,QAAQ,CAAW,EAAE,CAAC;EACpE,MAAM,CAACkD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnD,QAAQ,CAA2B,CAAC,CAAC,CAAC;EACtF,MAAM,CAACoD,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGrD,QAAQ,CAA2B,CAAC,CAAC,CAAC;EAEhG,MAAMsD,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI5B,MAAM,IAAIF,aAAa,EAAE;MAC3B,MAAM+B,MAAM,GAAG,MAAMvC,YAAY,CAACQ,aAAa,EAAE,EAAE,CAAC;MACpDI,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE0B,MAAM,CAAClB,IAAI,CAAC;MACjCG,YAAY,CAACe,MAAM,CAACC,cAAc,CAAC;MACnClB,OAAO,CAACiB,MAAM,CAAClB,IAAI,CAAC;MAEpB,MAAMoB,SAAS,GAAGF,MAAM,CAAClB,IAAI,CAACqB,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,KAC9CD,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,QAAQ,KACrBP,MAAM,CAAClB,IAAI,CAACuB,QAAQ,CAAC,CAACE,QAAQ,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,GAAGF,IAAI;MAAG;MACzDA,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,EAAE,GAAI,GAAG,GAAG,EAAE,CAAC;MAC7C,CACF,CAAC;MACD7B,cAAc,CAACyB,SAAS,CAAC;IAC3B;EAEF,CAAC;EAEDxD,SAAS,CAAC,MAAM;IAER,MAAM+D,kBAAkB,GAAGC,eAAe,CAAChC,MAAM,EAAGiC,MAAM,IAAK;MAC3D,MAAMC,KAAK,GAAGrC,MAAM,CAAC,SAAS,CAAC;MAC/B,IAAIqC,KAAK,EAAE;QACPA,KAAK,CAACC,IAAI,CAAC,CAAC;MAChB;MACAC,gBAAgB,CAAC,WAAWH,MAAM,EAAE,CAAC;MACrC,MAAMI,OAAO,GAAGC,UAAU,CAAC,MAAM;QAC7BF,gBAAgB,CAAC,EAAE,CAAC;MACxB,CAAC,EAAE,IAAI,CAAC;MACRzC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEqC,MAAM,CAAC;MAC7BM,YAAY,CAACF,OAAO,CAAC;IACzB,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACTN,kBAAkB,CAAC,CAAC;IAExB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEV/D,SAAS,CAAC,MAAM;IACV,MAAM+D,kBAAkB,GAAGzD,aAAa,CAAC0B,MAAM,EAAGwC,IAAI,IAAK;MAEvD,MAAMN,KAAK,GAAGrC,MAAM,CAAC,GAAG2C,IAAI,EAAE,CAAC;MAC/B,IAAIN,KAAK,EAAE;QACPA,KAAK,CAACC,IAAI,CAAC,CAAC;MAChB;MACAxC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE4C,IAAI,CAAC;IACnC,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACTT,kBAAkB,CAAC,CAAC;IACxB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAER/D,SAAS,CAAC,MAAM;IACd,MAAMyE,mBAA6C,GAAG,CAAC,CAAC;IACxD,MAAMC,cAAwC,GAAG,CAAC,CAAC;IAEnD,IAAInD,aAAa,EAAE;MACjB,KAAK,MAAMoD,IAAI,IAAIpD,aAAa,EAAE;QAChC,MAAMqD,YAAsB,GAAG,EAAE;QAEjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;UACpC,IAAIvD,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAEwC,QAAQ,CAACa,IAAI,CAACE,CAAC,CAAC,CAAC,EAAE;YACnCD,YAAY,CAACG,IAAI,CAACF,CAAC,CAAC;UACtB;QACF;QAEAJ,mBAAmB,CAACE,IAAI,CAAC,GAAGC,YAAY;;QAExC;QACA,MAAMI,QAAQ,GAAG,CAAC,GAAGJ,YAAY,CAAC,CAACK,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;QAClET,cAAc,CAACC,IAAI,CAAC,GAAGK,QAAQ,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MAC7C;MAEAlC,mBAAmB,CAACuB,mBAAmB,CAAC;MACxCrB,wBAAwB,CAACsB,cAAc,CAAC;IAC1C;EACF,CAAC,EAAE,CAACnD,aAAa,EAAED,YAAY,CAAC,CAAC;EAEjCtB,SAAS,CAAC,MAAM;IACd,MAAMqF,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI9D,aAAa,EAAE;QACjB,IAAIE,MAAM,EAAE;UACVE,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEL,aAAa,CAAC;UAC3CI,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEN,YAAY,CAAC;UAErC,MAAMgC,MAAM,GAAG,MAAMvC,YAAY,CAACQ,aAAa,EAAE,EAAE,CAAC;UACpDI,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE0B,MAAM,CAAClB,IAAI,CAAC;UACjCG,YAAY,CAACe,MAAM,CAACC,cAAc,CAAC;UACnClB,OAAO,CAACiB,MAAM,CAAClB,IAAI,CAAC;UAEpB,MAAMoB,SAAS,GAAGF,MAAM,CAAClB,IAAI,CAACqB,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,KAC9CD,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,QAAQ,KACrBP,MAAM,CAAClB,IAAI,CAACuB,QAAQ,CAAC,CAACE,QAAQ,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,GAAGF,IAAI;UAAG;UACzDA,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,EAAE,GAAI,GAAG,GAAG,EAAE,CAAC;UAC7C,CACF,CAAC;UACD7B,cAAc,CAACyB,SAAS,CAAC;QAC3B;MACF;MAEA,IAAIhC,WAAW,EAAE;QACfa,OAAO,CAACb,WAAW,CAAC;MACtB;IACF,CAAC;IAED6D,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,CAAC9D,aAAa,EAAED,YAAY,EAAEE,WAAW,CAAC,CAAC;EAE9C,MAAM8D,OAAO,GAAGrF,MAAM,CAAiB,IAAI,CAAC;EAE5C,MAAMsF,WAAW,GAAGA,CAClB5B,QAAgB,EAChBE,QAAgB,EAChB2B,MAAwC,EACxCC,cAAuB,KACpB;IACH,IAAI,CAAChE,MAAM,EAAE;IAEb,MAAMiE,aAAa,GAAGD,cAAc,GAAGE,QAAQ,CAACF,cAAc,CAAC,GAAG,CAAC,CAAC;IACpE,MAAMG,QAAQ,GAAGtD,SAAS,CAACuD,IAAI,CAC5BlB,IAAI,IACFA,IAAI,CAACmB,KAAK,KAAKJ,aACpB,CAAC;IAED/D,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEgE,QAAQ,CAAC;IACjCjE,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEU,SAAS,CAAC;IAGnC,IAAI,CAACsD,QAAQ,EAAE;IAEf,MAAMG,KAAK,GAAGH,QAAQ,CAACI,GAAG,KAAK,CAAC;IAChCrE,OAAO,CAACC,GAAG,CAACgE,QAAQ,EAAE,IAAI,EAAEA,QAAQ,CAACI,GAAG,CAAC;IAEzC,MAAMC,UAAU,GAAGL,QAAQ,CAACM,MAAM,CAACpB,MAAM,GAAG,CAAC;IAC7C,MAAMqB,UAAU,GAAGJ,KAAK,GAAGlC,QAAQ,GAAG,CAAC,GAAGF,QAAQ,GAAG,CAAC;IAEtD,MAAMyC,kBAAkB,GAAG,MAAAA,CAAOlE,QAAgB,EAAEwD,aAAqB,EAAEW,KAAa,EAAErE,MAAc,KAAK;MAC3G,MAAMnB,eAAe,CAACqB,QAAQ,EAAEwD,aAAa,EAAEW,KAAK,EAAErE,MAAM,CAAC;IAC/D,CAAC;IAEDW,aAAa,CAAE2D,IAAI,IAAK;MACtB,MAAMC,SAAS,GAAG;QAAE,GAAGD;MAAK,CAAC;MAC7B,IAAIP,KAAK,EAAE;QACT,KAAK,IAAIS,GAAG,GAAGL,UAAU,EAAEK,GAAG,GAAGL,UAAU,GAAGF,UAAU,EAAEO,GAAG,EAAE,EAAE;UAC/D,IAAIA,GAAG,IAAIrE,SAAS,EAAE;UACtB,MAAMsE,GAAG,GAAG,GAAG9C,QAAQ,IAAI6C,GAAG,EAAE;UAChC;UACA7E,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEQ,IAAI,CAACuB,QAAQ,CAAC,CAAC6C,GAAG,CAAC,CAAC;UACvD7E,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE+B,QAAQ,CAAC;UACjChC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAE4E,GAAG,CAAC;UAEvB,IAAI,CAACpE,IAAI,CAACuB,QAAQ,CAAC,CAAC6C,GAAG,CAAC,CAAC1C,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAC3C,IAAI0B,MAAM,KAAK,MAAM,EAAE;cACrBe,SAAS,CAACE,GAAG,CAAC,GAAG;gBAAEC,UAAU,EAAE,eAAe;gBAAEC,SAAS,EAAE;cAAmB,CAAC;cAC/E,IAAIlB,cAAc,EAAE;gBAClBtF,cAAc,CAAC6B,MAAM,EAAEyD,cAAc,EAAE,IAAI,EAAEQ,UAAU,CAAC;gBACxDG,kBAAkB,CAAClE,QAAQ,EAAEuD,cAAc,CAACmB,QAAQ,CAAC,CAAC,EAAE,GAAG,EAAE5E,MAAM,CAAC;cACtE;YACF,CAAC,MAAM,IAAIwD,MAAM,KAAK,SAAS,EAAE;cAC/Be,SAAS,CAACE,GAAG,CAAC,GAAG;gBAAEC,UAAU,EAAE,eAAe;gBAAEC,SAAS,EAAE;cAAa,CAAC;cACzE,IAAIE,aAAa,GAAG,EAAE;cACtB,IAAItF,aAAa,EACf,KAAK,IAAIsD,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIoB,UAAU,GAAG,CAAC,EAAEpB,CAAC,EAAE,EAAE;gBACxC,MAAMiC,IAAI,GAAGlB,QAAQ,CAACkB,IAAI,CAACjC,CAAC,CAAC;gBAG7B,IAAIvD,YAAY,EAAE;kBAChB,IAAIA,YAAY,CAACwC,QAAQ,CAACgD,IAAI,CAAC,EAAE;oBAC/BnF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,YAAY,CAAC;oBACzCK,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEkF,IAAI,CAAC;oBACzBnF,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEN,YAAY,CAACwC,QAAQ,CAACgD,IAAI,CAAC,CAAC;oBACvEnF,OAAO,CAACC,GAAG,CAAC,GAAG,EAAEiD,CAAC,CAAC;oBACnBlD,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEiD,CAAC,GAAG,CAAC,CAAC;oBAIzBgC,aAAa,CAAC9B,IAAI,CAACF,CAAC,GAAG,CAAC,CAAC;kBAC3B;gBACF;cACF;cACF,IAAItD,aAAa,IAAIkE,cAAc,EAAE;gBACnC9D,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE6D,cAAc,CAAC;gBAC7C9D,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEgE,QAAQ,CAAC;gBACjCjE,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEgE,QAAQ,CAACM,MAAM,CAACd,KAAK,CAAC,CAAC,EAAEQ,QAAQ,CAACM,MAAM,CAACpB,MAAM,GAAG,CAAC,CAAC,CAAC;gBACvHnD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEiF,aAAa,CAAC;gBAC3ClF,OAAO,CAACC,GAAG,CAAC,mDAAmD,EAAEmF,kBAAkB,CAACC,IAAI,CAACC,SAAS,CAACJ,aAAa,CAAC,CAAE,CAAC;gBAKpHzG,aAAa,CAAC4B,MAAM,EAAEyD,cAAc,EAAEG,QAAQ,CAACM,MAAM,CAACd,KAAK,CAAC,CAAC,EAAEQ,QAAQ,CAACM,MAAM,CAACpB,MAAM,GAAG,CAAC,CAAC,EAAEiC,kBAAkB,CAACC,IAAI,CAACC,SAAS,CAACJ,aAAa,CAAC,CAAC,EAAE,IAAI,EAAEZ,UAAU,CAAC;cAClK;YACF,CAAC,MAAM,IAAIT,MAAM,KAAK,WAAW,EAAE;cACjCe,SAAS,CAACE,GAAG,CAAC,GAAG;gBAAEC,UAAU,EAAE,aAAa;gBAAEC,SAAS,EAAE;cAAmB,CAAC;cAC7E,IAAIlB,cAAc,EAChBpF,cAAc,CAAC2B,MAAM,EAAEyD,cAAc,EAAE,IAAI,EAAEQ,UAAU,CAAC;YAC5D;UACF;QACF;MACF,CAAC,MAAM;QACL,KAAK,IAAIvC,GAAG,GAAGyC,UAAU,EAAEzC,GAAG,GAAGyC,UAAU,GAAGF,UAAU,EAAEvC,GAAG,EAAE,EAAE;UAC/D,IAAIA,GAAG,IAAIvB,SAAS,EAAE;UACtB,MAAMsE,GAAG,GAAG,GAAG/C,GAAG,IAAIG,QAAQ,EAAE;UAChClC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEQ,IAAI,CAACsB,GAAG,CAAC,CAACG,QAAQ,CAAC,CAAC;UACvDlC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEiC,QAAQ,CAAC;UACjClC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAE8B,GAAG,CAAC;UACvB;UACA,IAAI,CAACtB,IAAI,CAACsB,GAAG,CAAC,CAACG,QAAQ,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAC3C,IAAI0B,MAAM,KAAK,MAAM,EAAE;cACrBe,SAAS,CAACE,GAAG,CAAC,GAAG;gBAAEC,UAAU,EAAE,eAAe;gBAAEC,SAAS,EAAE;cAAmB,CAAC;cAC/E,IAAIlB,cAAc,EAAE;gBAClBtF,cAAc,CAAC6B,MAAM,EAAEyD,cAAc,EAAE,KAAK,EAAEQ,UAAU,CAAC;gBACzDG,kBAAkB,CAAClE,QAAQ,EAAEuD,cAAc,CAACmB,QAAQ,CAAC,CAAC,EAAE,GAAG,EAAE5E,MAAM,CAAC;cACtE;YACF,CAAC,MAAM,IAAIwD,MAAM,KAAK,SAAS,EAAE;cAC/Be,SAAS,CAACE,GAAG,CAAC,GAAG;gBAAEC,UAAU,EAAE,eAAe;gBAAEC,SAAS,EAAE;cAAa,CAAC;cACzE,IAAIE,aAAa,GAAG,EAAE;cACtB,IAAItF,aAAa,EACf,KAAK,IAAIsD,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIoB,UAAU,GAAG,CAAC,EAAEpB,CAAC,EAAE,EAAE;gBACxC,MAAMiC,IAAI,GAAGlB,QAAQ,CAACkB,IAAI,CAACjC,CAAC,CAAC;gBAE7B,IAAIvD,YAAY,EAAE;kBAChB,IAAIA,YAAY,CAACwC,QAAQ,CAACgD,IAAI,CAAC,EAAE;oBAC/BnF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,YAAY,CAAC;oBACzCK,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEkF,IAAI,CAAC;oBACzBnF,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEN,YAAY,CAACwC,QAAQ,CAACgD,IAAI,CAAC,CAAC;oBACvEnF,OAAO,CAACC,GAAG,CAAC,GAAG,EAAEiD,CAAC,CAAC;oBACnBlD,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEiD,CAAC,GAAG,CAAC,CAAC;oBAEzBgC,aAAa,CAAC9B,IAAI,CAACF,CAAC,GAAG,CAAC,CAAC;kBAC3B;gBACF;cACF;cACF,IAAItD,aAAa,IAAIkE,cAAc,EACjCrF,aAAa,CAAC4B,MAAM,EAAEyD,cAAc,EAAEG,QAAQ,CAACM,MAAM,CAACd,KAAK,CAAC,CAAC,EAAEQ,QAAQ,CAACM,MAAM,CAACpB,MAAM,GAAG,CAAC,CAAC,EAAEiC,kBAAkB,CAACC,IAAI,CAACC,SAAS,CAACJ,aAAa,CAAC,CAAC,EAAE,KAAK,EAAEZ,UAAU,CAAC;YACrK,CAAC,MAAM,IAAIT,MAAM,KAAK,WAAW,EAAE;cACjCe,SAAS,CAACE,GAAG,CAAC,GAAG;gBAAEC,UAAU,EAAE,aAAa;gBAAEC,SAAS,EAAE;cAAmB,CAAC;cAC7E,IAAIlB,cAAc,EAChBpF,cAAc,CAAC2B,MAAM,EAAEyD,cAAc,EAAE,KAAK,EAAEQ,UAAU,CAAC;YAC7D;UACF;QACF;MACF;MACA,OAAOM,SAAS;IAClB,CAAC,CAAC;;IAEF;IACA;IACA;EACF,CAAC;EAGD,MAAMW,oBAAoB,GAAGA,CAC3BvD,QAAgB,EAChBE,QAAgB,EAChB2B,MAAwC,EACxC2B,iBAAyB,EACzBC,oBAA8B,EAC9BrB,KAAe,EACfE,UAAmB,EACnBoB,aAAsB,CAAE;EAAA,KACrB;IACH,IAAI5F,MAAM,EAAE,OAAO,CAAC;;IAEpB;IACA,MAAMqD,MAAM,GAAGU,MAAM,KAAK,SAAS,GAAG,CAAA6B,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEvC,MAAM,KAAI,CAAC,GAAGmB,UAAU,IAAI,CAAC;IAElF,IAAInB,MAAM,KAAK,CAAC,EAAE;MAChBnD,OAAO,CAAC2F,IAAI,CAAC,gCAAgCH,iBAAiB,EAAE,CAAC;MACjE;IACF;IAEAxE,aAAa,CAAE2D,IAAI,IAAK;MACtB,MAAMC,SAAS,GAAG;QAAE,GAAGD;MAAK,CAAC;MAC7B,IAAIP,KAAK,EAAE;QACT;QACA,KAAK,IAAIS,GAAG,GAAG3C,QAAQ,GAAG,CAAC,EAAE2C,GAAG,IAAI3C,QAAQ,GAAGiB,MAAM,EAAE0B,GAAG,EAAE,EAAE;UAAA,IAAAe,kBAAA;UAC5D,MAAMd,GAAG,GAAG,GAAG9C,QAAQ,IAAI6C,GAAG,EAAE;UAChC7E,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEwF,oBAAoB,CAAC;UACzDzF,OAAO,CAACC,GAAG,CAAC,KAAK,EAAE4E,GAAG,CAAC;UACvB7E,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE4E,GAAG,GAAG3C,QAAQ,GAAG,CAAC,CAAC;UAE/ClC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEwF,oBAAoB,CAACtD,QAAQ,CAAC0C,GAAG,GAAG3C,QAAQ,CAAC,CAAC;;UAIhG;UACA,IAAIzB,IAAI,CAACuB,QAAQ,CAAC,CAAC6C,GAAG,CAAC,KAAK,EAAE,IAAI,GAAAe,kBAAA,GAACnF,IAAI,CAACuB,QAAQ,CAAC,CAAC6C,GAAG,CAAC,cAAAe,kBAAA,eAAnBA,kBAAA,CAAqBzD,QAAQ,CAAC,QAAQ,CAAC,GAAE;YAC1E,IAAI0B,MAAM,KAAK,MAAM,EAAE;cACrBe,SAAS,CAACE,GAAG,CAAC,GAAG;gBAAEC,UAAU,EAAE,eAAe;gBAAEC,SAAS,EAAE;cAAmB,CAAC;YACjF,CAAC,MAAM,IAAInB,MAAM,KAAK,WAAW,EAAE;cACjCe,SAAS,CAACE,GAAG,CAAC,GAAG;gBAAEC,UAAU,EAAE,aAAa;gBAAEC,SAAS,EAAE;cAAmB,CAAC;YAC/E,CAAC,MAAM,IAAInB,MAAM,KAAK,SAAS,EAAE;cAC/Be,SAAS,CAACE,GAAG,CAAC,GAAG;gBACfC,UAAU,EAAE,eAAe;gBAC3BC,SAAS,EAAES,oBAAoB,CAACtD,QAAQ,CAAC0C,GAAG,GAAG3C,QAAQ,GAAG,CAAC,CAAC,GAAG,cAAc,GAAG;cAClF,CAAC;YACH;UACF;QACF;MACF,CAAC,MAAM;QACL;QACA,KAAK,IAAIH,GAAG,GAAGC,QAAQ,GAAG,CAAC,EAAED,GAAG,IAAIC,QAAQ,GAAGmB,MAAM,EAAEpB,GAAG,EAAE,EAAE;UAAA,IAAA8D,kBAAA;UAC5D,MAAMf,GAAG,GAAG,GAAG/C,GAAG,IAAIG,QAAQ,EAAE;UAChClC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEwF,oBAAoB,CAAC;UACzDzF,OAAO,CAACC,GAAG,CAAC,KAAK,EAAE8B,GAAG,CAAC;UACvB/B,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE8B,GAAG,GAAGC,QAAQ,GAAG,CAAC,CAAC;UAC/ChC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEwF,oBAAoB,CAACtD,QAAQ,CAACJ,GAAG,GAAGC,QAAQ,CAAC,CAAC;UAChG;UACA,IAAIvB,IAAI,CAACsB,GAAG,CAAC,CAACG,QAAQ,CAAC,KAAK,EAAE,IAAI,GAAA2D,kBAAA,GAACpF,IAAI,CAACsB,GAAG,CAAC,CAACG,QAAQ,CAAC,cAAA2D,kBAAA,eAAnBA,kBAAA,CAAqB1D,QAAQ,CAAC,QAAQ,CAAC,GAAE;YAC1E,IAAI0B,MAAM,KAAK,MAAM,EAAE;cACrBe,SAAS,CAACE,GAAG,CAAC,GAAG;gBAAEC,UAAU,EAAE,eAAe;gBAAEC,SAAS,EAAE;cAAmB,CAAC;YACjF,CAAC,MAAM,IAAInB,MAAM,KAAK,WAAW,EAAE;cACjCe,SAAS,CAACE,GAAG,CAAC,GAAG;gBAAEC,UAAU,EAAE,aAAa;gBAAEC,SAAS,EAAE;cAAmB,CAAC;YAC/E,CAAC,MAAM,IAAInB,MAAM,KAAK,SAAS,EAAE;cAC/Be,SAAS,CAACE,GAAG,CAAC,GAAG;gBACfC,UAAU,EAAE,eAAe;gBAC3BC,SAAS,EAAES,oBAAoB,CAACtD,QAAQ,CAACJ,GAAG,GAAGC,QAAQ,GAAG,CAAC,CAAC,GAAG,cAAc,GAAG;cAClF,CAAC;YACH;UACF;QACF;MACF;MACA,OAAO4C,SAAS;IAClB,CAAC,CAAC;;IAEF;IACA,IAAIf,MAAM,KAAK,SAAS,IAAI6B,aAAa,EAAE;MACzChF,OAAO,CAAEoF,QAAQ,IAAK;QACpB,MAAMC,OAAO,GAAGD,QAAQ,CAAChE,GAAG,CAAEC,GAAG,IAAK,CAAC,GAAGA,GAAG,CAAC,CAAC;QAC/C,IAAIqC,KAAK,EAAE;UACT,KAAK,IAAIS,GAAG,GAAG3C,QAAQ,GAAG,CAAC,EAAEgB,CAAC,GAAG,CAAC,EAAE2B,GAAG,IAAI3C,QAAQ,GAAGiB,MAAM,IAAID,CAAC,GAAGwC,aAAa,CAACvC,MAAM,EAAE0B,GAAG,EAAE,EAAE3B,CAAC,EAAE,EAAE;YACpG6C,OAAO,CAAC/D,QAAQ,CAAC,CAAC6C,GAAG,CAAC,GAAGa,aAAa,CAACxC,CAAC,CAAC;UAC3C;QACF,CAAC,MAAM;UACL,KAAK,IAAInB,GAAG,GAAGC,QAAQ,GAAG,CAAC,EAAEkB,CAAC,GAAG,CAAC,EAAEnB,GAAG,IAAIC,QAAQ,GAAGmB,MAAM,IAAID,CAAC,GAAGwC,aAAa,CAACvC,MAAM,EAAEpB,GAAG,EAAE,EAAEmB,CAAC,EAAE,EAAE;YACpG6C,OAAO,CAAChE,GAAG,CAAC,CAACG,QAAQ,CAAC,GAAGwD,aAAa,CAACxC,CAAC,CAAC;UAC3C;QACF;QACA,OAAO6C,OAAO;MAChB,CAAC,CAAC;IACJ;EACF,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAIA1H,SAAS,CAAC,MAAM;IACd,MAAM+D,kBAAkB,GAAGpD,gBAAgB,CAACqB,MAAM,EAAG2F,QAAQ,IAAK;MAChE;MACA;MACA,MAAMC,gBAAgB,GAAG;QACvB,UAAU,EAAED;MACd,CAAC;MAEDlF,kBAAkB,CAACmF,gBAAgB,CAAC;MACpC,KAAK,IAAIlE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGtB,IAAI,CAAC0C,MAAM,EAAEpB,GAAG,EAAE,EAAE;QAC1C,KAAK,IAAI8C,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGpE,IAAI,CAACsB,GAAG,CAAC,CAACoB,MAAM,EAAE0B,GAAG,EAAE,EAAE;UAC/C,IAAIpE,IAAI,CAACsB,GAAG,CAAC,CAAC8C,GAAG,CAAC,CAAC1C,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACrCoD,oBAAoB,CAACxD,GAAG,EAAE8C,GAAG,EAAE,SAAS,EAAEpE,IAAI,CAACsB,GAAG,CAAC,CAAC8C,GAAG,CAAC,CAACqB,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;UACrF;QACF;MACF;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACX9D,kBAAkB,CAAC,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN/D,SAAS,CAAC,MAAM;IACd,MAAM+D,kBAAkB,GAAGrD,iBAAiB,CAACsB,MAAM,EAAG8F,QAAQ,IAAK;MACjErF,kBAAkB,CAACqF,QAAQ,CAAC;MAC5BnG,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEkG,QAAQ,CAAC;IAE3C,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACX/D,kBAAkB,CAAC,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN;EACA/D,SAAS,CAAC,MAAM;IACd,IAAI+H,aAAa,GAAG,IAAI;IACxB,MAAMC,iBAAiB,GAAGvH,iBAAiB,CAACuB,MAAM,EAAGiG,IAAI,IAAK;MAE5D,IAAIF,aAAa,EAAE;QACjBA,aAAa,GAAG,KAAK;QACrB,OAAO,CAAC;MACV;MAGA,IAAIpE,QAAQ,GAAG,CAAC,CAAC;MACjB,IAAIE,QAAQ,GAAG,CAAC,CAAC;MACjB,KAAK,IAAIH,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGtB,IAAI,CAAC0C,MAAM,EAAEpB,GAAG,EAAE,EAAE;QAC1C,KAAK,IAAI8C,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGpE,IAAI,CAACsB,GAAG,CAAC,CAACoB,MAAM,EAAE0B,GAAG,EAAE,EAAE;UAC/C,IAAIpE,IAAI,CAACsB,GAAG,CAAC,CAAC8C,GAAG,CAAC,KAAK,SAASyB,IAAI,CAACC,mBAAmB,EAAE,EAAE;YAC1DvE,QAAQ,GAAGD,GAAG;YACdG,QAAQ,GAAG2C,GAAG;YACd;UACF;QACF;QACA,IAAI7C,QAAQ,KAAK,CAAC,CAAC,EAAE;MACvB;MAEA,IAAIA,QAAQ,KAAK,CAAC,CAAC,IAAIE,QAAQ,KAAK,CAAC,CAAC,EAAE;QACtClC,OAAO,CAAC2F,IAAI,CAAC,qBAAqBW,IAAI,CAACC,mBAAmB,YAAY,CAAC;QACvE;MACF;MAEAhB,oBAAoB,CAACvD,QAAQ,EAAEE,QAAQ,EAAE,MAAM,EAAEoE,IAAI,CAACC,mBAAmB,EAAE,EAAE,EAAED,IAAI,CAACE,MAAM,EAAEF,IAAI,CAACG,WAAW,CAAC;IAC/G,CAAC,CAAC;IAEF,OAAO,MAAM;MACXJ,iBAAiB,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,CAAChG,MAAM,EAAEI,IAAI,CAAC,CAAC;;EAElB;EACApC,SAAS,CAAC,MAAM;IACd,IAAI+H,aAAa,GAAG,IAAI;IACxB,MAAMM,oBAAoB,GAAG7H,oBAAoB,CAACwB,MAAM,EAAGiG,IAAI,IAAK;MAClE,IAAIF,aAAa,EAAE;QACjBA,aAAa,GAAG,KAAK;QACrB,OAAO,CAAC;MACV;MAEA,IAAIpE,QAAQ,GAAG,CAAC,CAAC;MACjB,IAAIE,QAAQ,GAAG,CAAC,CAAC;MACjB,KAAK,IAAIH,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGtB,IAAI,CAAC0C,MAAM,EAAEpB,GAAG,EAAE,EAAE;QAC1C,KAAK,IAAI8C,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGpE,IAAI,CAACsB,GAAG,CAAC,CAACoB,MAAM,EAAE0B,GAAG,EAAE,EAAE;UAC/C,IAAIpE,IAAI,CAACsB,GAAG,CAAC,CAAC8C,GAAG,CAAC,KAAK,SAASyB,IAAI,CAACC,mBAAmB,EAAE,EAAE;YAC1DvE,QAAQ,GAAGD,GAAG;YACdG,QAAQ,GAAG2C,GAAG;YACd;UACF;QACF;QACA,IAAI7C,QAAQ,KAAK,CAAC,CAAC,EAAE;MACvB;MAEA,IAAIA,QAAQ,KAAK,CAAC,CAAC,IAAIE,QAAQ,KAAK,CAAC,CAAC,EAAE;QACtClC,OAAO,CAAC2F,IAAI,CAAC,qBAAqBW,IAAI,CAACC,mBAAmB,YAAY,CAAC;QACvE;MACF;MAEAhB,oBAAoB,CAACvD,QAAQ,EAAEE,QAAQ,EAAE,WAAW,EAAEoE,IAAI,CAACC,mBAAmB,EAAE,EAAE,EAAED,IAAI,CAACE,MAAM,EAAEF,IAAI,CAACG,WAAW,CAAC;IACpH,CAAC,CAAC;IAEF,OAAO,MAAM;MACXC,oBAAoB,CAAC,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,CAACrG,MAAM,EAAEI,IAAI,CAAC,CAAC;;EAElB;EACApC,SAAS,CAAC,MAAM;IACd,IAAI+H,aAAa,GAAG,IAAI;IACxB,MAAMO,kBAAkB,GAAG/H,kBAAkB,CAC3CyB,MAAM,EACLiG,IAAI,IAAK;MACRtG,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEmG,aAAa,CAAC;MAE3C,IAAIA,aAAa,EAAE;QACjBA,aAAa,GAAG,KAAK;QACrB,OAAO,CAAC;MACV;MAEApG,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEmG,aAAa,CAAC;MACjD,IAAIpE,QAAQ,GAAG,CAAC,CAAC;MACjB,IAAIE,QAAQ,GAAG,CAAC,CAAC;MACjBlC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEQ,IAAI,CAAC;MAEzB,KAAK,IAAIsB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGtB,IAAI,CAAC0C,MAAM,EAAEpB,GAAG,EAAE,EAAE;QAC1C,KAAK,IAAI8C,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGpE,IAAI,CAACsB,GAAG,CAAC,CAACoB,MAAM,EAAE0B,GAAG,EAAE,EAAE;UAC/C,IAAIpE,IAAI,CAACsB,GAAG,CAAC,CAAC8C,GAAG,CAAC,KAAK,SAASyB,IAAI,CAACC,mBAAmB,EAAE,EAAE;YAC1DvE,QAAQ,GAAGD,GAAG;YACdG,QAAQ,GAAG2C,GAAG;YACd;UACF;QACF;QACA,IAAI7C,QAAQ,KAAK,CAAC,CAAC,EAAE;MACvB;MAEA,IAAIA,QAAQ,KAAK,CAAC,CAAC,IAAIE,QAAQ,KAAK,CAAC,CAAC,EAAE;QACtClC,OAAO,CAAC2F,IAAI,CAAC,qBAAqBW,IAAI,CAACC,mBAAmB,YAAY,CAAC;QACvE;MACF;MAEAhB,oBAAoB,CAACvD,QAAQ,EAAEE,QAAQ,EAAE,SAAS,EAAEoE,IAAI,CAACC,mBAAmB,EAAED,IAAI,CAACM,sBAAsB,EAAEN,IAAI,CAACE,MAAM,EAAEK,SAAS,EAAEP,IAAI,CAACQ,cAAc,CAAC;IACzJ,CACF,CAAC;IAED,OAAO,MAAM;MACXH,kBAAkB,CAAC,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,CAACtG,MAAM,EAAEI,IAAI,CAAC,CAAC;;EAGlB;;EAGA;EACA,MAAMsG,iBAAiB,GAAGA,CAAC/E,QAAgB,EAAEE,QAAgB,KAAK;IAChE,IAAI,CAACpC,MAAM,EAAE;IACboB,OAAO,CAAC;MACNC,OAAO,EAAE,IAAI;MACba,QAAQ;MACRE;IACF,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAM8E,gBAAgB,GAAGA,CACvBnD,MAAwC,EACxC7B,QAAgB,EAChBE,QAAgB,EAChB4B,cAAsB,KACnB;IACHF,WAAW,CAAC5B,QAAQ,EAAEE,QAAQ,EAAE2B,MAAM,EAAEC,cAAc,CAAC;IACvD5C,OAAO,CAAC;MAAEC,OAAO,EAAE;IAAM,CAAC,CAAC;EAC7B,CAAC;;EAED;EACA,MAAM8F,eAAe,GAAGA,CAACjF,QAAgB,EAAEE,QAAgB,KAAK;IAC9D,IAAI,CAACpC,MAAM,EAAE;IACb8D,WAAW,CAAC5B,QAAQ,EAAEE,QAAQ,EAAE,MAAM,CAAC;EACzC,CAAC;EAED,MAAMgF,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI,CAACpH,MAAM,IAAI,CAACa,SAAS,IAAI,CAACf,aAAa,EAAE;IAE7C,KAAK,IAAImC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGtB,IAAI,CAAC0C,MAAM,EAAEpB,GAAG,EAAE,EAAE;MAC1C,KAAK,IAAI8C,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGpE,IAAI,CAACsB,GAAG,CAAC,CAACoB,MAAM,EAAE0B,GAAG,EAAE,EAAE;QAC/C,IAAIsC,MAAM,CAACC,QAAQ,CAACD,MAAM,CAAC1G,IAAI,CAACsB,GAAG,CAAC,CAAC8C,GAAG,CAAC,CAAC,CAAC,EAAE;UAC3CjB,WAAW,CAAC7B,GAAG,EAAE8C,GAAG,EAAE,SAAS,EAAEpE,IAAI,CAACsB,GAAG,CAAC,CAAC8C,GAAG,CAAC,CAAC;QAClD;MACF;IACF;IACA,IAAIlF,YAAY,EAAE;MAEhB,MAAMR,YAAY,CAACkB,MAAM,EAAEV,YAAY,CAAC;IAC1C;EACF,CAAC;;EAED;EACAtB,SAAS,CAAC,MAAM;IACd,MAAMgJ,kBAAkB,GAAIC,KAAiB,IAAK;MAChD,IAAI3D,OAAO,CAAC4D,OAAO,IAAI,CAAC5D,OAAO,CAAC4D,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAc,CAAC,EAAE;QACtEvG,OAAO,CAAC;UAAEC,OAAO,EAAE;QAAM,CAAC,CAAC;MAC7B;IACF,CAAC;IACDuG,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEN,kBAAkB,CAAC;IAC1D,OAAO,MAAMK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEP,kBAAkB,CAAC;EAC5E,CAAC,EAAE,EAAE,CAAC;EAGN,oBACE7H,OAAA;IAAKqI,SAAS,EAAC,uEAAuE;IAAAC,QAAA,gBACpFtI,OAAA;MAAKqI,SAAS,EAAC,kEAAkE;MAAAC,QAAA,EAC9E,QAAOjH,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEsF,QAAQ,MAAK,QAAQ,GAC1CtF,eAAe,CAACsF,QAAQ,GACxB;IAAE;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACN1I,OAAA;MAAKqI,SAAS,EAAC,oGAAoG;MAAAC,QAAA,EAG/G,CAACrH,IAAI,IAAI,CAAC0H,KAAK,CAACC,OAAO,CAAC3H,IAAI,CAAC,IAAI,CAACA,IAAI,CAAC4H,KAAK,CAACtG,GAAG,IAAIoG,KAAK,CAACC,OAAO,CAACrG,GAAG,CAAC,CAAC,gBACvEvC,OAAA;QAAAsI,QAAA,EAAK;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,GAE5BzH,IAAI,CAACqB,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,kBACrBxC,OAAA,CAACrB,KAAK,CAACmK,QAAQ;QAAAR,QAAA,EACZ/F,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,QAAQ,KAAK;UAE3B,MAAMqG,OAAO,GAAG,GAAGvG,QAAQ,IAAIE,QAAQ,EAAE;UACzC,MAAMsG,SAAS,GAAGzH,UAAU,CAACwH,OAAO,CAAC,IAAI;YACvCxD,UAAU,EAAE9C,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAK,GAAG,GAAG,UAAU,GAAG,YAAY;YACnE+C,SAAS,EAAE/C,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAC,GAAG,eAAe,GAAG;UACzD,CAAC;UAED,MAAMsG,QAAQ,GACZxH,IAAI,CAACE,OAAO,IACZF,IAAI,CAACe,QAAQ,KAAKA,QAAQ,IAC1Bf,IAAI,CAACiB,QAAQ,KAAKA,QAAQ,IAC1BD,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAC;UAEzB,oBACE3C,OAAA;YAAKqI,SAAS,EAAC,4BAA4B;YAAAC,QAAA,gBACzCtI,OAAA;cACEqI,SAAS,EAAE;AACjC,wBAAwB5F,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAC,GAAG,2BAA2B,GAAG,EAAE;AAClF,wBAAwBF,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAGqG,SAAS,CAACzD,UAAU;AAC3E,wBAAwB9C,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAC,GAAG,eAAe,GAAGqG,SAAS,CAACxD,SAAS;AACvF,wBAAwBrF,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAEwC,QAAQ,CAACF,IAAI,CAAC,IAC1BuG,SAAS,CAACxD,SAAS,KAAK,YAAY,IACpC,CAAC/C,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAC,IACxBuG,KAAK,CAACvB,MAAM,CAAClF,IAAI,CAAC,CAAC,GACjB,wBAAwB,GACxB,EAAE;AAC9B,qBAAsB;cACA0G,OAAO,EAAEA,CAAA,KAAM;gBACb,IAAI7I,MAAM,EAAE;kBACV,IAAImC,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAC,EAAE;oBAC3B4E,iBAAiB,CAAC/E,QAAQ,EAAEE,QAAQ,CAAC;kBACvC,CAAC,MAAM;oBACL+E,eAAe,CAACjF,QAAQ,EAAEE,QAAQ,CAAC;kBACrC;gBACF;cACF,CAAE;cACF0G,KAAK,EAAE;gBACLC,MAAM,EACJ/I,MAAM,KACHmC,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAC,IACtBxB,SAAS,CAACmI,IAAI,CAAE9F,IAAI,IAAKA,IAAI,CAAC+F,CAAC,KAAK/G,QAAQ,IAAIgB,IAAI,CAACgG,CAAC,KAAK9G,QAAQ,CAAC,CAAC,GACrE,SAAS,GACT;cACR,CAAE;cAAA4F,QAAA,EAGD,OAAO7F,IAAI,KAAK,QAAQ,IAAI,OAAOA,IAAI,KAAK,QAAQ,GAChDA,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAC,GAAGF,IAAI,CAACiE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAGjE,IAAI,GAC5D;YAAE;cAAA8F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,EAGLO,QAAQ,iBACPjJ,OAAA;cACEyJ,GAAG,EAAEtF,OAAQ;cACbkE,SAAS,EAAC,+HAA+H;cAAAC,QAAA,gBAEzItI,OAAA;gBACEqI,SAAS,EAAC,oEAAoE;gBAC9Ec,OAAO,EAAEA,CAAA,KACP3B,gBAAgB,CAAC,MAAM,EAAEhF,QAAQ,EAAEE,QAAQ,EAAED,IAAI,CAACiE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CACxE;gBAAA4B,QAAA,EACF;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACT1I,OAAA;gBACEqI,SAAS,EAAC,sEAAsE;gBAChFc,OAAO,EAAEA,CAAA,KACP3B,gBAAgB,CAAC,SAAS,EAAEhF,QAAQ,EAAEE,QAAQ,EAAED,IAAI,CAACiE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAC3E;gBAAA4B,QAAA,EACF;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACT1I,OAAA;gBACEqI,SAAS,EAAC,kEAAkE;gBAC5Ec,OAAO,EAAEA,CAAA,KACP3B,gBAAgB,CAAC,WAAW,EAAEhF,QAAQ,EAAEE,QAAQ,EAAED,IAAI,CAACiE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAC7E;gBAAA4B,QAAA,EACF;cAED;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CACN;UAAA,GApE8ChG,QAAQ;YAAA6F,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqEpD,CAAC;QAEV,CAAC;MAAC,GAvFiBlG,QAAQ;QAAA+F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAwFb,CACjB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAEN1I,OAAA,CAACH,iBAAiB;MACRS,MAAM,EAAEA,MAAO;MACfqG,QAAQ,EAAEtF;IAAgB;MAAAkH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,EAENpI,MAAM,iBACJN,OAAA;MAAKqI,SAAS,EAAC,YAAY;MAAAC,QAAA,GAAC,GAAC,eAC3BtI,OAAA;QACEmJ,OAAO,EAAEA,CAAA,KAAM;UACbO,KAAK,CAAC,SAAS,CAAC;UAChBhC,kBAAkB,CAAC,CAAC;QACtB,CAAE;QACFW,SAAS,EAAC,iEAAiE;QAAAC,QAAA,EAC5E;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT1I,OAAA;QACEmJ,OAAO,EAAEA,CAAA,KAAM;UACbjH,gBAAgB,CAAC,CAAC;QACpB,CAAE;QACFmG,SAAS,EAAC,iEAAiE;QAAAC,QAAA,EAC5E;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGA,CAAC;AAEV,CAAC;AAACnI,EAAA,CAhuBIL,iBAAqD;EAAA,QAO1CJ,SAAS,EACDL,eAAe,EACXV,SAAS;AAAA;AAAA4K,EAAA,GAThCzJ,iBAAqD;AAkuB3D,eAAeA,iBAAiB;AAAC,IAAAyJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}