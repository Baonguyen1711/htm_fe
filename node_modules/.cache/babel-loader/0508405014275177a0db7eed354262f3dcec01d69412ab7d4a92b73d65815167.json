{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { renderGrid } from \"./utils\";\nimport { usePlayer } from \"../../context/playerContext\";\nimport { setSelectedRow } from \"../../components/services\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mainKeyword = \"BÒCÔNGANH\";\nconst QuestionBoxRound2 = ({\n  obstacleWord = mainKeyword,\n  hintWordArray,\n  initialGrid,\n  isHost = false\n}) => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const {\n    setInitialGrid\n  } = usePlayer();\n  const roomId = searchParams.get(\"roomId\") || \"\";\n  const GRID_SIZE = 20;\n  const generateEmptyGrid = () => {\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n  };\n  const [grid, setGrid] = useState(generateEmptyGrid());\n  const [revealedRows, setRevealedRows] = useState(Array(GRID_SIZE).fill(false));\n  const [revealedCols, setRevealedCols] = useState(Array(GRID_SIZE).fill(false));\n  const [hintWords, setHintWords] = useState([]);\n  const [cellStyles, setCellStyles] = useState({});\n  const [menu, setMenu] = useState({\n    visible: false\n  });\n  const menuRef = useRef(null);\n  useEffect(() => {\n    if (isHost) {\n      if (hintWordArray && obstacleWord) {\n        const {\n          randomHintWords,\n          newGrid\n        } = renderGrid(hintWordArray, obstacleWord, GRID_SIZE);\n        setHintWords(randomHintWords);\n        setInitialGrid(newGrid);\n        setGrid(newGrid);\n      }\n    } else {\n      if (initialGrid) {\n        setGrid(initialGrid);\n      }\n    }\n  }, [isHost, hintWordArray, obstacleWord, initialGrid, setInitialGrid]);\n  const toggleRow = rowIndex => {\n    if (!isHost) return;\n    setRevealedRows(prev => {\n      const newRevealed = [...prev];\n      newRevealed[rowIndex] = !newRevealed[rowIndex];\n      return newRevealed;\n    });\n    setSelectedRow(roomId, rowIndex.toString());\n  };\n  const toggleCol = colIndex => {\n    if (!isHost) return;\n    setRevealedCols(prev => {\n      const newRevealed = [...prev];\n      newRevealed[colIndex] = !newRevealed[colIndex];\n      return newRevealed;\n    });\n    setSelectedRow(roomId, colIndex.toString());\n  };\n  const handleMenuAction = (action, rowIndex, colIndex) => {\n    const isRow = hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\");\n    if (action === \"open\") {\n      if (isRow) {\n        toggleRow(rowIndex);\n        setCellStyles(prev => {\n          const newStyles = {\n            ...prev\n          };\n          for (let col = 0; col < GRID_SIZE; col++) {\n            newStyles[`${rowIndex}-${col}`] = \"bg-yellow-200\"; // Only change the background color to yellow\n          }\n          return newStyles;\n        });\n      } else {\n        toggleCol(colIndex);\n        setCellStyles(prev => {\n          const newStyles = {\n            ...prev\n          };\n          for (let row = 0; row < GRID_SIZE; row++) {\n            newStyles[`${row}-${colIndex}`] = \"bg-yellow-200\"; // Only change the background color to yellow\n          }\n          return newStyles;\n        });\n      }\n    } else if (action === \"correct\") {\n      if (isRow) {\n        toggleRow(rowIndex);\n        setCellStyles(prev => {\n          const newStyles = {\n            ...prev\n          };\n          for (let col = 0; col < GRID_SIZE; col++) {\n            newStyles[`${rowIndex}-${col}`] = \"bg-green-200\"; // Show the cell with a green background when correct\n          }\n          return newStyles;\n        });\n      } else {\n        toggleCol(colIndex);\n        setCellStyles(prev => {\n          const newStyles = {\n            ...prev\n          };\n          for (let row = 0; row < GRID_SIZE; row++) {\n            newStyles[`${row}-${colIndex}`] = \"bg-green-200\"; // Show the cell with a green background when correct\n          }\n          return newStyles;\n        });\n      }\n    } else if (action === \"incorrect\") {\n      if (isRow) {\n        toggleRow(rowIndex);\n        setCellStyles(prev => {\n          const newStyles = {\n            ...prev\n          };\n          for (let col = 0; col < GRID_SIZE; col++) {\n            newStyles[`${rowIndex}-${col}`] = \"bg-gray-400\"; // Make the cell grey when incorrect\n          }\n          return newStyles;\n        });\n      } else {\n        toggleCol(colIndex);\n        setCellStyles(prev => {\n          const newStyles = {\n            ...prev\n          };\n          for (let row = 0; row < GRID_SIZE; row++) {\n            newStyles[`${row}-${colIndex}`] = \"bg-gray-400\"; // Make the cell grey when incorrect\n          }\n          return newStyles;\n        });\n      }\n    }\n    setMenu({\n      visible: false\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\",\n      children: \"Trong c\\xE1c gi\\u1EA3i \\u0111\\u1EA5u th\\u1EC3 thao, nh\\u1EEFng \\u0111\\u1ED9i hay v\\u1EADn \\u0111\\u1ED9ng vi\\xEAn m\\u1EA1nh s\\u1EBD \\u0111\\u01B0\\u1EE3c x\\u1EBFp v\\xE0o c\\xF9ng m\\u1ED9t ho\\u1EB7c nhi\\u1EC1u nh\\xF3m trong khi b\\u1ED1c th\\u0103m \\u0111\\u1EC3 tr\\xE1nh vi\\u1EC7c g\\u1EB7p nhau s\\u1EDBm. T\\xEAn g\\u1ECDi chung c\\u1EE7a c\\xE1c nh\\xF3m v\\u1EADn \\u0111\\u1ED9ng vi\\xEAn n\\xE0y l\\xE0 g\\xEC?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[repeat(21,40px)] gap-1 max-h-[400px] overflow-y-scroll\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col items-center justify-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm font-semibold text-gray-700\",\n            children: rowIndex + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this), isHost && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-1 mt-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-xs px-1 py-0.5 bg-yellow-300 rounded hover:bg-yellow-400\",\n              onClick: () => handleMenuAction(\"open\", rowIndex, 0),\n              children: \"Open\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-xs px-1 py-0.5 bg-green-300 rounded hover:bg-green-400\",\n              onClick: () => handleMenuAction(\"correct\", rowIndex, 0),\n              children: \"\\u2713\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"text-xs px-1 py-0.5 bg-red-300 rounded hover:bg-red-400\",\n              onClick: () => handleMenuAction(\"incorrect\", rowIndex, 0),\n              children: \"\\u2715\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), row.map((cell, colIndex) => {\n          const isRevealed = revealedRows[rowIndex] && hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\") || revealedCols[colIndex] && hintWords.some(word => word.x === colIndex && word.direction === \"vertical\");\n          const cellKey = `${rowIndex}-${colIndex}`;\n          const styleClass = cellStyles[cellKey] || \"\";\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-10 h-10 flex items-center justify-center text-lg font-semibold select-none \n                    ${cell.includes(\"number\") ? \"text-blue-500 bg-white border-none\" : \"\"} \n                    ${cell === \"\" ? \"bg-white border-none\" : \"border border-gray-300\"} \n                    ${styleClass}`,\n            onClick: () => {\n              if (isHost) {\n                if (hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\")) {\n                  toggleRow(rowIndex);\n                } else if (hintWords.some(word => word.x === colIndex && word.direction === \"vertical\")) {\n                  toggleCol(colIndex);\n                }\n              }\n            },\n            style: {\n              cursor: isHost && hintWords.some(word => word.y === rowIndex || word.x === colIndex) ? \"pointer\" : \"default\"\n            },\n            children: cell.includes(\"number\") ? cell.replace(\"number\", \"\").trim() : cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this);\n        })]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionBoxRound2, \"atjsHrVxhnmopHexGGhEkXeWis4=\", false, function () {\n  return [useSearchParams, usePlayer];\n});\n_c = QuestionBoxRound2;\nexport default QuestionBoxRound2;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound2\");","map":{"version":3,"names":["React","useState","useEffect","useRef","renderGrid","usePlayer","setSelectedRow","useSearchParams","jsxDEV","_jsxDEV","mainKeyword","QuestionBoxRound2","obstacleWord","hintWordArray","initialGrid","isHost","_s","searchParams","setInitialGrid","roomId","get","GRID_SIZE","generateEmptyGrid","Array","fill","map","grid","setGrid","revealedRows","setRevealedRows","revealedCols","setRevealedCols","hintWords","setHintWords","cellStyles","setCellStyles","menu","setMenu","visible","menuRef","randomHintWords","newGrid","toggleRow","rowIndex","prev","newRevealed","toString","toggleCol","colIndex","handleMenuAction","action","isRow","some","word","y","direction","newStyles","col","row","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","onClick","cell","isRevealed","x","cellKey","styleClass","includes","style","cursor","replace","trim","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round2.tsx"],"sourcesContent":["import Play from \"../Play\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { renderGrid } from \"./utils\";\r\nimport { RoundBase } from \"../../type\";\r\nimport { useHost } from \"../../context/hostContext\";\r\nimport { usePlayer } from \"../../context/playerContext\";\r\nimport { setSelectedRow } from \"../../components/services\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\n\r\ninterface HintWord {\r\n  word: string;\r\n  x: number;\r\n  y: number;\r\n  direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n  obstacleWord?: string;\r\n  hintWordArray?: string[];\r\n  isHost?: boolean;\r\n  initialGrid?: string[][];\r\n}\r\n\r\nconst mainKeyword = \"BÒCÔNGANH\";\r\n\r\nconst QuestionBoxRound2: React.FC<ObstacleQuestionBoxProps> = ({\r\n  obstacleWord = mainKeyword,\r\n  hintWordArray,\r\n  initialGrid,\r\n  isHost = false,\r\n}) => {\r\n  const [searchParams] = useSearchParams();\r\n  const { setInitialGrid } = usePlayer();\r\n  const roomId = searchParams.get(\"roomId\") || \"\";\r\n  const GRID_SIZE = 20;\r\n\r\n  const generateEmptyGrid = () => {\r\n    return Array(GRID_SIZE)\r\n      .fill(null)\r\n      .map(() => Array(GRID_SIZE).fill(\"\"));\r\n  };\r\n\r\n  const [grid, setGrid] = useState<string[][]>(generateEmptyGrid());\r\n  const [revealedRows, setRevealedRows] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n  const [revealedCols, setRevealedCols] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n  const [hintWords, setHintWords] = useState<HintWord[]>([]);\r\n  const [cellStyles, setCellStyles] = useState<Record<string, string>>({});\r\n  const [menu, setMenu] = useState<{\r\n    visible: boolean;\r\n    rowIndex?: number;\r\n    colIndex?: number;\r\n  }>({ visible: false });\r\n\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (isHost) {\r\n      if (hintWordArray && obstacleWord) {\r\n        const { randomHintWords, newGrid } = renderGrid(hintWordArray, obstacleWord, GRID_SIZE);\r\n        setHintWords(randomHintWords);\r\n        setInitialGrid(newGrid);\r\n        setGrid(newGrid);\r\n      }\r\n    } else {\r\n      if (initialGrid) {\r\n        setGrid(initialGrid);\r\n      }\r\n    }\r\n  }, [isHost, hintWordArray, obstacleWord, initialGrid, setInitialGrid]);\r\n\r\n  const toggleRow = (rowIndex: number) => {\r\n    if (!isHost) return;\r\n    setRevealedRows((prev) => {\r\n      const newRevealed = [...prev];\r\n      newRevealed[rowIndex] = !newRevealed[rowIndex];\r\n      return newRevealed;\r\n    });\r\n    setSelectedRow(roomId, rowIndex.toString());\r\n  };\r\n\r\n  const toggleCol = (colIndex: number) => {\r\n    if (!isHost) return;\r\n    setRevealedCols((prev) => {\r\n      const newRevealed = [...prev];\r\n      newRevealed[colIndex] = !newRevealed[colIndex];\r\n      return newRevealed;\r\n    });\r\n    setSelectedRow(roomId, colIndex.toString());\r\n  };\r\n\r\n  const handleMenuAction = (\r\n    action: \"open\" | \"correct\" | \"incorrect\",\r\n    rowIndex: number,\r\n    colIndex: number\r\n  ) => {\r\n    const isRow = hintWords.some((word) => word.y === rowIndex && word.direction === \"horizontal\");\r\n\r\n    if (action === \"open\") {\r\n      if (isRow) {\r\n        toggleRow(rowIndex);\r\n        setCellStyles((prev) => {\r\n          const newStyles = { ...prev };\r\n          for (let col = 0; col < GRID_SIZE; col++) {\r\n            newStyles[`${rowIndex}-${col}`] = \"bg-yellow-200\"; // Only change the background color to yellow\r\n          }\r\n          return newStyles;\r\n        });\r\n      } else {\r\n        toggleCol(colIndex);\r\n        setCellStyles((prev) => {\r\n          const newStyles = { ...prev };\r\n          for (let row = 0; row < GRID_SIZE; row++) {\r\n            newStyles[`${row}-${colIndex}`] = \"bg-yellow-200\"; // Only change the background color to yellow\r\n          }\r\n          return newStyles;\r\n        });\r\n      }\r\n    } else if (action === \"correct\") {\r\n      if (isRow) {\r\n        toggleRow(rowIndex);\r\n        setCellStyles((prev) => {\r\n          const newStyles = { ...prev };\r\n          for (let col = 0; col < GRID_SIZE; col++) {\r\n            newStyles[`${rowIndex}-${col}`] = \"bg-green-200\"; // Show the cell with a green background when correct\r\n          }\r\n          return newStyles;\r\n        });\r\n      } else {\r\n        toggleCol(colIndex);\r\n        setCellStyles((prev) => {\r\n          const newStyles = { ...prev };\r\n          for (let row = 0; row < GRID_SIZE; row++) {\r\n            newStyles[`${row}-${colIndex}`] = \"bg-green-200\"; // Show the cell with a green background when correct\r\n          }\r\n          return newStyles;\r\n        });\r\n      }\r\n    } else if (action === \"incorrect\") {\r\n      if (isRow) {\r\n        toggleRow(rowIndex);\r\n        setCellStyles((prev) => {\r\n          const newStyles = { ...prev };\r\n          for (let col = 0; col < GRID_SIZE; col++) {\r\n            newStyles[`${rowIndex}-${col}`] = \"bg-gray-400\"; // Make the cell grey when incorrect\r\n          }\r\n          return newStyles;\r\n        });\r\n      } else {\r\n        toggleCol(colIndex);\r\n        setCellStyles((prev) => {\r\n          const newStyles = { ...prev };\r\n          for (let row = 0; row < GRID_SIZE; row++) {\r\n            newStyles[`${row}-${colIndex}`] = \"bg-gray-400\"; // Make the cell grey when incorrect\r\n          }\r\n          return newStyles;\r\n        });\r\n      }\r\n    }\r\n\r\n    setMenu({ visible: false });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6\">\r\n      <div className=\"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\">\r\n        Trong các giải đấu thể thao, những đội hay vận động viên mạnh sẽ được xếp vào cùng một hoặc nhiều nhóm trong khi bốc thăm để tránh việc gặp nhau sớm. Tên gọi chung của các nhóm vận động viên này là gì?\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-[repeat(21,40px)] gap-1 max-h-[400px] overflow-y-scroll\">\r\n        {grid.map((row, rowIndex) => (\r\n          <React.Fragment key={rowIndex}>\r\n            <div className=\"flex flex-col items-center justify-center\">\r\n              <div className=\"text-sm font-semibold text-gray-700\">{rowIndex + 1}</div>\r\n              {isHost && (\r\n                <div className=\"flex gap-1 mt-1\">\r\n                  <button\r\n                    className=\"text-xs px-1 py-0.5 bg-yellow-300 rounded hover:bg-yellow-400\"\r\n                    onClick={() => handleMenuAction(\"open\", rowIndex, 0)}\r\n                  >\r\n                    Open\r\n                  </button>\r\n                  <button\r\n                    className=\"text-xs px-1 py-0.5 bg-green-300 rounded hover:bg-green-400\"\r\n                    onClick={() => handleMenuAction(\"correct\", rowIndex, 0)}\r\n                  >\r\n                    ✓\r\n                  </button>\r\n                  <button\r\n                    className=\"text-xs px-1 py-0.5 bg-red-300 rounded hover:bg-red-400\"\r\n                    onClick={() => handleMenuAction(\"incorrect\", rowIndex, 0)}\r\n                  >\r\n                    ✕\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n            {row.map((cell, colIndex) => {\r\n              const isRevealed =\r\n                (revealedRows[rowIndex] &&\r\n                  hintWords.some(\r\n                    (word) => word.y === rowIndex && word.direction === \"horizontal\"\r\n                  )) ||\r\n                (revealedCols[colIndex] &&\r\n                  hintWords.some(\r\n                    (word) => word.x === colIndex && word.direction === \"vertical\"\r\n                  ));\r\n\r\n              const cellKey = `${rowIndex}-${colIndex}`;\r\n              const styleClass = cellStyles[cellKey] || \"\";\r\n\r\n              return (\r\n                <div\r\n                  key={colIndex}\r\n                  className={`w-10 h-10 flex items-center justify-center text-lg font-semibold select-none \r\n                    ${cell.includes(\"number\") ? \"text-blue-500 bg-white border-none\" : \"\"} \r\n                    ${cell === \"\" ? \"bg-white border-none\" : \"border border-gray-300\"} \r\n                    ${styleClass}`}\r\n                  onClick={() => {\r\n                    if (isHost) {\r\n                      if (\r\n                        hintWords.some(\r\n                          (word) => word.y === rowIndex && word.direction === \"horizontal\"\r\n                        )\r\n                      ) {\r\n                        toggleRow(rowIndex);\r\n                      } else if (\r\n                        hintWords.some(\r\n                          (word) => word.x === colIndex && word.direction === \"vertical\"\r\n                        )\r\n                      ) {\r\n                        toggleCol(colIndex);\r\n                      }\r\n                    }\r\n                  }}\r\n                  style={{\r\n                    cursor:\r\n                      isHost &&\r\n                      hintWords.some((word) => word.y === rowIndex || word.x === colIndex)\r\n                        ? \"pointer\"\r\n                        : \"default\",\r\n                  }}\r\n                >\r\n                  {cell.includes(\"number\") ? cell.replace(\"number\", \"\").trim() : cell}\r\n                </div>\r\n              );\r\n            })}\r\n          </React.Fragment>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionBoxRound2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}