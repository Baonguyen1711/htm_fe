{"ast":null,"code":"import React from \"react\";\n\n// Define word object structure\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CrosswordGrid = ({\n  placedWords,\n  boardSize = 20\n}) => {\n  const GRID_SIZE = 100;\n  const EMPTY_CELL = ' ';\n  function createEmptyGrid(size) {\n    return Array.from({\n      length: size\n    }, () => Array(size).fill(EMPTY_CELL));\n  }\n  const wordArr = ['GIÓ', 'HẠTGIỐNG', 'DREAM', 'THUỐC', 'CÚC', 'CHÂUKIỆTLUÂN'];\n  var board = createEmptyGrid(GRID_SIZE),\n    wordBank = [],\n    wordsActive = [],\n    mode;\n  var isPos = [[]];\n  var classesOfBoard = [[[]]];\n  class WordObj {\n    constructor(str) {\n      this.string = void 0;\n      this.char = void 0;\n      this.totalMatches = 0;\n      this.effectiveMatches = 0;\n      this.successfulMatches = [];\n      this.x = 0;\n      this.y = 0;\n      this.dir = 0;\n      this.string = str;\n      this.char = str.split('');\n    }\n  }\n  const Bounds = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    Update: function (x, y) {\n      this.top = Math.min(y, this.top);\n      this.right = Math.max(x, this.right);\n      this.bottom = Math.max(y, this.bottom);\n      this.left = Math.min(x, this.left);\n    },\n    Clean: function () {\n      this.top = 999;\n      this.right = 0;\n      this.bottom = 0;\n      this.left = 999;\n    }\n  };\n  function CleanVars() {\n    Bounds.Clean();\n    wordBank = [];\n    wordsActive = [];\n    board = [];\n    isPos = [];\n    classesOfBoard = [];\n    for (let i = 0; i < 100; i++) {\n      board.push([]);\n      isPos.push([]);\n      classesOfBoard.push([]);\n      for (let j = 0; j < 100; j++) {\n        board[i].push(null);\n        isPos[i].push(false);\n        classesOfBoard[i].push([]);\n      }\n    }\n  }\n  function PopulateBoard() {\n    PrepareBoard();\n    for (var i = 0, isOk = true, len = wordBank.length; i < len && isOk; i++) {\n      isOk = AddWordToBoard();\n    }\n    return isOk;\n  }\n  function PrepareBoard() {\n    wordBank = [];\n    for (let i = 0; i < wordArr.length; i++) {\n      const actualPos = i + 1;\n      wordBank.push(new WordObj(' ' + actualPos.toString() + wordArr[i] + ' '));\n    }\n    for (let i = 0; i < wordBank.length; i++) {\n      const wA = wordBank[i];\n      for (let j = 0; j < wA.char.length; j++) {\n        const cA = wA.char[j];\n        for (let k = 0; k < wordBank.length; k++) {\n          const wB = wordBank[k];\n          if (i !== k) {\n            for (let l = 0; l < wB.char.length; l++) {\n              wA.totalMatches += cA === wB.char[l] ? 1 : 0;\n            }\n          }\n        }\n      }\n    }\n  }\n  function findWordIdx(givenWord) {\n    givenWord = givenWord.substring(2, givenWord.length - 1);\n    for (let i = 0; i < wordArr.length; i++) {\n      if (givenWord === wordArr[i]) return i + 1;\n    }\n    return undefined;\n  }\n  function AddWordToBoard() {\n    var i,\n      len,\n      curIndex,\n      curWord,\n      curChar,\n      curMatch,\n      testWord,\n      testChar,\n      minMatchDiff = 9999,\n      curMatchDiff;\n    if (wordsActive.length < 1) {\n      curIndex = 0;\n      for (i = 0, len = wordBank.length; i < len; i++) {\n        if (wordBank[i].totalMatches < wordBank[curIndex].totalMatches) {\n          curIndex = i;\n        }\n      }\n      wordBank[curIndex].successfulMatches = [{\n        x: 12,\n        y: 12,\n        dir: 0\n      }];\n    } else {\n      curIndex = -1;\n      for (i = 0, len = wordBank.length; i < len; i++) {\n        curWord = wordBank[i];\n        curWord.effectiveMatches = 0;\n        curWord.successfulMatches = [];\n        for (var j = 0, lenJ = curWord.char.length; j < lenJ; j++) {\n          if (j == 1) continue; // skip pos\n          curChar = curWord.char[j];\n          for (var k = 0, lenK = wordsActive.length; k < lenK; k++) {\n            testWord = wordsActive[k];\n            for (var l = 0, lenL = testWord.char.length; l < lenL; l++) {\n              if (l == 1) continue; // skip pos\n              testChar = testWord.char[l];\n              if (curChar === testChar) {\n                curWord.effectiveMatches++;\n                var curCross = {\n                  x: testWord.x,\n                  y: testWord.y,\n                  dir: 0\n                };\n                if (testWord.dir === 0) {\n                  curCross.dir = 1;\n                  curCross.x += l;\n                  curCross.y -= j;\n                } else {\n                  curCross.dir = 0;\n                  curCross.y += l;\n                  curCross.x -= j;\n                }\n                var isMatch = true;\n                for (var m = -1, lenM = curWord.char.length + 1; m < lenM; m++) {\n                  var crossVal = [];\n                  if (m !== j) {\n                    if (curCross.dir === 0) {\n                      var xIndex = curCross.x + m;\n                      if (xIndex < 0 || xIndex > board.length) {\n                        isMatch = false;\n                        break;\n                      }\n                      crossVal.push(board[xIndex][curCross.y]);\n                      crossVal.push(board[xIndex][curCross.y + 1]);\n                      crossVal.push(board[xIndex][curCross.y - 1]);\n                    } else {\n                      var yIndex = curCross.y + m;\n                      if (yIndex < 0 || yIndex > board[curCross.x].length) {\n                        isMatch = false;\n                        break;\n                      }\n                      crossVal.push(board[curCross.x][yIndex]);\n                      crossVal.push(board[curCross.x + 1][yIndex]);\n                      crossVal.push(board[curCross.x - 1][yIndex]);\n                    }\n                    if (m > -1 && m < lenM - 1) {\n                      if (crossVal[0] !== curWord.char[m]) {\n                        if (crossVal[0] !== null) {\n                          isMatch = false;\n                          break;\n                        } else if (crossVal[1] !== null) {\n                          isMatch = false;\n                          break;\n                        } else if (crossVal[2] !== null) {\n                          isMatch = false;\n                          break;\n                        }\n                      }\n                    } else if (crossVal[0] !== null) {\n                      isMatch = false;\n                      break;\n                    }\n                  }\n                }\n                if (isMatch === true) {\n                  curWord.successfulMatches.push(curCross);\n                }\n              }\n            }\n          }\n        }\n        curMatchDiff = curWord.totalMatches - curWord.effectiveMatches;\n        if (curMatchDiff < minMatchDiff && curWord.successfulMatches.length > 0) {\n          curMatchDiff = minMatchDiff;\n          curIndex = i;\n        } else if (curMatchDiff <= 0) {\n          return false;\n        }\n      }\n    }\n    if (curIndex === -1) {\n      return false;\n    }\n    var spliced = wordBank.splice(curIndex, 1);\n    wordsActive.push(spliced[0]);\n    var pushIndex = wordsActive.length - 1,\n      rand = Math.random(),\n      matchArr = wordsActive[pushIndex].successfulMatches,\n      matchIndex = Math.floor(rand * matchArr.length),\n      matchData = matchArr[matchIndex];\n    wordsActive[pushIndex].x = matchData.x;\n    wordsActive[pushIndex].y = matchData.y;\n    wordsActive[pushIndex].dir = matchData.dir;\n    let actualIndex = findWordIdx(wordsActive[pushIndex].string);\n    console.log(wordsActive[pushIndex].string, \" ~~~ \", actualIndex);\n    for (i = 0, len = wordsActive[pushIndex].char.length; i < len; i++) {\n      var xIndex = matchData.x,\n        yIndex = matchData.y;\n      if (matchData.dir === 0) {\n        xIndex += i;\n      } else {\n        yIndex += i;\n      }\n      board[xIndex][yIndex] = wordsActive[pushIndex].char[i];\n      isPos[xIndex][yIndex] = i == 1;\n      if (actualIndex != undefined) classesOfBoard[xIndex][yIndex].push(actualIndex);\n      console.log(xIndex, yIndex, classesOfBoard[xIndex][yIndex]);\n      Bounds.Update(xIndex, yIndex);\n    }\n    return true;\n  }\n  PopulateBoard();\n  console.log(\"wordArr\", wordArr);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_c = CrosswordGrid;\nexport default CrosswordGrid;\nvar _c;\n$RefreshReg$(_c, \"CrosswordGrid\");","map":{"version":3,"names":["React","Fragment","_Fragment","jsxDEV","_jsxDEV","CrosswordGrid","placedWords","boardSize","GRID_SIZE","EMPTY_CELL","createEmptyGrid","size","Array","from","length","fill","wordArr","board","wordBank","wordsActive","mode","isPos","classesOfBoard","WordObj","constructor","str","string","char","totalMatches","effectiveMatches","successfulMatches","x","y","dir","split","Bounds","top","right","bottom","left","Update","Math","min","max","Clean","CleanVars","i","push","j","PopulateBoard","PrepareBoard","isOk","len","AddWordToBoard","actualPos","toString","wA","cA","k","wB","l","findWordIdx","givenWord","substring","undefined","curIndex","curWord","curChar","curMatch","testWord","testChar","minMatchDiff","curMatchDiff","lenJ","lenK","lenL","curCross","isMatch","m","lenM","crossVal","xIndex","yIndex","spliced","splice","pushIndex","rand","random","matchArr","matchIndex","floor","matchData","actualIndex","console","log","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/HostRound2.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Define word object structure\r\n\r\ntype WordPlacement = {\r\n  x: number;\r\n  y: number;\r\n  dir: 0 | 1;\r\n};\r\n\r\ninterface CrosswordGridProps {\r\n  placedWords?: WordPlacement[];\r\n  boardSize?: number;\r\n}\r\n\r\n\r\n\r\nconst CrosswordGrid: React.FC<CrosswordGridProps> = ({ placedWords, boardSize = 20 }) => {\r\n\r\n\r\n\r\n  const GRID_SIZE = 100;\r\n  const EMPTY_CELL = ' ';\r\n\r\n  function createEmptyGrid(size: number): (string|null)[][] {\r\n    return Array.from({ length: size }, () => Array(size).fill(EMPTY_CELL));\r\n  }\r\n\r\n  const wordArr = [\r\n    'GIÓ',\r\n    'HẠTGIỐNG',\r\n    'DREAM',\r\n    'THUỐC',\r\n    'CÚC',\r\n    'CHÂUKIỆTLUÂN',\r\n  ]\r\n\r\n  var board = createEmptyGrid(GRID_SIZE), wordBank: WordObj[] = [], wordsActive: WordObj[] = [], mode: number;\r\n\r\n  interface MatchPosition {\r\n    x: number;\r\n    y: number;\r\n    dir: number; // 0 = horizontal, 1 = vertical\r\n  }\r\n\r\n  interface Question {\r\n    answer: string;\r\n  }\r\n\r\n  var isPos: boolean[][] = [[]];\r\n  var classesOfBoard: number[][][] = [[[]]];\r\n\r\n  class WordObj {\r\n    string: string;\r\n    char: string[];\r\n    totalMatches: number = 0;\r\n    effectiveMatches: number = 0;\r\n    successfulMatches: MatchPosition[] = [];\r\n    x: number = 0;\r\n    y: number = 0;\r\n    dir: number = 0;\r\n\r\n    constructor(str: string) {\r\n      this.string = str;\r\n      this.char = str.split('');\r\n    }\r\n  }\r\n\r\n  const Bounds = {\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n\r\n    Update: function (x: number, y: number) {\r\n      this.top = Math.min(y, this.top);\r\n      this.right = Math.max(x, this.right);\r\n      this.bottom = Math.max(y, this.bottom);\r\n      this.left = Math.min(x, this.left);\r\n    },\r\n\r\n    Clean: function () {\r\n      this.top = 999;\r\n      this.right = 0;\r\n      this.bottom = 0;\r\n      this.left = 999;\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function CleanVars(): void {\r\n    Bounds.Clean();\r\n    wordBank = [];\r\n    wordsActive = [];\r\n    board = [];\r\n    isPos = [];\r\n    classesOfBoard = [];\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n      board.push([]);\r\n      isPos.push([]);\r\n      classesOfBoard.push([]);\r\n      for (let j = 0; j < 100; j++) {\r\n        board[i].push(null);\r\n        isPos[i].push(false);\r\n        classesOfBoard[i].push([]);\r\n      }\r\n    }\r\n  }\r\n\r\n  function PopulateBoard(){\r\n      PrepareBoard();\r\n\r\n      for(var i=0,isOk=true,len=wordBank.length; i<len && isOk; i++){\r\n        isOk = AddWordToBoard();\r\n      }\r\n      return isOk;\r\n    }\r\n\r\n  function PrepareBoard(): void {\r\n    wordBank = [];\r\n\r\n    for (let i = 0; i < wordArr.length; i++) {\r\n      const actualPos = i + 1;\r\n      wordBank.push(new WordObj(' ' + actualPos.toString() + wordArr[i] + ' '));\r\n    }\r\n\r\n    for (let i = 0; i < wordBank.length; i++) {\r\n      const wA = wordBank[i];\r\n      for (let j = 0; j < wA.char.length; j++) {\r\n        const cA = wA.char[j];\r\n        for (let k = 0; k < wordBank.length; k++) {\r\n          const wB = wordBank[k];\r\n          if (i !== k) {\r\n            for (let l = 0; l < wB.char.length; l++) {\r\n              wA.totalMatches += (cA === wB.char[l]) ? 1 : 0;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function findWordIdx(givenWord: string): number | undefined {\r\n    givenWord = givenWord.substring(2, givenWord.length - 1);\r\n    for (let i = 0; i < wordArr.length; i++) {\r\n      if (givenWord === wordArr[i]) return i + 1;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  function AddWordToBoard(): boolean {\r\n    var i, len, curIndex, curWord, curChar, curMatch, testWord, testChar,\r\n      minMatchDiff = 9999, curMatchDiff;\r\n\r\n    if (wordsActive.length < 1) {\r\n      curIndex = 0;\r\n      for (i = 0, len = wordBank.length; i < len; i++) {\r\n        if (wordBank[i].totalMatches < wordBank[curIndex].totalMatches) {\r\n          curIndex = i;\r\n        }\r\n      }\r\n      wordBank[curIndex].successfulMatches = [{ x: 12, y: 12, dir: 0 }];\r\n    }\r\n    else {\r\n      curIndex = -1;\r\n\r\n      for (i = 0, len = wordBank.length; i < len; i++) {\r\n        curWord = wordBank[i];\r\n        curWord.effectiveMatches = 0;\r\n        curWord.successfulMatches = [];\r\n        for (var j = 0, lenJ = curWord.char.length; j < lenJ; j++) {\r\n          if (j == 1) continue; // skip pos\r\n          curChar = curWord.char[j];\r\n          for (var k = 0, lenK = wordsActive.length; k < lenK; k++) {\r\n            testWord = wordsActive[k];\r\n            for (var l = 0, lenL = testWord.char.length; l < lenL; l++) {\r\n              if (l == 1) continue; // skip pos\r\n              testChar = testWord.char[l];\r\n              if (curChar === testChar) {\r\n                curWord.effectiveMatches++;\r\n\r\n                var curCross = { x: testWord.x, y: testWord.y, dir: 0 };\r\n                if (testWord.dir === 0) {\r\n                  curCross.dir = 1;\r\n                  curCross.x += l;\r\n                  curCross.y -= j;\r\n                }\r\n                else {\r\n                  curCross.dir = 0;\r\n                  curCross.y += l;\r\n                  curCross.x -= j;\r\n                }\r\n\r\n                var isMatch = true;\r\n\r\n                for (var m = -1, lenM = curWord.char.length + 1; m < lenM; m++) {\r\n                  var crossVal = [];\r\n                  if (m !== j) {\r\n                    if (curCross.dir === 0) {\r\n                      var xIndex = curCross.x + m;\r\n\r\n                      if (xIndex < 0 || xIndex > board.length) {\r\n                        isMatch = false;\r\n                        break;\r\n                      }\r\n\r\n                      crossVal.push(board[xIndex][curCross.y]);\r\n                      crossVal.push(board[xIndex][curCross.y + 1]);\r\n                      crossVal.push(board[xIndex][curCross.y - 1]);\r\n                    }\r\n                    else {\r\n                      var yIndex = curCross.y + m;\r\n\r\n                      if (yIndex < 0 || yIndex > board[curCross.x].length) {\r\n                        isMatch = false;\r\n                        break;\r\n                      }\r\n\r\n                      crossVal.push(board[curCross.x][yIndex]);\r\n                      crossVal.push(board[curCross.x + 1][yIndex]);\r\n                      crossVal.push(board[curCross.x - 1][yIndex]);\r\n                    }\r\n\r\n                    if (m > -1 && m < lenM - 1) {\r\n                      if (crossVal[0] !== curWord.char[m]) {\r\n                        if (crossVal[0] !== null) {\r\n                          isMatch = false;\r\n                          break;\r\n                        }\r\n                        else if (crossVal[1] !== null) {\r\n                          isMatch = false;\r\n                          break;\r\n                        }\r\n                        else if (crossVal[2] !== null) {\r\n                          isMatch = false;\r\n                          break;\r\n                        }\r\n                      }\r\n                    }\r\n                    else if (crossVal[0] !== null) {\r\n                      isMatch = false;\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (isMatch === true) {\r\n                  curWord.successfulMatches.push(curCross);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        curMatchDiff = curWord.totalMatches - curWord.effectiveMatches;\r\n\r\n        if (curMatchDiff < minMatchDiff && curWord.successfulMatches.length > 0) {\r\n          curMatchDiff = minMatchDiff;\r\n          curIndex = i;\r\n        }\r\n        else if (curMatchDiff <= 0) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (curIndex === -1) {\r\n      return false;\r\n    }\r\n\r\n    var spliced = wordBank.splice(curIndex, 1);\r\n    wordsActive.push(spliced[0]);\r\n\r\n    var pushIndex = wordsActive.length - 1,\r\n      rand = Math.random(),\r\n      matchArr = wordsActive[pushIndex].successfulMatches,\r\n      matchIndex = Math.floor(rand * matchArr.length),\r\n      matchData = matchArr[matchIndex];\r\n\r\n    wordsActive[pushIndex].x = matchData.x;\r\n    wordsActive[pushIndex].y = matchData.y;\r\n    wordsActive[pushIndex].dir = matchData.dir;\r\n\r\n    let actualIndex = findWordIdx(wordsActive[pushIndex].string);\r\n    console.log(wordsActive[pushIndex].string, \" ~~~ \", actualIndex);\r\n    for (i = 0, len = wordsActive[pushIndex].char.length; i < len; i++) {\r\n      var xIndex = matchData.x,\r\n        yIndex = matchData.y;\r\n\r\n      if (matchData.dir === 0) {\r\n        xIndex += i;\r\n      }\r\n      else {\r\n        yIndex += i;\r\n      }\r\n      board[xIndex][yIndex] = wordsActive[pushIndex].char[i];\r\n      isPos[xIndex][yIndex] = (i == 1);\r\n      if (actualIndex != undefined)\r\n        classesOfBoard[xIndex][yIndex].push(actualIndex);\r\n      console.log(xIndex, yIndex, classesOfBoard[xIndex][yIndex]);\r\n\r\n      Bounds.Update(xIndex, yIndex);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  PopulateBoard()\r\n  console.log(\"wordArr\", wordArr);\r\n  \r\n\r\n  return (\r\n    <>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CrosswordGrid;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}