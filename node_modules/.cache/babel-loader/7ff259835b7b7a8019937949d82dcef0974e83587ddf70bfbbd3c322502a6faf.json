{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { renderGrid } from \"./utils\";\nimport { useHost } from \"../../context/hostContext\";\nimport { usePlayer } from \"../../context/playerContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mainKeyword = \"BÒCÔNGANH\"; // Main obstacle keyword\n\nconst QuestionBoxRound2 = ({\n  obstacleWord,\n  hintWordArray,\n  initialGrid,\n  isHost = false\n}) => {\n  _s();\n  console.log(\"hintWordArray\", typeof hintWordArray);\n  console.log(\"obstacle\", obstacleWord);\n  const {\n    setInitialGrid\n  } = usePlayer();\n  const {\n    hostInitialGrid,\n    setHostInitialGrid\n  } = useHost();\n  const GRID_SIZE = 20; // Grid size\n  const generateEmptyGrid = () => {\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n  };\n  const [grid, setGrid] = useState(generateEmptyGrid());\n  const [revealedRows, setRevealedRows] = useState(Array(GRID_SIZE).fill(false));\n  const [revealedCols, setRevealedCols] = useState(Array(GRID_SIZE).fill(false));\n  const [hintWords, setHintWords] = useState([]);\n\n  // Randomize the grid when component is first mounted if the user is the host\n  useEffect(() => {\n    if (isHost) {\n      const wordList = [\"GIÓ\", \"HẠTGIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂUKIỆTLUÂN\"];\n      console.log(\"wordList\", wordList);\n      console.log(\"hintWordArray\", hintWordArray);\n      if (hintWordArray && obstacleWord) {\n        const {\n          randomHintWords,\n          newGrid\n        } = renderGrid(hintWordArray, obstacleWord, GRID_SIZE);\n        console.log(\"randomHintWords\", randomHintWords);\n        console.log(\"newGrid\", newGrid);\n        setHintWords(randomHintWords);\n        setH(newGrid);\n        setGrid(newGrid);\n      }\n    } else {\n      if (initialGrid) {\n        setGrid(initialGrid);\n      }\n    }\n  }, [isHost, hintWordArray]);\n\n  // Host-only: Toggle reveal for a specific row\n  const toggleRow = rowIndex => {\n    if (!isHost) return; // Non-host users can't toggle rows\n    setRevealedRows(prev => {\n      const newRevealed = [...prev];\n      newRevealed[rowIndex] = !newRevealed[rowIndex];\n      return newRevealed;\n    });\n  };\n\n  // Host-only: Toggle reveal for a specific column\n  const toggleCol = colIndex => {\n    if (!isHost) return; // Non-host users can't toggle columns\n    setRevealedCols(prev => {\n      const newRevealed = [...prev];\n      newRevealed[colIndex] = !newRevealed[colIndex];\n      return newRevealed;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\",\n      children: \"Trong c\\xE1c gi\\u1EA3i \\u0111\\u1EA5u th\\u1EC3 thao, nh\\u1EEFng \\u0111\\u1ED9i hay v\\u1EADn \\u0111\\u1ED9ng vi\\xEAn m\\u1EA1nh s\\u1EBD \\u0111\\u01B0\\u1EE3c x\\u1EBFp v\\xE0o c\\xF9ng m\\u1ED9t ho\\u1EB7c nhi\\u1EC1u nh\\xF3m trong khi b\\u1ED1c th\\u0103m \\u0111\\u1EC3 tr\\xE1nh vi\\u1EC7c g\\u1EB7p nhau s\\u1EDBm. T\\xEAn g\\u1ECDi chung c\\u1EE7a c\\xE1c nh\\xF3m v\\u1EADn \\u0111\\u1ED9ng vi\\xEAn n\\xE0y l\\xE0 g\\xEC?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map((cell, colIndex) => {\n          // Determine if a cell should be revealed\n          const isRevealed = revealedRows[rowIndex] && hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\") || revealedCols[colIndex] && hintWords.some(word => word.x === colIndex && word.direction === \"vertical\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-10 h-10 flex items-center justify-center text-lg font-semibold select-none \n                                        ${cell.includes(\"number\") ? \"text-blue-500 bg-white border-none\" : \"\"}\n                                        ${cell === \"\" ? \"bg-white border-none\" : \"border-gray-400 bg-gray-50\"} \n                                        ${\n            // Reveal text if applicable\n            !cell.includes(\"number\") && isRevealed && obstacleWord && !obstacleWord.includes(cell) ? \"text-black\" : !cell.includes(\"number\") ? \"text-transparent\" : \"\"}\n                                        ${obstacleWord !== null && obstacleWord !== void 0 && obstacleWord.includes(cell) && isRevealed && isNaN(Number(cell)) ? \"font-bold text-red-500\" : \"\"}\n                                    `,\n            onClick: () => {\n              // Allow toggling rows/cols only for the host\n              if (isHost) {\n                if (hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\")) {\n                  toggleRow(rowIndex);\n                } else if (hintWords.some(word => word.x === colIndex && word.direction === \"vertical\")) {\n                  toggleCol(colIndex);\n                }\n              }\n            },\n            style: {\n              cursor: isHost && hintWords.some(word => word.y === rowIndex || word.x === colIndex) ? \"pointer\" : \"default\"\n            },\n            children: cell.includes(\"number\") ? cell.replace(\"number\", \"\").trim() : cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 33\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n// const Round2: React.FC<RoundBase> = ({ isHost }) => {\n//     return (\n//         <Play\n//             questionComponent={<ObstacleQuestionBox obstacleWord={mainKeyword} isHost={isHost}/>}\n//             isHost={isHost}\n//         />\n//     );\n// }\n_s(QuestionBoxRound2, \"XrMF5nuz4pRMQrHZoSIAVuIYuLY=\", false, function () {\n  return [usePlayer, useHost];\n});\n_c = QuestionBoxRound2;\nexport default QuestionBoxRound2;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound2\");","map":{"version":3,"names":["React","useState","useEffect","renderGrid","useHost","usePlayer","jsxDEV","_jsxDEV","mainKeyword","QuestionBoxRound2","obstacleWord","hintWordArray","initialGrid","isHost","_s","console","log","setInitialGrid","hostInitialGrid","setHostInitialGrid","GRID_SIZE","generateEmptyGrid","Array","fill","map","grid","setGrid","revealedRows","setRevealedRows","revealedCols","setRevealedCols","hintWords","setHintWords","wordList","randomHintWords","newGrid","setH","toggleRow","rowIndex","prev","newRevealed","toggleCol","colIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","row","Fragment","cell","isRevealed","some","word","y","direction","x","includes","isNaN","Number","onClick","style","cursor","replace","trim","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round2.tsx"],"sourcesContent":["import Play from \"../Play\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { renderGrid } from \"./utils\";\r\nimport { RoundBase } from \"../../type\";\r\nimport { useHost } from \"../../context/hostContext\";\r\nimport { usePlayer } from \"../../context/playerContext\";\r\n\r\ninterface HintWord {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n    obstacleWord?: string;\r\n    hintWordArray?: string[],\r\n    isHost?: boolean; // Indicates if the user is the host\r\n    initialGrid?: string[][]\r\n}\r\n\r\nconst mainKeyword = \"BÒCÔNGANH\"; // Main obstacle keyword\r\n\r\nconst QuestionBoxRound2: React.FC<ObstacleQuestionBoxProps> = ({ obstacleWord, hintWordArray,initialGrid,isHost = false }) => {\r\n    console.log(\"hintWordArray\",typeof hintWordArray)\r\n    console.log(\"obstacle\", obstacleWord)\r\n    const {setInitialGrid} = usePlayer()\r\n    const {hostInitialGrid, setHostInitialGrid} = useHost()\r\n    const GRID_SIZE = 20; // Grid size\r\n    const generateEmptyGrid = () => {\r\n        return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\r\n    };\r\n\r\n    const [grid, setGrid] = useState<string[][]>(generateEmptyGrid());\r\n    const [revealedRows, setRevealedRows] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [revealedCols, setRevealedCols] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [hintWords, setHintWords] = useState<HintWord[]>([]);\r\n\r\n    // Randomize the grid when component is first mounted if the user is the host\r\n    useEffect(() => {\r\n        if (isHost) {\r\n            const wordList = [\"GIÓ\", \"HẠTGIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂUKIỆTLUÂN\"];\r\n            console.log(\"wordList\", wordList)\r\n            console.log(\"hintWordArray\", hintWordArray)\r\n            if(hintWordArray && obstacleWord){\r\n                const { randomHintWords, newGrid } = renderGrid(hintWordArray, obstacleWord, GRID_SIZE);\r\n                console.log(\"randomHintWords\",randomHintWords)\r\n                console.log(\"newGrid\",newGrid)\r\n                setHintWords(randomHintWords);\r\n                setH(newGrid)\r\n                setGrid(newGrid);               \r\n            }\r\n        } else {\r\n            if(initialGrid) {\r\n                setGrid(initialGrid)\r\n            }\r\n        }\r\n    }, [isHost, hintWordArray]);\r\n\r\n    // Host-only: Toggle reveal for a specific row\r\n    const toggleRow = (rowIndex: number) => {\r\n        if (!isHost) return; // Non-host users can't toggle rows\r\n        setRevealedRows((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[rowIndex] = !newRevealed[rowIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    // Host-only: Toggle reveal for a specific column\r\n    const toggleCol = (colIndex: number) => {\r\n        if (!isHost) return; // Non-host users can't toggle columns\r\n        setRevealedCols((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[colIndex] = !newRevealed[colIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6\">\r\n            <div className=\"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\">\r\n                Trong các giải đấu thể thao, những đội hay vận động viên mạnh sẽ được xếp vào cùng một hoặc nhiều nhóm trong khi bốc thăm để tránh việc gặp nhau sớm. Tên gọi chung của các nhóm vận động viên này là gì?\r\n            </div>\r\n            <div className=\"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\">\r\n                {grid.map((row, rowIndex) => (\r\n                    <React.Fragment key={rowIndex}>\r\n                        {row.map((cell, colIndex) => {\r\n                            // Determine if a cell should be revealed\r\n                            const isRevealed =\r\n                                (revealedRows[rowIndex] &&\r\n                                    hintWords.some(\r\n                                        (word) => word.y === rowIndex && word.direction === \"horizontal\"\r\n                                    )) ||\r\n                                (revealedCols[colIndex] &&\r\n                                    hintWords.some((word) => word.x === colIndex && word.direction === \"vertical\"));\r\n\r\n                            return (\r\n                                <div\r\n                                    key={colIndex}\r\n                                    className={`w-10 h-10 flex items-center justify-center text-lg font-semibold select-none \r\n                                        ${cell.includes(\"number\") ? \"text-blue-500 bg-white border-none\" : \"\"}\r\n                                        ${cell === \"\" ? \"bg-white border-none\" : \"border-gray-400 bg-gray-50\"} \r\n                                        ${\r\n                                        // Reveal text if applicable\r\n                                        !cell.includes(\"number\") && isRevealed && obstacleWord && !obstacleWord.includes(cell)\r\n                                            ? \"text-black\"\r\n                                            : !cell.includes(\"number\")\r\n                                                ? \"text-transparent\"\r\n                                                : \"\"\r\n                                        }\r\n                                        ${obstacleWord?.includes(cell) && isRevealed && isNaN(Number(cell)) ? \"font-bold text-red-500\" : \"\"}\r\n                                    `}\r\n                                    onClick={() => {\r\n                                        // Allow toggling rows/cols only for the host\r\n                                        if (isHost) {\r\n                                            if (\r\n                                                hintWords.some(\r\n                                                    (word) => word.y === rowIndex && word.direction === \"horizontal\"\r\n                                                )\r\n                                            ) {\r\n                                                toggleRow(rowIndex);\r\n                                            } else if (\r\n                                                hintWords.some(\r\n                                                    (word) => word.x === colIndex && word.direction === \"vertical\"\r\n                                                )\r\n                                            ) {\r\n                                                toggleCol(colIndex);\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                    style={{\r\n                                        cursor:\r\n                                            isHost &&\r\n                                                hintWords.some((word) => word.y === rowIndex || word.x === colIndex)\r\n                                                ? \"pointer\"\r\n                                                : \"default\",\r\n                                    }}\r\n                                >\r\n                                    {cell.includes(\"number\") ? cell.replace(\"number\", \"\").trim() : cell}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </React.Fragment>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n// const Round2: React.FC<RoundBase> = ({ isHost }) => {\r\n//     return (\r\n//         <Play\r\n//             questionComponent={<ObstacleQuestionBox obstacleWord={mainKeyword} isHost={isHost}/>}\r\n//             isHost={isHost}\r\n//         />\r\n//     );\r\n// }\r\n\r\nexport default QuestionBoxRound2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}