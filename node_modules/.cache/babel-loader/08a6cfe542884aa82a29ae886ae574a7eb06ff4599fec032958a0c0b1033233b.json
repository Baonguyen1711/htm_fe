{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round3.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { getPacketNames } from '../../components/services';\nimport { useSearchParams } from 'react-router-dom';\nimport { deletePath, listenToSound, listenToPackets, listenToQuestions, listenToSelectedPacket, listenToTimeStart, listenToAnswers } from '../../services/firebaseServices';\nimport { usePlayer } from '../../context/playerContext';\nimport { useTimeStart } from '../../context/timeListenerContext';\nimport { setSelectedPacketToPlayer } from '../services';\nimport { useHost } from '../../context/hostContext';\nimport { useSounds } from '../../context/soundContext';\n// const topics = [\n//     { name: \"Xuân\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\n//     { name: \"Hạ\", questions: [\"Question 2.1\", \"Question 2.2\", \"Question 2.3\", \"Question 2.4\", \"Question 2.5\", \"Question 2.6\", \"Question 2.7\", \"Question 2.8\", \"Question 2.9\", \"Question 2.10\", \"Question 2.11\", \"Question 2.12\", \"Question 2.13\", \"Question 2.14\", \"Question 2.15\"] },\n//     { name: \"Thu\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\n//     { name: \"Đông\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionBoxRound3 = ({\n  isHost = false\n}) => {\n  _s();\n  const MAX_PACKET_QUESTION = 12;\n  const sounds = useSounds();\n  const [topics, setTopics] = useState([]);\n  const [correctAnswer, setCorrectAnswer] = useState(\"\");\n  //const [selectedTopic, setSelectedTopic] = useState<string | null>(null);\n  const [hiddenTopics, setHiddenTopics] = useState([]);\n  // const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const {\n    selectedTopic,\n    setSelectedTopic,\n    currentQuestion,\n    setCurrentQuestion,\n    animationKey,\n    setAnimationKey\n  } = usePlayer();\n  const {\n    currentQuestionIndex,\n    setCurrentQuestionIndex\n  } = useHost();\n  const [playerCurrentQuestionIndex, setPlayerCurrentQuestionIndex] = useState(0);\n  const tempQuestionListRef = useRef([]);\n  const [tempQuestionList, setTempQuestionList] = useState([]);\n  const [searchParams] = useSearchParams();\n  const testName = searchParams.get(\"testName\") || \"\";\n  const roomId = searchParams.get(\"roomId\") || \"\";\n  const round = searchParams.get(\"round\") || \"\";\n  const isFirstMounted = useRef(true);\n  const {\n    timeLeft,\n    startTimer,\n    setTimeLeft\n  } = useTimeStart();\n  const salt = \"HTMNBK2025\";\n  function decodeQuestion(encoded) {\n    // Decode base64 to bytes\n    const binaryString = atob(encoded);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n\n    // Convert bytes to UTF-8 string\n    const decoded = new TextDecoder(\"utf-8\").decode(bytes);\n\n    // Check for tampering\n    if (!decoded.startsWith(salt)) throw new Error(\"Tampered data!\");\n    return decoded.slice(salt.length);\n  }\n  useEffect(() => {\n    console.log(\"currentQuestionIndex in round 3\", currentQuestionIndex);\n    if (currentQuestionIndex > MAX_PACKET_QUESTION) {\n      const timeOut = setTimeout(() => {\n        if (isHost) {\n          setCurrentQuestionIndex(\"1\");\n          deletePath(roomId, \"currentQuestions\");\n          deletePath(roomId, \"current_correct_answer\");\n        }\n        setCurrentQuestion(\"\");\n        setCorrectAnswer(\"\");\n        setSelectedTopic(null);\n        console.log(\"clear at question 12\");\n      }, 6000);\n    }\n  }, [currentQuestionIndex]);\n  useEffect(() => {\n    const unsubscribePlayers = listenToSound(roomId, async type => {\n      const audio = sounds[`${type}`];\n      if (audio) {\n        audio.play();\n      }\n      console.log(\"sound type\", type);\n      await deletePath(roomId, \"sound\");\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToAnswers(roomId, answer => {\n      if (answer) {\n        setCorrectAnswer(`Đáp án: ${answer}`);\n      }\n      const timeOut = setTimeout(() => {\n        setCorrectAnswer(\"\");\n      }, 1000);\n      console.log(\"answer\", answer);\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  const isInitialMount = useRef(false);\n  useEffect(() => {\n    const unsubscribe = listenToTimeStart(roomId, async () => {\n      // Skip the timer setting on the first mount, but allow future calls to run\n      if (isInitialMount.current) {\n        isInitialMount.current = false;\n        return;\n      }\n      startTimer(60);\n      return () => {\n        unsubscribe();\n      };\n    });\n  }, []);\n\n  // useEffect(() => {\n  //     if (!selectedTopic) return;\n\n  //     // Start timer when selectedTopic changes\n  //     startTimer(60);\n\n  //     return () => {\n\n  //     }\n\n  //     // Side effects based on timer reaching 0\n  // }, []);\n  const isInitialTimerMount = useRef(false);\n  useEffect(() => {\n    console.log(\"timeLeft\", timeLeft);\n    if (isInitialTimerMount.current) {\n      isInitialTimerMount.current = false;\n      return;\n    }\n    if (timeLeft === 0) {\n      setAnimationKey(prev => prev + 1); // Trigger animation or any other side effect\n      // When timer runs out, do your clean up / game logic:\n      if (isHost) {\n        deletePath(roomId, \"currentQuestions\");\n        deletePath(roomId, \"current_correct_answer\");\n        setCurrentQuestionIndex(1);\n      }\n      setCurrentQuestion(\"\");\n      setCorrectAnswer(\"\");\n      setSelectedTopic(null);\n      localStorage.removeItem(\"questions\");\n\n      // If you want to reset timer, call startTimer again here or leave stopped\n    }\n  }, [timeLeft]);\n  useEffect(() => {\n    if (!isHost) return;\n    const getTopic = async () => {\n      const topics = await getPacketNames(testName, roomId);\n      setTopics(topics);\n    };\n    getTopic();\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToPackets(roomId, packets => {\n      console.log(\"packets\", packets);\n      setTopics(packets);\n      // setSelectedTopic(packets)\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  const isSelectedTopicFirstMounted = useRef(true);\n  useEffect(() => {\n    const unsubscribePlayers = listenToSelectedPacket(roomId, packet => {\n      console.log(\"packets\", packet);\n      if (isSelectedTopicFirstMounted.current) {\n        isSelectedTopicFirstMounted.current = false;\n        return;\n      }\n      if (!isHost) {\n        setSelectedTopic(packet);\n      }\n      // setSelectedTopic(packets)\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToQuestions(roomId, questions => {\n      console.log(\"questions\", questions);\n      console.log(\"questions.question\", questions.question);\n      if (!isHost) {\n        setPlayerCurrentQuestionIndex(prev => prev + 1);\n      }\n      const timeOut = setTimeout(() => {\n        setCurrentQuestion(questions.question);\n      }, 1000);\n\n      // if (questions.length > 0) {\n      //     setSelectedTopic(questions[0].packetName)\n      //     console.log(\"questions\", questions);\n      //     const currentQuestions = tempQuestionListRef.current\n      //     tempQuestionListRef.current = [...currentQuestions, ...questions];\n      //     localStorage.setItem(\"questions\", JSON.stringify(questions))\n      // }\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n\n  // useEffect(() => {\n\n  //     const unsubscribePlayers = listenToCurrentQuestionsNumber(roomId, (questionNumber) => {\n  //         console.log(\"questionNumber outside\", questionNumber);\n  //         if (localStorage.getItem(\"questions\")) {\n  //             console.log(\"tempQuestionList\",tempQuestionListRef.current);\n\n  //             const question = tempQuestionListRef.current[questionNumber - 1].question;\n\n  //             if (question) {\n  //                 console.log(\"decodeQuestion(question.question)\", question);\n\n  //                 const timeOut = setTimeout(() => {\n  //                     setCurrentQuestion(question)\n  //                 }, 1000)\n\n  //                 if (questionNumber === 12) {\n  //                     {\n  //                         console.log(\"questionNumber inside\", questionNumber);\n  //                         setCurrentPacketQuestion(roomId, 1)\n  //                         setCurrentQuestion(\"\")\n  //                         setSelectedTopic(null)\n  //                         setCorrectAnswer(\"\")\n  //                         localStorage.removeItem(\"questions\")\n  //                     }\n  //                 }\n  //             }\n  //         }\n  //     });\n\n  //     return () => {\n  //         unsubscribePlayers();\n  //     };\n  // }, []);\n\n  const handleTopicSelect = async topic => {\n    console.log(\"topic\", topic);\n    if (isHost) {\n      await setSelectedPacketToPlayer(roomId, topic);\n    }\n    if (!isHost) return; // Non-host users cannot select topics\n    setSelectedTopic(topic);\n    setHiddenTopics(prev => [...prev, topic]); // Add the selected topic to the hidden list\n  };\n\n  // useEffect(() => {\n  //     if (selectedTopic && timeLeft > 0) {\n  //         const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n  //         return () => clearTimeout(timer);\n  //     } else if (timeLeft === 0 && isHost) {\n  //         // Automatically navigate back for hosts\n  //         const resetTimer = setTimeout(() => {\n  //             setSelectedTopic(null);\n  //         }, 3000);\n  //         return () => clearTimeout(resetTimer);\n  //     }\n  // }, [timeLeft, selectedTopic, isHost]);\n\n  //const currentQuestions = topics.find((topic) => topic.name === selectedTopic)?.questions;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center min-h-[600px]\",\n    children: !selectedTopic ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-2 gap-6 w-full max-w-xl\",\n      children: Array.isArray(topics) && topics.length > 0 ? topics.filter(topic => !hiddenTopics.includes(topic)).slice(0, 8) // Only show up to 8 packages\n      .map(topic => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `bg-blue-500 text-white text-xl font-bold p-8 rounded-2xl shadow-lg hover:bg-blue-700 transition-all duration-200 ${!isHost ? \"cursor-not-allowed opacity-50\" : \"\"}`,\n        onClick: () => handleTopicSelect(topic),\n        disabled: !isHost,\n        style: {\n          minHeight: \"100px\"\n        },\n        children: topic\n      }, topic, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 33\n      }, this)) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold text-white\",\n        children: selectedTopic ? selectedTopic : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg mt-2 text-white\",\n          children: currentQuestion ? currentQuestion : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg mt-2 text-white\",\n          children: correctAnswer ? correctAnswer : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 9\n  }, this);\n};\n\n// const Round3: React.FC<RoundBase> = ({ isHost }) => {\n//     return (\n//         <Play\n//             questionComponent={<QuestionComponent isHost={isHost}/>}\n//             isHost={isHost}\n//         />\n//     );\n// }\n_s(QuestionBoxRound3, \"JkMZ4328+TsDBRk4SKCScyEcado=\", false, function () {\n  return [useSounds, usePlayer, useHost, useSearchParams, useTimeStart];\n});\n_c = QuestionBoxRound3;\nexport default QuestionBoxRound3;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound3\");","map":{"version":3,"names":["React","useState","useEffect","useRef","getPacketNames","useSearchParams","deletePath","listenToSound","listenToPackets","listenToQuestions","listenToSelectedPacket","listenToTimeStart","listenToAnswers","usePlayer","useTimeStart","setSelectedPacketToPlayer","useHost","useSounds","jsxDEV","_jsxDEV","QuestionBoxRound3","isHost","_s","MAX_PACKET_QUESTION","sounds","topics","setTopics","correctAnswer","setCorrectAnswer","hiddenTopics","setHiddenTopics","selectedTopic","setSelectedTopic","currentQuestion","setCurrentQuestion","animationKey","setAnimationKey","currentQuestionIndex","setCurrentQuestionIndex","playerCurrentQuestionIndex","setPlayerCurrentQuestionIndex","tempQuestionListRef","tempQuestionList","setTempQuestionList","searchParams","testName","get","roomId","round","isFirstMounted","timeLeft","startTimer","setTimeLeft","salt","decodeQuestion","encoded","binaryString","atob","bytes","Uint8Array","length","i","charCodeAt","decoded","TextDecoder","decode","startsWith","Error","slice","console","log","timeOut","setTimeout","unsubscribePlayers","type","audio","play","answer","isInitialMount","unsubscribe","current","isInitialTimerMount","prev","localStorage","removeItem","getTopic","packets","isSelectedTopicFirstMounted","packet","questions","question","handleTopicSelect","topic","className","children","Array","isArray","filter","includes","map","onClick","disabled","style","minHeight","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round3.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Play from '../Play';\r\nimport { Question, RoundBase } from '../../type';\r\nimport { getPacketNames } from '../../components/services';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { deletePath, listenToSound, listenToPackets, listenToQuestions, listenToSelectedPacket, listenToCurrentQuestionsNumber, listenToTimeStart, listenToAnswers } from '../../services/firebaseServices';\r\nimport { usePlayer } from '../../context/playerContext';\r\nimport { setCurrentPacketQuestion } from '../../components/services';\r\nimport { useTimeStart } from '../../context/timeListenerContext';\r\nimport { setSelectedPacketToPlayer } from '../services';\r\nimport { sendCorrectAnswer } from '../../components/services';\r\nimport { useHost } from '../../context/hostContext';\r\n\r\nimport { useSounds } from '../../context/soundContext';\r\n// const topics = [\r\n//     { name: \"Xuân\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\r\n//     { name: \"Hạ\", questions: [\"Question 2.1\", \"Question 2.2\", \"Question 2.3\", \"Question 2.4\", \"Question 2.5\", \"Question 2.6\", \"Question 2.7\", \"Question 2.8\", \"Question 2.9\", \"Question 2.10\", \"Question 2.11\", \"Question 2.12\", \"Question 2.13\", \"Question 2.14\", \"Question 2.15\"] },\r\n//     { name: \"Thu\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\r\n//     { name: \"Đông\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\r\n// ];\r\n\r\ninterface QuestionComponentProps {\r\n    isHost?: boolean;// Determines if the user is a spectator or not\r\n}\r\n\r\n\r\n\r\nconst QuestionBoxRound3: React.FC<QuestionComponentProps> = ({ isHost = false }) => {\r\n    const MAX_PACKET_QUESTION = 12\r\n    const sounds = useSounds();\r\n    const [topics, setTopics] = useState<string[]>([]);\r\n    const [correctAnswer, setCorrectAnswer] = useState<string>(\"\")\r\n    //const [selectedTopic, setSelectedTopic] = useState<string | null>(null);\r\n    const [hiddenTopics, setHiddenTopics] = useState<string[]>([]);\r\n    // const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const { selectedTopic, setSelectedTopic, currentQuestion, setCurrentQuestion, animationKey, setAnimationKey } = usePlayer()\r\n    const { currentQuestionIndex, setCurrentQuestionIndex } = useHost()\r\n    const [playerCurrentQuestionIndex, setPlayerCurrentQuestionIndex] = useState<Number>(0)\r\n    const tempQuestionListRef = useRef<Question[]>([]);\r\n    const [tempQuestionList, setTempQuestionList] = useState<Question[]>([])\r\n    const [searchParams] = useSearchParams()\r\n    const testName = searchParams.get(\"testName\") || \"\"\r\n    const roomId = searchParams.get(\"roomId\") || \"\"\r\n    const round = searchParams.get(\"round\") || \"\"\r\n    const isFirstMounted = useRef(true)\r\n    const { timeLeft, startTimer, setTimeLeft } = useTimeStart();\r\n    const salt = \"HTMNBK2025\";\r\n    function decodeQuestion(encoded: string): string {\r\n        // Decode base64 to bytes\r\n        const binaryString = atob(encoded);\r\n        const bytes = new Uint8Array(binaryString.length);\r\n        for (let i = 0; i < binaryString.length; i++) {\r\n            bytes[i] = binaryString.charCodeAt(i);\r\n        }\r\n\r\n        // Convert bytes to UTF-8 string\r\n        const decoded = new TextDecoder(\"utf-8\").decode(bytes);\r\n\r\n        // Check for tampering\r\n        if (!decoded.startsWith(salt)) throw new Error(\"Tampered data!\");\r\n\r\n        return decoded.slice(salt.length);\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(\"currentQuestionIndex in round 3\", currentQuestionIndex);\r\n        if (currentQuestionIndex > MAX_PACKET_QUESTION) {\r\n            \r\n            \r\n\r\n            const timeOut = setTimeout(() => {\r\n                if (isHost) {\r\n                    setCurrentQuestionIndex(\"1\")\r\n                    deletePath(roomId, \"currentQuestions\")\r\n                    deletePath(roomId, \"current_correct_answer\")\r\n                }\r\n\r\n                setCurrentQuestion(\"\");\r\n                setCorrectAnswer(\"\")\r\n                setSelectedTopic(null);\r\n\r\n                console.log(\"clear at question 12\");\r\n                \r\n            }, 6000)\r\n        }\r\n    }, [currentQuestionIndex])\r\n\r\n    useEffect(() => {\r\n        const unsubscribePlayers = listenToSound(roomId, async (type) => {\r\n\r\n            const audio = sounds[`${type}`];\r\n            if (audio) {\r\n                audio.play();\r\n            }\r\n            console.log(\"sound type\", type)\r\n            await deletePath(roomId, \"sound\")\r\n        });\r\n\r\n        // No need to set state here; it's handled by useState initializer\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToAnswers(roomId, (answer) => {\r\n            if (answer) {\r\n                setCorrectAnswer(`Đáp án: ${answer}`)\r\n            }\r\n            const timeOut = setTimeout(() => {\r\n                setCorrectAnswer(\"\")\r\n            }, 1000)\r\n            console.log(\"answer\", answer)\r\n        });\r\n\r\n        // No need to set state here; it's handled by useState initializer\r\n        return () => {\r\n            unsubscribePlayers();\r\n\r\n        };\r\n    }, []);\r\n\r\n    const isInitialMount = useRef(false)\r\n    useEffect(() => {\r\n        const unsubscribe = listenToTimeStart(roomId, async () => {\r\n\r\n\r\n            // Skip the timer setting on the first mount, but allow future calls to run\r\n            if (isInitialMount.current) {\r\n                isInitialMount.current = false;\r\n                return;\r\n            }\r\n            startTimer(60)\r\n            return () => {\r\n                unsubscribe();\r\n\r\n            };\r\n        })\r\n\r\n    }, [])\r\n\r\n\r\n    // useEffect(() => {\r\n    //     if (!selectedTopic) return;\r\n\r\n    //     // Start timer when selectedTopic changes\r\n    //     startTimer(60);\r\n\r\n    //     return () => {\r\n\r\n\r\n    //     }\r\n\r\n    //     // Side effects based on timer reaching 0\r\n    // }, []);\r\n    const isInitialTimerMount = useRef(false)\r\n    useEffect(() => {\r\n        console.log(\"timeLeft\", timeLeft);\r\n        if (isInitialTimerMount.current) {\r\n            isInitialTimerMount.current = false;\r\n            return;\r\n        }\r\n        if (timeLeft === 0) {\r\n            setAnimationKey((prev: number) => prev + 1); // Trigger animation or any other side effect\r\n            // When timer runs out, do your clean up / game logic:\r\n            if (isHost) {\r\n                deletePath(roomId, \"currentQuestions\")\r\n                deletePath(roomId, \"current_correct_answer\")\r\n                setCurrentQuestionIndex(1)\r\n            }\r\n            setCurrentQuestion(\"\");\r\n            setCorrectAnswer(\"\")\r\n            setSelectedTopic(null);\r\n            localStorage.removeItem(\"questions\");\r\n\r\n            // If you want to reset timer, call startTimer again here or leave stopped\r\n        }\r\n    }, [timeLeft]);\r\n\r\n    useEffect(() => {\r\n        if (!isHost) return\r\n        const getTopic = async () => {\r\n            const topics = await getPacketNames(testName, roomId)\r\n            setTopics(topics)\r\n        }\r\n\r\n        getTopic()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const unsubscribePlayers = listenToPackets(roomId, (packets) => {\r\n            console.log(\"packets\", packets);\r\n\r\n            setTopics(packets)\r\n            // setSelectedTopic(packets)\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    const isSelectedTopicFirstMounted = useRef(true)\r\n\r\n    useEffect(() => {\r\n        const unsubscribePlayers = listenToSelectedPacket(roomId, (packet) => {\r\n            console.log(\"packets\", packet);\r\n            if (isSelectedTopicFirstMounted.current) {\r\n                isSelectedTopicFirstMounted.current = false\r\n                return\r\n            }\r\n            if (!isHost) {\r\n                setSelectedTopic(packet)\r\n            }\r\n            // setSelectedTopic(packets)\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToQuestions(roomId, (questions) => {\r\n            console.log(\"questions\", questions);\r\n            console.log(\"questions.question\", questions.question);\r\n            if(!isHost) {\r\n            setPlayerCurrentQuestionIndex((prev) => (prev+1))\r\n            }\r\n\r\n            const timeOut = setTimeout(() => {\r\n                setCurrentQuestion(questions.question)\r\n            }, 1000)\r\n\r\n\r\n\r\n            // if (questions.length > 0) {\r\n            //     setSelectedTopic(questions[0].packetName)\r\n            //     console.log(\"questions\", questions);\r\n            //     const currentQuestions = tempQuestionListRef.current\r\n            //     tempQuestionListRef.current = [...currentQuestions, ...questions];\r\n            //     localStorage.setItem(\"questions\", JSON.stringify(questions))\r\n            // }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n\r\n    //     const unsubscribePlayers = listenToCurrentQuestionsNumber(roomId, (questionNumber) => {\r\n    //         console.log(\"questionNumber outside\", questionNumber);\r\n    //         if (localStorage.getItem(\"questions\")) {\r\n    //             console.log(\"tempQuestionList\",tempQuestionListRef.current);\r\n\r\n    //             const question = tempQuestionListRef.current[questionNumber - 1].question;\r\n\r\n    //             if (question) {\r\n    //                 console.log(\"decodeQuestion(question.question)\", question);\r\n\r\n    //                 const timeOut = setTimeout(() => {\r\n    //                     setCurrentQuestion(question)\r\n    //                 }, 1000)\r\n\r\n\r\n\r\n    //                 if (questionNumber === 12) {\r\n    //                     {\r\n    //                         console.log(\"questionNumber inside\", questionNumber);\r\n    //                         setCurrentPacketQuestion(roomId, 1)\r\n    //                         setCurrentQuestion(\"\")\r\n    //                         setSelectedTopic(null)\r\n    //                         setCorrectAnswer(\"\")\r\n    //                         localStorage.removeItem(\"questions\")\r\n    //                     }\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     });\r\n\r\n    //     return () => {\r\n    //         unsubscribePlayers();\r\n    //     };\r\n    // }, []);\r\n\r\n    const handleTopicSelect = async (topic: string) => {\r\n        console.log(\"topic\", topic);\r\n        if (isHost) {\r\n            await setSelectedPacketToPlayer(roomId, topic)\r\n        }\r\n        if (!isHost) return; // Non-host users cannot select topics\r\n        setSelectedTopic(topic);\r\n        setHiddenTopics((prev) => [...prev, topic]); // Add the selected topic to the hidden list\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     if (selectedTopic && timeLeft > 0) {\r\n    //         const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n    //         return () => clearTimeout(timer);\r\n    //     } else if (timeLeft === 0 && isHost) {\r\n    //         // Automatically navigate back for hosts\r\n    //         const resetTimer = setTimeout(() => {\r\n    //             setSelectedTopic(null);\r\n    //         }, 3000);\r\n    //         return () => clearTimeout(resetTimer);\r\n    //     }\r\n    // }, [timeLeft, selectedTopic, isHost]);\r\n\r\n\r\n    //const currentQuestions = topics.find((topic) => topic.name === selectedTopic)?.questions;\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center min-h-[600px]\">\r\n            {!selectedTopic ? (\r\n                <div className=\"grid grid-cols-2 gap-6 w-full max-w-xl\">\r\n                    {Array.isArray(topics) && topics.length > 0 ? (\r\n                        topics\r\n                            .filter((topic) => !hiddenTopics.includes(topic))\r\n                            .slice(0, 8) // Only show up to 8 packages\r\n                            .map((topic) => (\r\n                                <button\r\n                                    key={topic}\r\n                                    className={`bg-blue-500 text-white text-xl font-bold p-8 rounded-2xl shadow-lg hover:bg-blue-700 transition-all duration-200 ${!isHost ? \"cursor-not-allowed opacity-50\" : \"\"\r\n                                        }`}\r\n                                    onClick={() => handleTopicSelect(topic)}\r\n                                    disabled={!isHost}\r\n                                    style={{ minHeight: \"100px\" }}\r\n                                >\r\n                                    {topic}\r\n                                </button>\r\n                            ))\r\n                    ) : null}\r\n                </div>\r\n            ) : (\r\n                <div className=\"w-full text-center\">\r\n                    <h2 className=\"text-xl font-bold text-white\">{selectedTopic ? selectedTopic : \"\"}</h2>\r\n                    <div className=\"my-4\">\r\n                        <p className=\"text-lg mt-2 text-white\">\r\n                            {currentQuestion ? currentQuestion : \"\"}\r\n                        </p>\r\n                        <p className=\"text-lg mt-2 text-white\">\r\n                            {correctAnswer ? correctAnswer : \"\"}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// const Round3: React.FC<RoundBase> = ({ isHost }) => {\r\n//     return (\r\n//         <Play\r\n//             questionComponent={<QuestionComponent isHost={isHost}/>}\r\n//             isHost={isHost}\r\n//         />\r\n//     );\r\n// }\r\n\r\nexport default QuestionBoxRound3\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}