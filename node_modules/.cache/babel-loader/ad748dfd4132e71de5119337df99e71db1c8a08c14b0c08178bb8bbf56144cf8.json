{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round3.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { getPacketNames } from '../../components/services';\nimport { useSearchParams } from 'react-router-dom';\nimport { listenToPackets, listenToQuestions, listenToCurrentQuestionsNumber, listenToAnswers } from '../../services/firebaseServices';\nimport { usePlayer } from '../../context/playerContext';\nimport { setCurrentPacketQuestion } from '../../components/services';\nimport { useTimeStart } from '../../context/timeListenerContext';\nimport { setSelectedPacketToPlayer } from '../services';\nimport { sendCorrectAnswer } from '../../components/services';\nimport { useHost } from '../../context/hostContext';\n// const topics = [\n//     { name: \"Xuân\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\n//     { name: \"Hạ\", questions: [\"Question 2.1\", \"Question 2.2\", \"Question 2.3\", \"Question 2.4\", \"Question 2.5\", \"Question 2.6\", \"Question 2.7\", \"Question 2.8\", \"Question 2.9\", \"Question 2.10\", \"Question 2.11\", \"Question 2.12\", \"Question 2.13\", \"Question 2.14\", \"Question 2.15\"] },\n//     { name: \"Thu\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\n//     { name: \"Đông\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionBoxRound3 = ({\n  isHost = false\n}) => {\n  _s();\n  const [topics, setTopics] = useState([]);\n  const [correctAnswer, setCorrectAnswer] = useState(\"\");\n  //const [selectedTopic, setSelectedTopic] = useState<string | null>(null);\n  const [hiddenTopics, setHiddenTopics] = useState([]);\n  // const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const {\n    selectedTopic,\n    setSelectedTopic,\n    currentQuestion,\n    setCurrentQuestion\n  } = usePlayer();\n  const {\n    currentQuestionIndex,\n    setCurrentQuestionIndex\n  } = useHost();\n  const [searchParams] = useSearchParams();\n  const testName = searchParams.get(\"testName\") || \"\";\n  const roomId = searchParams.get(\"roomId\") || \"\";\n  const isFirstMounted = useRef(true);\n  const {\n    timeLeft,\n    startTimer\n  } = useTimeStart();\n  const salt = \"HTMNBK2025\";\n  function decodeQuestion(encoded) {\n    // Decode base64 to bytes\n    const binaryString = atob(encoded);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n\n    // Convert bytes to UTF-8 string\n    const decoded = new TextDecoder(\"utf-8\").decode(bytes);\n\n    // Check for tampering\n    if (!decoded.startsWith(salt)) throw new Error(\"Tampered data!\");\n    return decoded.slice(salt.length);\n  }\n  useEffect(() => {\n    const unsubscribePlayers = listenToAnswers(roomId, answer => {\n      setCorrectAnswer(`Đáp án: ${answer}`);\n      const timeOut = setTimeout(() => {\n        setCorrectAnswer(\"\");\n      }, 1000);\n      console.log(\"answer\", answer);\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    if (!selectedTopic) return;\n\n    // Start timer when selectedTopic changes\n    startTimer(30);\n\n    // Side effects based on timer reaching 0\n  }, []);\n  useEffect(() => {\n    console.log(\"timeLeft\", timeLeft);\n    if (timeLeft === 0) {\n      // When timer runs out, do your clean up / game logic:\n      if (isHost) {\n        setCurrentPacketQuestion(roomId, 0);\n        sendCorrectAnswer(roomId, \"\");\n      }\n      setCurrentQuestion(\"\");\n      setCorrectAnswer(\"\");\n      setSelectedTopic(null);\n      localStorage.removeItem(\"questions\");\n\n      // If you want to reset timer, call startTimer again here or leave stopped\n    }\n  }, [timeLeft]);\n  useEffect(() => {\n    if (!isHost) return;\n    const getTopic = async () => {\n      const topics = await getPacketNames(testName, roomId);\n      setTopics(topics);\n    };\n    getTopic();\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToPackets(roomId, packets => {\n      console.log(\"packets\", packets);\n      setTopics(packets);\n      // setSelectedTopic(packets)\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToQuestions(roomId, questions => {\n      console.log(\"questions\", questions);\n      if (!isHost && questions.length > 0) {\n        setSelectedTopic(questions[0].packetName);\n        localStorage.setItem(\"questions\", JSON.stringify(questions));\n      }\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToCurrentQuestionsNumber(roomId, questionNumber => {\n      console.log(\"questionNumber outside\", questionNumber);\n      if (localStorage.getItem(\"questions\")) {\n        const question = JSON.parse(localStorage.getItem(\"questions\") || \"\")[questionNumber - 1];\n        if (question) {\n          console.log(\"decodeQuestion(question.question)\", decodeQuestion(question.question));\n          const timeOut = setTimeout(() => {\n            setCurrentQuestion(decodeQuestion(question.question));\n          }, 1000);\n          if (questionNumber === 12) {\n            {\n              console.log(\"questionNumber inside\", questionNumber);\n              setCurrentPacketQuestion(roomId, 0);\n              setCurrentQuestion(\"\");\n              setSelectedTopic(null);\n              setCorrectAnswer(\"\");\n              localStorage.removeItem(\"questions\");\n            }\n          }\n        }\n      }\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  const handleTopicSelect = async topic => {\n    console.log(\"topic\", topic);\n    if (isHost) {\n      const questions = await setSelectedPacketToPlayer(roomId, topic, testName);\n      localStorage.setItem(\"questions\", JSON.stringify(questions));\n    }\n    if (!isHost) return; // Non-host users cannot select topics\n    setSelectedTopic(topic);\n    setHiddenTopics(prev => [...prev, topic]); // Add the selected topic to the hidden list\n    setCurrentQuestionIndex(0);\n  };\n\n  // useEffect(() => {\n  //     if (selectedTopic && timeLeft > 0) {\n  //         const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n  //         return () => clearTimeout(timer);\n  //     } else if (timeLeft === 0 && isHost) {\n  //         // Automatically navigate back for hosts\n  //         const resetTimer = setTimeout(() => {\n  //             setSelectedTopic(null);\n  //         }, 3000);\n  //         return () => clearTimeout(resetTimer);\n  //     }\n  // }, [timeLeft, selectedTopic, isHost]);\n\n  const handleHostCommand = () => {\n    if (!isHost) return; // Non-host users cannot change questions\n    setCurrentQuestionIndex(prevIndex => prevIndex < 14 ? prevIndex + 1 : prevIndex);\n  };\n\n  //const currentQuestions = topics.find((topic) => topic.name === selectedTopic)?.questions;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center\",\n    children: !selectedTopic ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-4 gap-4\",\n      children: topics.filter(topic => !hiddenTopics.includes(topic)) // Hide already chosen topics\n      .map(topic => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `bg-blue-500 text-white p-2 rounded-lg shadow-md hover:bg-blue-700 ${!isHost ? \"cursor-not-allowed opacity-50\" : \"\"}`,\n        onClick: () => handleTopicSelect(topic),\n        disabled: !isHost // Disable for non-host users\n        ,\n        children: topic\n      }, topic, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 29\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold\",\n        children: selectedTopic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg mt-2\",\n          children: currentQuestion ? currentQuestion : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg mt-2\",\n          children: correctAnswer ? correctAnswer : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }, this), isHost && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-4 bg-green-500 text-white p-2 rounded-lg\",\n        onClick: handleHostCommand,\n        children: \"Show Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this);\n};\n\n// const Round3: React.FC<RoundBase> = ({ isHost }) => {\n//     return (\n//         <Play\n//             questionComponent={<QuestionComponent isHost={isHost}/>}\n//             isHost={isHost}\n//         />\n//     );\n// }\n_s(QuestionBoxRound3, \"Dbn0ELg3GzW/ZMy8EShsmbhwkQo=\", false, function () {\n  return [usePlayer, useHost, useSearchParams, useTimeStart];\n});\n_c = QuestionBoxRound3;\nexport default QuestionBoxRound3;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound3\");","map":{"version":3,"names":["React","useState","useEffect","useRef","getPacketNames","useSearchParams","listenToPackets","listenToQuestions","listenToCurrentQuestionsNumber","listenToAnswers","usePlayer","setCurrentPacketQuestion","useTimeStart","setSelectedPacketToPlayer","sendCorrectAnswer","useHost","jsxDEV","_jsxDEV","QuestionBoxRound3","isHost","_s","topics","setTopics","correctAnswer","setCorrectAnswer","hiddenTopics","setHiddenTopics","selectedTopic","setSelectedTopic","currentQuestion","setCurrentQuestion","currentQuestionIndex","setCurrentQuestionIndex","searchParams","testName","get","roomId","isFirstMounted","timeLeft","startTimer","salt","decodeQuestion","encoded","binaryString","atob","bytes","Uint8Array","length","i","charCodeAt","decoded","TextDecoder","decode","startsWith","Error","slice","unsubscribePlayers","answer","timeOut","setTimeout","console","log","localStorage","removeItem","getTopic","packets","questions","packetName","setItem","JSON","stringify","questionNumber","getItem","question","parse","handleTopicSelect","topic","prev","handleHostCommand","prevIndex","className","children","filter","includes","map","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round3.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Play from '../Play';\r\nimport { RoundBase } from '../../type';\r\nimport { getPacketNames } from '../../components/services';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { listenToPackets, listenToQuestions, listenToCurrentQuestionsNumber, listenToTimeStart, listenToAnswers } from '../../services/firebaseServices';\r\nimport { usePlayer } from '../../context/playerContext';\r\nimport { setCurrentPacketQuestion } from '../../components/services';\r\nimport { useTimeStart } from '../../context/timeListenerContext';\r\nimport { setSelectedPacketToPlayer } from '../services';\r\nimport { sendCorrectAnswer } from '../../components/services';\r\nimport { useHost } from '../../context/hostContext';\r\n// const topics = [\r\n//     { name: \"Xuân\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\r\n//     { name: \"Hạ\", questions: [\"Question 2.1\", \"Question 2.2\", \"Question 2.3\", \"Question 2.4\", \"Question 2.5\", \"Question 2.6\", \"Question 2.7\", \"Question 2.8\", \"Question 2.9\", \"Question 2.10\", \"Question 2.11\", \"Question 2.12\", \"Question 2.13\", \"Question 2.14\", \"Question 2.15\"] },\r\n//     { name: \"Thu\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\r\n//     { name: \"Đông\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\r\n// ];\r\n\r\ninterface QuestionComponentProps {\r\n    isHost?: boolean; // Determines if the user is a host or not\r\n}\r\n\r\n\r\n\r\nconst QuestionBoxRound3: React.FC<QuestionComponentProps> = ({ isHost = false }) => {\r\n    const [topics, setTopics] = useState<string[]>([]);\r\n    const [correctAnswer, setCorrectAnswer] = useState<string>(\"\")\r\n    //const [selectedTopic, setSelectedTopic] = useState<string | null>(null);\r\n    const [hiddenTopics, setHiddenTopics] = useState<string[]>([]);\r\n    // const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const { selectedTopic, setSelectedTopic, currentQuestion, setCurrentQuestion } = usePlayer()\r\n    const {currentQuestionIndex, setCurrentQuestionIndex} = useHost()\r\n    const [searchParams] = useSearchParams()\r\n    const testName = searchParams.get(\"testName\") || \"\"\r\n    const roomId = searchParams.get(\"roomId\") || \"\"\r\n    const isFirstMounted = useRef(true)\r\n    const { timeLeft, startTimer } = useTimeStart();\r\n    const salt = \"HTMNBK2025\";\r\n    function decodeQuestion(encoded: string): string {\r\n        // Decode base64 to bytes\r\n        const binaryString = atob(encoded);\r\n        const bytes = new Uint8Array(binaryString.length);\r\n        for (let i = 0; i < binaryString.length; i++) {\r\n            bytes[i] = binaryString.charCodeAt(i);\r\n        }\r\n\r\n        // Convert bytes to UTF-8 string\r\n        const decoded = new TextDecoder(\"utf-8\").decode(bytes);\r\n\r\n        // Check for tampering\r\n        if (!decoded.startsWith(salt)) throw new Error(\"Tampered data!\");\r\n\r\n        return decoded.slice(salt.length);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToAnswers(roomId, (answer) => {\r\n            setCorrectAnswer(`Đáp án: ${answer}`)\r\n            const timeOut = setTimeout(() => {\r\n                setCorrectAnswer(\"\")\r\n            }, 1000)\r\n            console.log(\"answer\", answer)\r\n        });\r\n\r\n        // No need to set state here; it's handled by useState initializer\r\n        return () => {\r\n            unsubscribePlayers();\r\n\r\n        };\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!selectedTopic) return;\r\n\r\n        // Start timer when selectedTopic changes\r\n        startTimer(30);\r\n\r\n        // Side effects based on timer reaching 0\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log(\"timeLeft\", timeLeft);\r\n\r\n        if (timeLeft === 0) {\r\n            // When timer runs out, do your clean up / game logic:\r\n            if (isHost) {\r\n                setCurrentPacketQuestion(roomId, 0);\r\n                sendCorrectAnswer(roomId,\"\")\r\n            }\r\n            setCurrentQuestion(\"\");\r\n            setCorrectAnswer(\"\")\r\n            setSelectedTopic(null);\r\n            localStorage.removeItem(\"questions\");\r\n\r\n            // If you want to reset timer, call startTimer again here or leave stopped\r\n        }\r\n    }, [timeLeft]);\r\n\r\n    useEffect(() => {\r\n        if (!isHost) return\r\n        const getTopic = async () => {\r\n            const topics = await getPacketNames(testName, roomId)\r\n            setTopics(topics)\r\n        }\r\n\r\n        getTopic()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const unsubscribePlayers = listenToPackets(roomId, (packets) => {\r\n            console.log(\"packets\", packets);\r\n\r\n            setTopics(packets)\r\n            // setSelectedTopic(packets)\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToQuestions(roomId, (questions) => {\r\n            console.log(\"questions\", questions);\r\n\r\n            if (!isHost && questions.length > 0) {\r\n                setSelectedTopic(questions[0].packetName)\r\n                localStorage.setItem(\"questions\", JSON.stringify(questions))\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToCurrentQuestionsNumber(roomId, (questionNumber) => {\r\n            console.log(\"questionNumber outside\", questionNumber);\r\n            if (localStorage.getItem(\"questions\")) {\r\n                const question = JSON.parse(localStorage.getItem(\"questions\") || \"\")[questionNumber - 1]\r\n                if (question) {\r\n                    console.log(\"decodeQuestion(question.question)\", decodeQuestion(question.question));\r\n\r\n                    const timeOut = setTimeout(() => {\r\n                        setCurrentQuestion(decodeQuestion(question.question))\r\n                    }, 1000)\r\n\r\n\r\n\r\n                    if (questionNumber === 12) {\r\n                        {\r\n                            console.log(\"questionNumber inside\", questionNumber);\r\n                            setCurrentPacketQuestion(roomId, 0)\r\n                            setCurrentQuestion(\"\")\r\n                            setSelectedTopic(null)\r\n                            setCorrectAnswer(\"\")\r\n                            localStorage.removeItem(\"questions\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    const handleTopicSelect = async (topic: string) => {\r\n        console.log(\"topic\", topic);\r\n        if (isHost) {\r\n            const questions = await setSelectedPacketToPlayer(roomId, topic, testName)\r\n            localStorage.setItem(\"questions\", JSON.stringify(questions))\r\n        }\r\n        if (!isHost) return; // Non-host users cannot select topics\r\n        setSelectedTopic(topic);\r\n        setHiddenTopics((prev) => [...prev, topic]); // Add the selected topic to the hidden list\r\n        setCurrentQuestionIndex(0);\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     if (selectedTopic && timeLeft > 0) {\r\n    //         const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n    //         return () => clearTimeout(timer);\r\n    //     } else if (timeLeft === 0 && isHost) {\r\n    //         // Automatically navigate back for hosts\r\n    //         const resetTimer = setTimeout(() => {\r\n    //             setSelectedTopic(null);\r\n    //         }, 3000);\r\n    //         return () => clearTimeout(resetTimer);\r\n    //     }\r\n    // }, [timeLeft, selectedTopic, isHost]);\r\n\r\n    const handleHostCommand = () => {\r\n        if (!isHost) return; // Non-host users cannot change questions\r\n        setCurrentQuestionIndex((prevIndex) =>\r\n            prevIndex < 14 ? prevIndex + 1 : prevIndex\r\n        );\r\n    };\r\n\r\n    //const currentQuestions = topics.find((topic) => topic.name === selectedTopic)?.questions;\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center\">\r\n            {!selectedTopic ? (\r\n                <div className=\"grid grid-cols-4 gap-4\">\r\n                    {topics\r\n                        .filter((topic) => !hiddenTopics.includes(topic)) // Hide already chosen topics\r\n                        .map((topic) => (\r\n                            <button\r\n                                key={topic}\r\n                                className={`bg-blue-500 text-white p-2 rounded-lg shadow-md hover:bg-blue-700 ${!isHost ? \"cursor-not-allowed opacity-50\" : \"\"\r\n                                    }`}\r\n                                onClick={() => handleTopicSelect(topic)}\r\n                                disabled={!isHost} // Disable for non-host users\r\n                            >\r\n                                {topic}\r\n                            </button>\r\n                        ))}\r\n                </div>\r\n            ) : (\r\n                <div className=\"w-full text-center\">\r\n                    <h2 className=\"text-xl font-bold\">{selectedTopic}</h2>\r\n                    <div className=\"my-4\">\r\n                        <p className=\"text-lg mt-2\">\r\n                            {currentQuestion ? currentQuestion : \"\"}\r\n                        </p>\r\n                        <p className=\"text-lg mt-2\">\r\n                            {correctAnswer ? correctAnswer : \"\"}\r\n                        </p>\r\n                    </div>\r\n                    {/* Simulated host control button for testing */}\r\n                    {isHost && (\r\n                        <button\r\n                            className=\"mt-4 bg-green-500 text-white p-2 rounded-lg\"\r\n                            onClick={handleHostCommand}\r\n                        >\r\n                            Show Next Question\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// const Round3: React.FC<RoundBase> = ({ isHost }) => {\r\n//     return (\r\n//         <Play\r\n//             questionComponent={<QuestionComponent isHost={isHost}/>}\r\n//             isHost={isHost}\r\n//         />\r\n//     );\r\n// }\r\n\r\nexport default QuestionBoxRound3"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAG1D,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,eAAe,QAAQ,kBAAkB;AAClD,SAASC,eAAe,EAAEC,iBAAiB,EAAEC,8BAA8B,EAAqBC,eAAe,QAAQ,iCAAiC;AACxJ,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,wBAAwB,QAAQ,2BAA2B;AACpE,SAASC,YAAY,QAAQ,mCAAmC;AAChE,SAASC,yBAAyB,QAAQ,aAAa;AACvD,SAASC,iBAAiB,QAAQ,2BAA2B;AAC7D,SAASC,OAAO,QAAQ,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQA,MAAMC,iBAAmD,GAAGA,CAAC;EAAEC,MAAM,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EAChF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGrB,QAAQ,CAAW,EAAE,CAAC;EAClD,MAAM,CAACsB,aAAa,EAAEC,gBAAgB,CAAC,GAAGvB,QAAQ,CAAS,EAAE,CAAC;EAC9D;EACA,MAAM,CAACwB,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAW,EAAE,CAAC;EAC9D;EACA,MAAM;IAAE0B,aAAa;IAAEC,gBAAgB;IAAEC,eAAe;IAAEC;EAAmB,CAAC,GAAGpB,SAAS,CAAC,CAAC;EAC5F,MAAM;IAACqB,oBAAoB;IAAEC;EAAuB,CAAC,GAAGjB,OAAO,CAAC,CAAC;EACjE,MAAM,CAACkB,YAAY,CAAC,GAAG5B,eAAe,CAAC,CAAC;EACxC,MAAM6B,QAAQ,GAAGD,YAAY,CAACE,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE;EACnD,MAAMC,MAAM,GAAGH,YAAY,CAACE,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE;EAC/C,MAAME,cAAc,GAAGlC,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM;IAAEmC,QAAQ;IAAEC;EAAW,CAAC,GAAG3B,YAAY,CAAC,CAAC;EAC/C,MAAM4B,IAAI,GAAG,YAAY;EACzB,SAASC,cAAcA,CAACC,OAAe,EAAU;IAC7C;IACA,MAAMC,YAAY,GAAGC,IAAI,CAACF,OAAO,CAAC;IAClC,MAAMG,KAAK,GAAG,IAAIC,UAAU,CAACH,YAAY,CAACI,MAAM,CAAC;IACjD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,YAAY,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC1CH,KAAK,CAACG,CAAC,CAAC,GAAGL,YAAY,CAACM,UAAU,CAACD,CAAC,CAAC;IACzC;;IAEA;IACA,MAAME,OAAO,GAAG,IAAIC,WAAW,CAAC,OAAO,CAAC,CAACC,MAAM,CAACP,KAAK,CAAC;;IAEtD;IACA,IAAI,CAACK,OAAO,CAACG,UAAU,CAACb,IAAI,CAAC,EAAE,MAAM,IAAIc,KAAK,CAAC,gBAAgB,CAAC;IAEhE,OAAOJ,OAAO,CAACK,KAAK,CAACf,IAAI,CAACO,MAAM,CAAC;EACrC;EAEA7C,SAAS,CAAC,MAAM;IAEZ,MAAMsD,kBAAkB,GAAG/C,eAAe,CAAC2B,MAAM,EAAGqB,MAAM,IAAK;MAC3DjC,gBAAgB,CAAC,WAAWiC,MAAM,EAAE,CAAC;MACrC,MAAMC,OAAO,GAAGC,UAAU,CAAC,MAAM;QAC7BnC,gBAAgB,CAAC,EAAE,CAAC;MACxB,CAAC,EAAE,IAAI,CAAC;MACRoC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEJ,MAAM,CAAC;IACjC,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACTD,kBAAkB,CAAC,CAAC;IAExB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAGNtD,SAAS,CAAC,MAAM;IACZ,IAAI,CAACyB,aAAa,EAAE;;IAEpB;IACAY,UAAU,CAAC,EAAE,CAAC;;IAEd;EACJ,CAAC,EAAE,EAAE,CAAC;EAENrC,SAAS,CAAC,MAAM;IACZ0D,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEvB,QAAQ,CAAC;IAEjC,IAAIA,QAAQ,KAAK,CAAC,EAAE;MAChB;MACA,IAAInB,MAAM,EAAE;QACRR,wBAAwB,CAACyB,MAAM,EAAE,CAAC,CAAC;QACnCtB,iBAAiB,CAACsB,MAAM,EAAC,EAAE,CAAC;MAChC;MACAN,kBAAkB,CAAC,EAAE,CAAC;MACtBN,gBAAgB,CAAC,EAAE,CAAC;MACpBI,gBAAgB,CAAC,IAAI,CAAC;MACtBkC,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;;MAEpC;IACJ;EACJ,CAAC,EAAE,CAACzB,QAAQ,CAAC,CAAC;EAEdpC,SAAS,CAAC,MAAM;IACZ,IAAI,CAACiB,MAAM,EAAE;IACb,MAAM6C,QAAQ,GAAG,MAAAA,CAAA,KAAY;MACzB,MAAM3C,MAAM,GAAG,MAAMjB,cAAc,CAAC8B,QAAQ,EAAEE,MAAM,CAAC;MACrDd,SAAS,CAACD,MAAM,CAAC;IACrB,CAAC;IAED2C,QAAQ,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN9D,SAAS,CAAC,MAAM;IACZ,MAAMsD,kBAAkB,GAAGlD,eAAe,CAAC8B,MAAM,EAAG6B,OAAO,IAAK;MAC5DL,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEI,OAAO,CAAC;MAE/B3C,SAAS,CAAC2C,OAAO,CAAC;MAClB;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACTT,kBAAkB,CAAC,CAAC;IACxB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAENtD,SAAS,CAAC,MAAM;IAEZ,MAAMsD,kBAAkB,GAAGjD,iBAAiB,CAAC6B,MAAM,EAAG8B,SAAS,IAAK;MAChEN,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEK,SAAS,CAAC;MAEnC,IAAI,CAAC/C,MAAM,IAAI+C,SAAS,CAACnB,MAAM,GAAG,CAAC,EAAE;QACjCnB,gBAAgB,CAACsC,SAAS,CAAC,CAAC,CAAC,CAACC,UAAU,CAAC;QACzCL,YAAY,CAACM,OAAO,CAAC,WAAW,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC,CAAC;MAChE;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACTV,kBAAkB,CAAC,CAAC;IACxB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAENtD,SAAS,CAAC,MAAM;IAEZ,MAAMsD,kBAAkB,GAAGhD,8BAA8B,CAAC4B,MAAM,EAAGmC,cAAc,IAAK;MAClFX,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEU,cAAc,CAAC;MACrD,IAAIT,YAAY,CAACU,OAAO,CAAC,WAAW,CAAC,EAAE;QACnC,MAAMC,QAAQ,GAAGJ,IAAI,CAACK,KAAK,CAACZ,YAAY,CAACU,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAACD,cAAc,GAAG,CAAC,CAAC;QACxF,IAAIE,QAAQ,EAAE;UACVb,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEpB,cAAc,CAACgC,QAAQ,CAACA,QAAQ,CAAC,CAAC;UAEnF,MAAMf,OAAO,GAAGC,UAAU,CAAC,MAAM;YAC7B7B,kBAAkB,CAACW,cAAc,CAACgC,QAAQ,CAACA,QAAQ,CAAC,CAAC;UACzD,CAAC,EAAE,IAAI,CAAC;UAIR,IAAIF,cAAc,KAAK,EAAE,EAAE;YACvB;cACIX,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEU,cAAc,CAAC;cACpD5D,wBAAwB,CAACyB,MAAM,EAAE,CAAC,CAAC;cACnCN,kBAAkB,CAAC,EAAE,CAAC;cACtBF,gBAAgB,CAAC,IAAI,CAAC;cACtBJ,gBAAgB,CAAC,EAAE,CAAC;cACpBsC,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;YACxC;UACJ;QACJ;MACJ;IACJ,CAAC,CAAC;IAEF,OAAO,MAAM;MACTP,kBAAkB,CAAC,CAAC;IACxB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMmB,iBAAiB,GAAG,MAAOC,KAAa,IAAK;IAC/ChB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEe,KAAK,CAAC;IAC3B,IAAIzD,MAAM,EAAE;MACR,MAAM+C,SAAS,GAAG,MAAMrD,yBAAyB,CAACuB,MAAM,EAAEwC,KAAK,EAAE1C,QAAQ,CAAC;MAC1E4B,YAAY,CAACM,OAAO,CAAC,WAAW,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC,CAAC;IAChE;IACA,IAAI,CAAC/C,MAAM,EAAE,OAAO,CAAC;IACrBS,gBAAgB,CAACgD,KAAK,CAAC;IACvBlD,eAAe,CAAEmD,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7C5C,uBAAuB,CAAC,CAAC,CAAC;EAC9B,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM8C,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAAC3D,MAAM,EAAE,OAAO,CAAC;IACrBa,uBAAuB,CAAE+C,SAAS,IAC9BA,SAAS,GAAG,EAAE,GAAGA,SAAS,GAAG,CAAC,GAAGA,SACrC,CAAC;EACL,CAAC;;EAED;;EAEA,oBACI9D,OAAA;IAAK+D,SAAS,EAAC,4BAA4B;IAAAC,QAAA,EACtC,CAACtD,aAAa,gBACXV,OAAA;MAAK+D,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EAClC5D,MAAM,CACF6D,MAAM,CAAEN,KAAK,IAAK,CAACnD,YAAY,CAAC0D,QAAQ,CAACP,KAAK,CAAC,CAAC,CAAC;MAAA,CACjDQ,GAAG,CAAER,KAAK,iBACP3D,OAAA;QAEI+D,SAAS,EAAE,qEAAqE,CAAC7D,MAAM,GAAG,+BAA+B,GAAG,EAAE,EACvH;QACPkE,OAAO,EAAEA,CAAA,KAAMV,iBAAiB,CAACC,KAAK,CAAE;QACxCU,QAAQ,EAAE,CAACnE,MAAO,CAAC;QAAA;QAAA8D,QAAA,EAElBL;MAAK,GANDA,KAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAON,CACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,gBAENzE,OAAA;MAAK+D,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBAC/BhE,OAAA;QAAI+D,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAAEtD;MAAa;QAAA4D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACtDzE,OAAA;QAAK+D,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACjBhE,OAAA;UAAG+D,SAAS,EAAC,cAAc;UAAAC,QAAA,EACtBpD,eAAe,GAAGA,eAAe,GAAG;QAAE;UAAA0D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CAAC,eACJzE,OAAA;UAAG+D,SAAS,EAAC,cAAc;UAAAC,QAAA,EACtB1D,aAAa,GAAGA,aAAa,GAAG;QAAE;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAELvE,MAAM,iBACHF,OAAA;QACI+D,SAAS,EAAC,6CAA6C;QACvDK,OAAO,EAAEP,iBAAkB;QAAAG,QAAA,EAC9B;MAED;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACX;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EACR;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAtE,EAAA,CA3OMF,iBAAmD;EAAA,QAM4BR,SAAS,EAClCK,OAAO,EACxCV,eAAe,EAILO,YAAY;AAAA;AAAA+E,EAAA,GAZ3CzE,iBAAmD;AA6OzD,eAAeA,iBAAiB;AAAA,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}