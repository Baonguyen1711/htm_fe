{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round3.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { getPacketNames } from '../../components/services';\nimport { useSearchParams } from 'react-router-dom';\nimport { listenToPackets, listenToQuestions, listenToCurrentQuestionsNumber, listenToTimeStart } from '../../services/firebaseServices';\nimport { usePlayer } from '../../context/playerContext';\nimport { setCurrentPacketQuestion } from '../../components/services';\n// const topics = [\n//     { name: \"Xuân\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\n//     { name: \"Hạ\", questions: [\"Question 2.1\", \"Question 2.2\", \"Question 2.3\", \"Question 2.4\", \"Question 2.5\", \"Question 2.6\", \"Question 2.7\", \"Question 2.8\", \"Question 2.9\", \"Question 2.10\", \"Question 2.11\", \"Question 2.12\", \"Question 2.13\", \"Question 2.14\", \"Question 2.15\"] },\n//     { name: \"Thu\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\n//     { name: \"Đông\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionBoxRound3 = ({\n  isHost = false\n}) => {\n  _s();\n  const [topics, setTopics] = useState([]);\n  //const [selectedTopic, setSelectedTopic] = useState<string | null>(null);\n  const [hiddenTopics, setHiddenTopics] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [currentQuestion, setCurrentQuestion] = useState(\"\");\n  const [timeLeft, setTimeLeft] = useState(60);\n  const {\n    selectedTopic,\n    setSelectedTopic\n  } = usePlayer();\n  const [searchParams] = useSearchParams();\n  const testName = searchParams.get(\"testName\") || \"\";\n  const roomId = searchParams.get(\"roomId\") || \"\";\n  const isFirstMounted = useRef(true);\n  const startTimer = () => {\n    let timer;\n    timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          setSelectedTopic(null);\n          return 30;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(timer);\n  };\n  useEffect(() => {\n    let timerCleanup;\n    let unsubscribeTimeStart;\n    //console.log(\"isMounted.current\")\n    unsubscribeTimeStart = listenToTimeStart(roomId, startTimer);\n    // if (isMounted.current && startedListening) {\n    //     console.log(\"isMounted.current\")\n    //     try {\n\n    //     } catch (error) {\n    //         console.error(\"Error in listenToTimeStart:\", error);\n    //     }\n    // } else {\n    //     console.log(\"not isMounted.current\")\n    //     isMounted.current = true;\n    //     setStartedListening(true)\n    // }\n\n    return () => {\n      if (unsubscribeTimeStart) unsubscribeTimeStart();\n      if (timerCleanup) timerCleanup();\n    };\n  }, []);\n  useEffect(() => {\n    if (!isHost) return;\n    const getTopic = async () => {\n      const topics = await getPacketNames(testName, roomId);\n      setTopics(topics);\n    };\n    getTopic();\n  }, []);\n  useEffect(() => {\n    if (isHost) return;\n    const unsubscribePlayers = listenToPackets(roomId, packets => {\n      setTopics(packets);\n      setSelectedTopic(packets);\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    if (isHost) return;\n    const unsubscribePlayers = listenToQuestions(roomId, data => {\n      console.log(\"questions\", data);\n      if (!data.questions) return;\n      if (!localStorage.getItem(\"questions\")) {\n        const questions = [...data.questions];\n        localStorage.setItem(\"questions\", JSON.stringify(questions));\n      } else {\n        const questions = [...JSON.parse(localStorage.getItem(\"questions\") || \"\"), ...data.questions];\n        localStorage.setItem(\"questions\", JSON.stringify(questions));\n      }\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToCurrentQuestionsNumber(roomId, questionNumber => {\n      console.log(\"questionNumber outside\", questionNumber);\n      if (localStorage.getItem(\"questions\")) {\n        const question = JSON.parse(localStorage.getItem(\"questions\") || \"\")[questionNumber - 1];\n        if (question) {\n          setCurrentQuestion(question.question);\n          if (questionNumber === 12) {\n            {\n              console.log(\"questionNumber inside\", questionNumber);\n              setCurrentPacketQuestion(roomId, 1);\n              setCurrentQuestion(\"\");\n              localStorage.removeItem(\"questions\");\n            }\n          }\n        }\n      }\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  const handleTopicSelect = topic => {\n    if (!isHost) return; // Non-host users cannot select topics\n    setSelectedTopic(topic);\n    setHiddenTopics(prev => [...prev, topic]); // Add the selected topic to the hidden list\n    setCurrentQuestionIndex(0);\n  };\n\n  // useEffect(() => {\n  //     if (selectedTopic && timeLeft > 0) {\n  //         const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n  //         return () => clearTimeout(timer);\n  //     } else if (timeLeft === 0 && isHost) {\n  //         // Automatically navigate back for hosts\n  //         const resetTimer = setTimeout(() => {\n  //             setSelectedTopic(null);\n  //         }, 3000);\n  //         return () => clearTimeout(resetTimer);\n  //     }\n  // }, [timeLeft, selectedTopic, isHost]);\n\n  const handleHostCommand = () => {\n    if (!isHost) return; // Non-host users cannot change questions\n    setCurrentQuestionIndex(prevIndex => prevIndex < 14 ? prevIndex + 1 : prevIndex);\n  };\n\n  //const currentQuestions = topics.find((topic) => topic.name === selectedTopic)?.questions;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center\",\n    children: !selectedTopic ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-4 gap-4\",\n      children: topics.filter(topic => !hiddenTopics.includes(topic)) // Hide already chosen topics\n      .map(topic => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `bg-blue-500 text-white p-2 rounded-lg shadow-md hover:bg-blue-700 ${!isHost ? \"cursor-not-allowed opacity-50\" : \"\"}`,\n        onClick: () => handleTopicSelect(topic),\n        disabled: !isHost // Disable for non-host users\n        ,\n        children: topic\n      }, topic, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 29\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold\",\n        children: selectedTopic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg\",\n          children: [\"Time Left: \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: [timeLeft, \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 40\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg mt-2\",\n          children: currentQuestion ? currentQuestion : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this), isHost && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-4 bg-green-500 text-white p-2 rounded-lg\",\n        onClick: handleHostCommand,\n        children: \"Show Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n};\n\n// const Round3: React.FC<RoundBase> = ({ isHost }) => {\n//     return (\n//         <Play\n//             questionComponent={<QuestionComponent isHost={isHost}/>}\n//             isHost={isHost}\n//         />\n//     );\n// }\n_s(QuestionBoxRound3, \"xt3LSbzw1q90HzpqhVsaZvCur6g=\", false, function () {\n  return [usePlayer, useSearchParams];\n});\n_c = QuestionBoxRound3;\nexport default QuestionBoxRound3;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound3\");","map":{"version":3,"names":["React","useState","useEffect","useRef","getPacketNames","useSearchParams","listenToPackets","listenToQuestions","listenToCurrentQuestionsNumber","listenToTimeStart","usePlayer","setCurrentPacketQuestion","jsxDEV","_jsxDEV","QuestionBoxRound3","isHost","_s","topics","setTopics","hiddenTopics","setHiddenTopics","currentQuestionIndex","setCurrentQuestionIndex","currentQuestion","setCurrentQuestion","timeLeft","setTimeLeft","selectedTopic","setSelectedTopic","searchParams","testName","get","roomId","isFirstMounted","startTimer","timer","setInterval","prev","clearInterval","timerCleanup","unsubscribeTimeStart","getTopic","unsubscribePlayers","packets","data","console","log","questions","localStorage","getItem","setItem","JSON","stringify","parse","questionNumber","question","removeItem","handleTopicSelect","topic","handleHostCommand","prevIndex","className","children","filter","includes","map","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round3.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Play from '../Play';\r\nimport { RoundBase } from '../../type';\r\nimport { getPacketNames } from '../../components/services';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { listenToPackets, listenToQuestions, listenToCurrentQuestionsNumber, listenToTimeStart } from '../../services/firebaseServices';\r\nimport { usePlayer } from '../../context/playerContext';\r\nimport { setCurrentPacketQuestion } from '../../components/services';\r\n// const topics = [\r\n//     { name: \"Xuân\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\r\n//     { name: \"Hạ\", questions: [\"Question 2.1\", \"Question 2.2\", \"Question 2.3\", \"Question 2.4\", \"Question 2.5\", \"Question 2.6\", \"Question 2.7\", \"Question 2.8\", \"Question 2.9\", \"Question 2.10\", \"Question 2.11\", \"Question 2.12\", \"Question 2.13\", \"Question 2.14\", \"Question 2.15\"] },\r\n//     { name: \"Thu\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\r\n//     { name: \"Đông\", questions: [\"Question 1.1\", \"Question 1.2\", \"Question 1.3\", \"Question 1.4\", \"Question 1.5\", \"Question 1.6\", \"Question 1.7\", \"Question 1.8\", \"Question 1.9\", \"Question 1.10\", \"Question 1.11\", \"Question 1.12\", \"Question 1.13\", \"Question 1.14\", \"Question 1.15\"] },\r\n// ];\r\n\r\ninterface QuestionComponentProps {\r\n    isHost?: boolean; // Determines if the user is a host or not\r\n}\r\n\r\n\r\n\r\nconst QuestionBoxRound3: React.FC<QuestionComponentProps> = ({ isHost = false }) => {\r\n    const [topics, setTopics] = useState<string[]>([]);\r\n    //const [selectedTopic, setSelectedTopic] = useState<string | null>(null);\r\n    const [hiddenTopics, setHiddenTopics] = useState<string[]>([]);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [currentQuestion, setCurrentQuestion] = useState<string>(\"\")\r\n    const [timeLeft, setTimeLeft] = useState(60);\r\n    const { selectedTopic, setSelectedTopic } = usePlayer()\r\n    const [searchParams] = useSearchParams()\r\n    const testName = searchParams.get(\"testName\") || \"\"\r\n    const roomId = searchParams.get(\"roomId\") || \"\"\r\n    const isFirstMounted = useRef(true)\r\n\r\n    const startTimer = () => {\r\n        let timer: NodeJS.Timeout | undefined;\r\n\r\n        timer = setInterval(() => {\r\n            setTimeLeft(prev => {\r\n                if (prev <= 1) {\r\n                    clearInterval(timer!);\r\n                    setSelectedTopic(null)\r\n                    return 30;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(timer);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        let timerCleanup: (() => void) | undefined;\r\n        let unsubscribeTimeStart: (() => void) | undefined;\r\n        //console.log(\"isMounted.current\")\r\n        unsubscribeTimeStart = listenToTimeStart(roomId, startTimer);\r\n        // if (isMounted.current && startedListening) {\r\n        //     console.log(\"isMounted.current\")\r\n        //     try {\r\n\r\n        //     } catch (error) {\r\n        //         console.error(\"Error in listenToTimeStart:\", error);\r\n        //     }\r\n        // } else {\r\n        //     console.log(\"not isMounted.current\")\r\n        //     isMounted.current = true;\r\n        //     setStartedListening(true)\r\n        // }\r\n\r\n        return () => {\r\n            if (unsubscribeTimeStart) unsubscribeTimeStart();\r\n            if (timerCleanup) timerCleanup();\r\n        };\r\n    }, []);\r\n    useEffect(() => {\r\n        if (!isHost) return\r\n        const getTopic = async () => {\r\n            const topics = await getPacketNames(testName, roomId)\r\n            setTopics(topics)\r\n        }\r\n\r\n        getTopic()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (isHost) return\r\n        const unsubscribePlayers = listenToPackets(roomId, (packets) => {\r\n            setTopics(packets)\r\n            setSelectedTopic(packets)\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isHost) return\r\n\r\n        const unsubscribePlayers = listenToQuestions(roomId, (data) => {\r\n            console.log(\"questions\", data);\r\n            if (!data.questions) return\r\n\r\n            if (!localStorage.getItem(\"questions\")) {\r\n                const questions = [...data.questions]\r\n                localStorage.setItem(\"questions\", JSON.stringify(questions))\r\n            } else {\r\n                const questions = [...JSON.parse(localStorage.getItem(\"questions\") || \"\"), ...data.questions]\r\n                localStorage.setItem(\"questions\", JSON.stringify(questions))\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToCurrentQuestionsNumber(roomId, (questionNumber) => {\r\n            console.log(\"questionNumber outside\", questionNumber);\r\n            if (localStorage.getItem(\"questions\")) {\r\n                const question = JSON.parse(localStorage.getItem(\"questions\") || \"\")[questionNumber - 1]\r\n                if (question) {\r\n                    setCurrentQuestion(question.question)\r\n\r\n                    if (questionNumber === 12) {{\r\n                        console.log(\"questionNumber inside\", questionNumber);\r\n                        setCurrentPacketQuestion(roomId, 1)\r\n                        setCurrentQuestion(\"\")\r\n                        localStorage.removeItem(\"questions\")\r\n                    }}\r\n                }\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    const handleTopicSelect = (topic: string) => {\r\n        if (!isHost) return; // Non-host users cannot select topics\r\n        setSelectedTopic(topic);\r\n        setHiddenTopics((prev) => [...prev, topic]); // Add the selected topic to the hidden list\r\n        setCurrentQuestionIndex(0);\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     if (selectedTopic && timeLeft > 0) {\r\n    //         const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r\n    //         return () => clearTimeout(timer);\r\n    //     } else if (timeLeft === 0 && isHost) {\r\n    //         // Automatically navigate back for hosts\r\n    //         const resetTimer = setTimeout(() => {\r\n    //             setSelectedTopic(null);\r\n    //         }, 3000);\r\n    //         return () => clearTimeout(resetTimer);\r\n    //     }\r\n    // }, [timeLeft, selectedTopic, isHost]);\r\n\r\n    const handleHostCommand = () => {\r\n        if (!isHost) return; // Non-host users cannot change questions\r\n        setCurrentQuestionIndex((prevIndex) =>\r\n            prevIndex < 14 ? prevIndex + 1 : prevIndex\r\n        );\r\n    };\r\n\r\n    //const currentQuestions = topics.find((topic) => topic.name === selectedTopic)?.questions;\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center\">\r\n            {!selectedTopic ? (\r\n                <div className=\"grid grid-cols-4 gap-4\">\r\n                    {topics\r\n                        .filter((topic) => !hiddenTopics.includes(topic)) // Hide already chosen topics\r\n                        .map((topic) => (\r\n                            <button\r\n                                key={topic}\r\n                                className={`bg-blue-500 text-white p-2 rounded-lg shadow-md hover:bg-blue-700 ${!isHost ? \"cursor-not-allowed opacity-50\" : \"\"\r\n                                    }`}\r\n                                onClick={() => handleTopicSelect(topic)}\r\n                                disabled={!isHost} // Disable for non-host users\r\n                            >\r\n                                {topic}\r\n                            </button>\r\n                        ))}\r\n                </div>\r\n            ) : (\r\n                <div className=\"w-full text-center\">\r\n                    <h2 className=\"text-xl font-bold\">{selectedTopic}</h2>\r\n                    <div className=\"my-4\">\r\n                        <p className=\"text-lg\">\r\n                            Time Left: <b>{timeLeft}s</b>\r\n                        </p>\r\n                        <p className=\"text-lg mt-2\">\r\n                            {currentQuestion ? currentQuestion : \"\"}\r\n                        </p>\r\n                    </div>\r\n                    {/* Simulated host control button for testing */}\r\n                    {isHost && (\r\n                        <button\r\n                            className=\"mt-4 bg-green-500 text-white p-2 rounded-lg\"\r\n                            onClick={handleHostCommand}\r\n                        >\r\n                            Show Next Question\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// const Round3: React.FC<RoundBase> = ({ isHost }) => {\r\n//     return (\r\n//         <Play\r\n//             questionComponent={<QuestionComponent isHost={isHost}/>}\r\n//             isHost={isHost}\r\n//         />\r\n//     );\r\n// }\r\n\r\nexport default QuestionBoxRound3"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}