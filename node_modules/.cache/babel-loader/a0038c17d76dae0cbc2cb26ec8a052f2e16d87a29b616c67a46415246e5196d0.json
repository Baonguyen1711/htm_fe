{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\User\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport Play from \"../../layouts/Play\";\nimport React, { useState, useEffect } from \"react\";\nimport clsx from \"clsx\";\n\n// Từ khóa chướng ngại vật\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mainKeyword = \"BOCONGANH\";\nconst hintWords = [\"GIO\", \"HATGIONG\", \"DREAM\", \"THUOC\", \"CUC\", \"CHAUKIETLUAN\"];\nconst ObstacleQuestionBox = ({\n  mainKeyword,\n  hintWords\n}) => {\n  _s();\n  const [grid, setGrid] = useState({});\n  useEffect(() => {\n    const newGrid = {};\n    const sharedLetters = new Set(); // Các chữ cái chung giữa gợi ý & từ chính\n\n    // Đặt các từ gợi ý lên lưới\n    hintWords.forEach(({\n      word,\n      x,\n      y,\n      direction\n    }) => {\n      for (let i = 0; i < word.length; i++) {\n        const posX = direction === \"horizontal\" ? x + i : x;\n        const posY = direction === \"horizontal\" ? y : y + i;\n        const position = `${posX}-${posY}`;\n\n        // Kiểm tra nếu chữ cái này cũng có trong từ chướng ngại vật\n        const isShared = mainKeyword.includes(word[i]);\n        if (isShared) {\n          sharedLetters.add(word[i]);\n        }\n        newGrid[position] = {\n          letter: word[i],\n          revealed: false,\n          highlight: isShared\n        };\n      }\n    });\n    setGrid(newGrid);\n  }, [mainKeyword, hintWords]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Ch\\u01B0\\u1EDBng Ng\\u1EA1i V\\u1EADt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-10 gap-1 border border-gray-400 p-2\",\n      children: [...Array(10)].map((_, row) => [...Array(10)].map((_, col) => {\n        const key = `${col}-${row}`;\n        const cell = grid[key];\n        return cell ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: clsx(\"w-8 h-8 flex items-center justify-center border border-gray-500 bg-gray-200\", {\n            \"text-black\": cell.revealed,\n            \"text-red-600 font-bold\": cell.revealed && cell.highlight\n          }),\n          onClick: () => setGrid(prev => ({\n            ...prev,\n            [key]: {\n              ...prev[key],\n              revealed: true\n            }\n          })),\n          children: cell.revealed ? cell.letter : \"\"\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-8 h-8\"\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_s(ObstacleQuestionBox, \"r0NCjBYlAtX/3HknyT68Yns7xBk=\");\n_c = ObstacleQuestionBox;\nfunction Round2() {\n  return /*#__PURE__*/_jsxDEV(Play, {\n    questionComponent: /*#__PURE__*/_jsxDEV(ObstacleQuestionBox, {\n      mainKeyword: mainKeyword,\n      hintWords: hintWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 37\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 12\n  }, this);\n}\n_c2 = Round2;\nexport default Round2;\nvar _c, _c2;\n$RefreshReg$(_c, \"ObstacleQuestionBox\");\n$RefreshReg$(_c2, \"Round2\");","map":{"version":3,"names":["Play","React","useState","useEffect","clsx","jsxDEV","_jsxDEV","mainKeyword","hintWords","ObstacleQuestionBox","_s","grid","setGrid","newGrid","sharedLetters","Set","forEach","word","x","y","direction","i","length","posX","posY","position","isShared","includes","add","letter","revealed","highlight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","map","_","row","col","key","cell","onClick","prev","_c","Round2","questionComponent","_c2","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/User/Round2.tsx"],"sourcesContent":["import Play from \"../../layouts/Play\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\n// Từ khóa chướng ngại vật\r\nconst mainKeyword = \"BOCONGANH\";\r\nconst hintWords = [\"GIO\", \"HATGIONG\", \"DREAM\", \"THUOC\", \"CUC\", \"CHAUKIETLUAN\"];\r\n\r\ninterface CrosswordCell {\r\n    letter: string;\r\n    revealed: boolean;\r\n    highlight: boolean;\r\n}\r\n\r\ninterface CrosswordData {\r\n    [position: string]: CrosswordCell;\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n    mainKeyword: string;\r\n    hintWords: { word: string; x: number; y: number; direction: \"horizontal\" | \"vertical\" }[];\r\n}\r\n\r\nconst ObstacleQuestionBox: React.FC<ObstacleQuestionBoxProps> = ({ mainKeyword, hintWords }) => {\r\n    const [grid, setGrid] = useState<CrosswordData>({});\r\n\r\n    useEffect(() => {\r\n        const newGrid: CrosswordData = {};\r\n        const sharedLetters = new Set<string>(); // Các chữ cái chung giữa gợi ý & từ chính\r\n\r\n        // Đặt các từ gợi ý lên lưới\r\n        hintWords.forEach(({ word, x, y, direction }) => {\r\n            for (let i = 0; i < word.length; i++) {\r\n                const posX = direction === \"horizontal\" ? x + i : x;\r\n                const posY = direction === \"horizontal\" ? y : y + i;\r\n                const position = `${posX}-${posY}`;\r\n\r\n                // Kiểm tra nếu chữ cái này cũng có trong từ chướng ngại vật\r\n                const isShared = mainKeyword.includes(word[i]);\r\n                if (isShared) {\r\n                    sharedLetters.add(word[i]);\r\n                }\r\n\r\n                newGrid[position] = {\r\n                    letter: word[i],\r\n                    revealed: false,\r\n                    highlight: isShared,\r\n                };\r\n            }\r\n        });\r\n\r\n        setGrid(newGrid);\r\n    }, [mainKeyword, hintWords]);\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center p-4\">\r\n            <h2 className=\"text-xl font-bold mb-4\">Chướng Ngại Vật</h2>\r\n            <div className=\"grid grid-cols-10 gap-1 border border-gray-400 p-2\">\r\n                {[...Array(10)].map((_, row) =>\r\n                    [...Array(10)].map((_, col) => {\r\n                        const key = `${col}-${row}`;\r\n                        const cell = grid[key];\r\n\r\n                        return cell ? (\r\n                            <button\r\n                                key={key}\r\n                                className={clsx(\r\n                                    \"w-8 h-8 flex items-center justify-center border border-gray-500 bg-gray-200\",\r\n                                    {\r\n                                        \"text-black\": cell.revealed,\r\n                                        \"text-red-600 font-bold\": cell.revealed && cell.highlight,\r\n                                    }\r\n                                )}\r\n                                onClick={() =>\r\n                                    setGrid((prev) => ({\r\n                                        ...prev,\r\n                                        [key]: { ...prev[key], revealed: true },\r\n                                    }))\r\n                                }\r\n                            >\r\n                                {cell.revealed ? cell.letter : \"\"}\r\n                            </button>\r\n                        ) : (\r\n                            <div key={key} className=\"w-8 h-8\"></div>\r\n                        );\r\n                    })\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nfunction Round2() {\r\n    return <Play questionComponent={<ObstacleQuestionBox mainKeyword={mainKeyword} hintWords={hintWords} />} />;\r\n\r\n}\r\n\r\nexport default Round2"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}