{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\context\\\\timeListenerContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useRef, useState } from \"react\";\nimport { useSounds } from \"./soundContext\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimeStartContext = /*#__PURE__*/createContext(undefined);\nexport const TimeStartProvider = ({\n  roomId,\n  children\n}) => {\n  _s();\n  // const {setAnimationKey} = useHost();\n  const [timeLeft, setTimeLeft] = useState(0);\n  const timerRef = useRef(null);\n  const sounds = useSounds();\n  const [searchParams] = useSearchParams();\n  const round = searchParams.get(\"round\") || \"1\";\n  const roundRef = useRef(round);\n  const startTimer = async duration => {\n    // Clear any existing timer\n    if (timerRef.current) clearInterval(timerRef.current);\n    console.log(\"duration\", duration);\n    const durationInMs = duration * 1000;\n    // Set the new time\n    setTimeLeft(durationInMs / 1000);\n\n    // Start the countdown\n    timerRef.current = setInterval(() => {\n      setTimeLeft(prev => {\n        console.log(prev);\n        if (prev <= 1) {\n          // setAnimationKey((prev: number) => prev + 1);\n          clearInterval(timerRef.current);\n          return 0;\n        }\n        return prev - 50;\n      });\n    }, 50);\n  };\n  const setExternalTimer = seconds => {\n    startTimer(seconds);\n  };\n  const isInitialMount = useRef(true);\n  return /*#__PURE__*/_jsxDEV(TimeStartContext.Provider, {\n    value: {\n      timeLeft,\n      setTimeLeft,\n      startTimer,\n      setExternalTimer\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeStartProvider, \"DGomP/kvDNmyhnRDuyQOXeDCqPE=\", false, function () {\n  return [useSounds, useSearchParams];\n});\n_c = TimeStartProvider;\nexport const useTimeStart = () => {\n  _s2();\n  const context = useContext(TimeStartContext);\n  if (!context) {\n    throw new Error(\"useTimeStart must be used within a TimeStartProvider\");\n  }\n  return context;\n};\n_s2(useTimeStart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TimeStartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useRef","useState","useSounds","useSearchParams","jsxDEV","_jsxDEV","TimeStartContext","undefined","TimeStartProvider","roomId","children","_s","timeLeft","setTimeLeft","timerRef","sounds","searchParams","round","get","roundRef","startTimer","duration","current","clearInterval","console","log","durationInMs","setInterval","prev","setExternalTimer","seconds","isInitialMount","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTimeStart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/context/timeListenerContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useRef, useState } from \"react\";\r\nimport { deletePath, listenToTimeStart } from \"../services/firebaseServices\";\r\nimport { useSounds } from \"./soundContext\";\r\nimport { round } from \"react-placeholder/lib/placeholders\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { useHost } from \"./hostContext\";\r\n\r\ntype TimeStartContextType = {\r\n  timeLeft: number;\r\n  setTimeLeft: React.Dispatch<React.SetStateAction<number>>,\r\n  startTimer: (duration: number) => void;\r\n  setExternalTimer: (seconds: number) => void;\r\n  \r\n};\r\n\r\nconst TimeStartContext = createContext<TimeStartContextType | undefined>(undefined);\r\n\r\nexport const TimeStartProvider: React.FC<{ roomId: string; children: React.ReactNode }> = ({\r\n  roomId,\r\n  children,\r\n}) => {\r\n  // const {setAnimationKey} = useHost();\r\n  const [timeLeft, setTimeLeft] = useState<number>(0);\r\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\r\n  const sounds = useSounds();\r\n  const [searchParams] = useSearchParams();\r\n  const round = searchParams.get(\"round\") || \"1\";\r\n  const roundRef = useRef(round);\r\n\r\n\r\n\r\n  const startTimer = async (duration: number) => {\r\n    // Clear any existing timer\r\n    if (timerRef.current) clearInterval(timerRef.current);\r\n    console.log(\"duration\", duration);\r\n\r\n    const durationInMs = duration * 1000\r\n    // Set the new time\r\n    setTimeLeft(durationInMs/1000);\r\n\r\n    // Start the countdown\r\n    timerRef.current = setInterval(() => {\r\n      setTimeLeft((prev) => {\r\n        console.log(prev);\r\n        if (prev <= 1) {\r\n          // setAnimationKey((prev: number) => prev + 1);\r\n          clearInterval(timerRef.current!);\r\n          return 0;\r\n        }\r\n        return prev - 50;\r\n      });\r\n    }, 50);\r\n  };\r\n  const setExternalTimer = (seconds: number) => {\r\n    startTimer(seconds);\r\n  };\r\n\r\n  const isInitialMount = useRef(true);\r\n\r\n  \r\n\r\n  return (\r\n    <TimeStartContext.Provider value={{ timeLeft, setTimeLeft, startTimer, setExternalTimer }}>\r\n      {children}\r\n    </TimeStartContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTimeStart = (): TimeStartContextType => {\r\n  const context = useContext(TimeStartContext);\r\n  if (!context) {\r\n    throw new Error(\"useTimeStart must be used within a TimeStartProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAaC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAErF,SAASC,SAAS,QAAQ,gBAAgB;AAE1C,SAASC,eAAe,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWnD,MAAMC,gBAAgB,gBAAGR,aAAa,CAAmCS,SAAS,CAAC;AAEnF,OAAO,MAAMC,iBAA0E,GAAGA,CAAC;EACzFC,MAAM;EACNC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAS,CAAC,CAAC;EACnD,MAAMa,QAAQ,GAAGd,MAAM,CAAwB,IAAI,CAAC;EACpD,MAAMe,MAAM,GAAGb,SAAS,CAAC,CAAC;EAC1B,MAAM,CAACc,YAAY,CAAC,GAAGb,eAAe,CAAC,CAAC;EACxC,MAAMc,KAAK,GAAGD,YAAY,CAACE,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG;EAC9C,MAAMC,QAAQ,GAAGnB,MAAM,CAACiB,KAAK,CAAC;EAI9B,MAAMG,UAAU,GAAG,MAAOC,QAAgB,IAAK;IAC7C;IACA,IAAIP,QAAQ,CAACQ,OAAO,EAAEC,aAAa,CAACT,QAAQ,CAACQ,OAAO,CAAC;IACrDE,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEJ,QAAQ,CAAC;IAEjC,MAAMK,YAAY,GAAGL,QAAQ,GAAG,IAAI;IACpC;IACAR,WAAW,CAACa,YAAY,GAAC,IAAI,CAAC;;IAE9B;IACAZ,QAAQ,CAACQ,OAAO,GAAGK,WAAW,CAAC,MAAM;MACnCd,WAAW,CAAEe,IAAI,IAAK;QACpBJ,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;QACjB,IAAIA,IAAI,IAAI,CAAC,EAAE;UACb;UACAL,aAAa,CAACT,QAAQ,CAACQ,OAAQ,CAAC;UAChC,OAAO,CAAC;QACV;QACA,OAAOM,IAAI,GAAG,EAAE;MAClB,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC;EACR,CAAC;EACD,MAAMC,gBAAgB,GAAIC,OAAe,IAAK;IAC5CV,UAAU,CAACU,OAAO,CAAC;EACrB,CAAC;EAED,MAAMC,cAAc,GAAG/B,MAAM,CAAC,IAAI,CAAC;EAInC,oBACEK,OAAA,CAACC,gBAAgB,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAErB,QAAQ;MAAEC,WAAW;MAAEO,UAAU;MAAES;IAAiB,CAAE;IAAAnB,QAAA,EACvFA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAAC1B,EAAA,CAjDWH,iBAA0E;EAAA,QAOtEN,SAAS,EACDC,eAAe;AAAA;AAAAmC,EAAA,GAR3B9B,iBAA0E;AAmDvF,OAAO,MAAM+B,YAAY,GAAGA,CAAA,KAA4B;EAAAC,GAAA;EACtD,MAAMC,OAAO,GAAG1C,UAAU,CAACO,gBAAgB,CAAC;EAC5C,IAAI,CAACmC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EACzE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,YAAY;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}