{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\Host\\\\Management\\\\HostRound2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst wordArr = [\"GIÓ\", \"HẠT GIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂU KIỆT LUÂN\"];\nconst GRID_SIZE = 30;\nconst CENTER = Math.floor(GRID_SIZE / 2);\nconst createBounds = () => {\n  let top = CENTER,\n    bottom = CENTER,\n    left = CENTER,\n    right = CENTER;\n  return {\n    top,\n    bottom,\n    left,\n    right,\n    Update: (x, y) => {\n      if (x < left) left = x;\n      if (x > right) right = x;\n      if (y < top) top = y;\n      if (y > bottom) bottom = y;\n    }\n  };\n};\nconst generateWordObj = word => {\n  const paddedWord = ` ${wordArr.indexOf(word) + 1}${word} `;\n  return {\n    string: paddedWord,\n    char: paddedWord.split(''),\n    totalMatches: 0,\n    effectiveMatches: 0,\n    successfulMatches: [],\n    x: -1,\n    y: -1,\n    dir: 0\n  };\n};\nconst H = () => {\n  _s();\n  const [board, setBoard] = useState(Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(null)));\n  const [isPos, setIsPos] = useState(Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(false)));\n  const [words, setWords] = useState([]);\n  const bounds = createBounds();\n  useEffect(() => {\n    const initialWords = wordArr.map(generateWordObj);\n    const firstWord = initialWords[0];\n    const x = CENTER,\n      y = CENTER;\n    firstWord.x = x;\n    firstWord.y = y;\n    firstWord.dir = 0;\n    const newBoard = board.map(row => row.slice());\n    const newIsPos = isPos.map(row => row.slice());\n    firstWord.char.forEach((ch, i) => {\n      newBoard[x + i][y] = ch;\n      newIsPos[x + i][y] = i === 1; // mark position number\n      bounds.Update(x + i, y);\n    });\n    setBoard(newBoard);\n    setIsPos(newIsPos);\n    setWords([firstWord]);\n  }, []);\n  const renderBoard = () => {\n    const elements = [];\n    for (let y = bounds.top - 1; y <= bounds.bottom + 1; y++) {\n      const row = [];\n      for (let x = bounds.left - 1; x <= bounds.right + 1; x++) {\n        var _board$x$y;\n        row.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: clsx('w-8 h-8 border border-gray-400 flex items-center justify-center text-sm', isPos[x][y] ? 'bg-blue-200 font-bold' : 'bg-white'),\n          children: (_board$x$y = board[x][y]) !== null && _board$x$y !== void 0 ? _board$x$y : ''\n        }, `${x}-${y}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this));\n      }\n      elements.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex\",\n        children: row\n      }, `row-${y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this));\n    }\n    return elements;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Crossword Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inline-block border border-black p-2 bg-gray-100\",\n      children: renderBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(H, \"TAzlEE+GEB3yqzqDd9sAtILm7j4=\");\n_c = H;\nexport default H;\nvar _c;\n$RefreshReg$(_c, \"H\");","map":{"version":3,"names":["React","useEffect","useState","clsx","jsxDEV","_jsxDEV","wordArr","GRID_SIZE","CENTER","Math","floor","createBounds","top","bottom","left","right","Update","x","y","generateWordObj","word","paddedWord","indexOf","string","char","split","totalMatches","effectiveMatches","successfulMatches","dir","H","_s","board","setBoard","Array","fill","map","isPos","setIsPos","words","setWords","bounds","initialWords","firstWord","newBoard","row","slice","newIsPos","forEach","ch","i","renderBoard","elements","_board$x$y","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/HostRound2.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport clsx from 'clsx';\r\n\r\nconst wordArr = [\"GIÓ\", \"HẠT GIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂU KIỆT LUÂN\"];\r\n\r\ninterface WordObj {\r\n  string: string;\r\n  char: string[];\r\n  totalMatches: number;\r\n  effectiveMatches: number;\r\n  successfulMatches: { x: number; y: number; dir: number }[];\r\n  x: number;\r\n  y: number;\r\n  dir: number;\r\n}\r\n\r\ninterface Bounds {\r\n  top: number;\r\n  bottom: number;\r\n  left: number;\r\n  right: number;\r\n  Update: (x: number, y: number) => void;\r\n}\r\n\r\nconst GRID_SIZE = 30;\r\nconst CENTER = Math.floor(GRID_SIZE / 2);\r\n\r\nconst createBounds = (): Bounds => {\r\n  let top = CENTER, bottom = CENTER, left = CENTER, right = CENTER;\r\n  return {\r\n    top,\r\n    bottom,\r\n    left,\r\n    right,\r\n    Update: (x: number, y: number) => {\r\n      if (x < left) left = x;\r\n      if (x > right) right = x;\r\n      if (y < top) top = y;\r\n      if (y > bottom) bottom = y;\r\n    },\r\n  };\r\n};\r\n\r\nconst generateWordObj = (word: string): WordObj => {\r\n  const paddedWord = ` ${wordArr.indexOf(word) + 1}${word} `;\r\n  return {\r\n    string: paddedWord,\r\n    char: paddedWord.split(''),\r\n    totalMatches: 0,\r\n    effectiveMatches: 0,\r\n    successfulMatches: [],\r\n    x: -1,\r\n    y: -1,\r\n    dir: 0,\r\n  };\r\n};\r\n\r\nconst H: React.FC = () => {\r\n  const [board, setBoard] = useState<(string | null)[][]>(\r\n    Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(null))\r\n  );\r\n  const [isPos, setIsPos] = useState<boolean[][]>(\r\n    Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(false))\r\n  );\r\n  const [words, setWords] = useState<WordObj[]>([]);\r\n  const bounds = createBounds();\r\n\r\n  useEffect(() => {\r\n    const initialWords = wordArr.map(generateWordObj);\r\n    const firstWord = initialWords[0];\r\n    const x = CENTER, y = CENTER;\r\n\r\n    firstWord.x = x;\r\n    firstWord.y = y;\r\n    firstWord.dir = 0;\r\n\r\n    const newBoard = board.map((row) => row.slice());\r\n    const newIsPos = isPos.map((row) => row.slice());\r\n\r\n    firstWord.char.forEach((ch, i) => {\r\n      newBoard[x + i][y] = ch;\r\n      newIsPos[x + i][y] = i === 1; // mark position number\r\n      bounds.Update(x + i, y);\r\n    });\r\n\r\n    setBoard(newBoard);\r\n    setIsPos(newIsPos);\r\n    setWords([firstWord]);\r\n  }, []);\r\n\r\n  const renderBoard = () => {\r\n    const elements = [];\r\n    for (let y = bounds.top - 1; y <= bounds.bottom + 1; y++) {\r\n      const row = [];\r\n      for (let x = bounds.left - 1; x <= bounds.right + 1; x++) {\r\n        row.push(\r\n          <div\r\n            key={`${x}-${y}`}\r\n            className={clsx(\r\n              'w-8 h-8 border border-gray-400 flex items-center justify-center text-sm',\r\n              isPos[x][y] ? 'bg-blue-200 font-bold' : 'bg-white'\r\n            )}\r\n          >\r\n            {board[x][y] ?? ''}\r\n          </div>\r\n        );\r\n      }\r\n      elements.push(\r\n        <div key={`row-${y}`} className=\"flex\">\r\n          {row}\r\n        </div>\r\n      );\r\n    }\r\n    return elements;\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Crossword Game</h1>\r\n      <div className=\"inline-block border border-black p-2 bg-gray-100\">\r\n        {renderBoard()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default H;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}