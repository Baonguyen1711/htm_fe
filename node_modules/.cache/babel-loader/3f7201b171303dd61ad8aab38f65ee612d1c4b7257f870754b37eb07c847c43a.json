{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\Host\\\\Management\\\\HostRound2.tsx\",\n  _s = $RefreshSig$();\nimport Host from '../../../layouts/Host/Host';\nimport QuestionBoxRound2 from '../../../layouts/RoundBase/Round2';\nimport { getQuestionByRound } from '../Test/service';\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HostRound2 = () => {\n  _s();\n  const [params] = useSearchParams();\n  const roomId = params.get(\"roomId\") || \"\";\n  const testName = params.get(\"testName\") || \"\";\n  const [obstacleWord, setObstacleWord] = useState(\"\");\n  const [hintWords, setHintWords] = useState([]);\n  useEffect(() => {\n    const getSecondRoundQuestion = async () => {\n      const result = await getQuestionByRound(testName, \"2\", roomId);\n      console.log(\"round 2 data\", result);\n      setObstacleWord(result[6].answer.toUpperCase().replace(/\\s+/g, \"\"));\n      const updatedHintWords = [];\n      for (let i = 0; i < result.length - 1; i++) {\n        console.log(\"result[i]\", result[i]);\n        updatedHintWords.push(result[i].answer.toUpperCase().replace(/\\s+/g, \"\"));\n      }\n      //const hintWords = result.slice(0, result.length - 1).map((item: any) => item.answer.toUpperCase().replace(/\\s+/g, \"\"));\n      console.log(\"hintWords\", updatedHintWords);\n      setHintWords(updatedHintWords);\n    };\n    getSecondRoundQuestion();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Host, {\n    QuestionComponent: /*#__PURE__*/_jsxDEV(QuestionBoxRound2, {\n      obstacleWord: obstacleWord,\n      hintWordArray: hintWords,\n      isHost: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 32\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(HostRound2, \"grFSOmvxzHOsyQxMDLkmr3IG2ug=\", false, function () {\n  return [useSearchParams];\n});\n_c = HostRound2;\nexport default HostRound2;\nvar _c;\n$RefreshReg$(_c, \"HostRound2\");","map":{"version":3,"names":["Host","QuestionBoxRound2","getQuestionByRound","React","useEffect","useState","useSearchParams","jsxDEV","_jsxDEV","HostRound2","_s","params","roomId","get","testName","obstacleWord","setObstacleWord","hintWords","setHintWords","getSecondRoundQuestion","result","console","log","answer","toUpperCase","replace","updatedHintWords","i","length","push","QuestionComponent","hintWordArray","isHost","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/HostRound2.tsx"],"sourcesContent":["import Round2 from '../../../layouts/RoundBase/Round2';\r\nimport Host from '../../../layouts/Host/Host';\r\nimport QuestionBoxRound2 from '../../../layouts/RoundBase/Round2';\r\nimport { getQuestionByRound } from '../Test/service';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\n\r\nconst HostRound2: React.FC = () => {\r\n    const [params] = useSearchParams()\r\n    const roomId = params.get(\"roomId\") || \"\"\r\n    const testName = params.get(\"testName\") || \"\"\r\n    const [obstacleWord, setObstacleWord] = useState<string>(\"\")\r\n    const [hintWords, setHintWords] = useState<string[]>([])\r\n    useEffect(() => {\r\n        const getSecondRoundQuestion = async () => {\r\n            const result = await getQuestionByRound(testName, \"2\", roomId)\r\n            console.log(\"round 2 data\", result)\r\n            setObstacleWord(result[6].answer.toUpperCase().replace(/\\s+/g, \"\"))\r\n            const updatedHintWords = []\r\n            for (let i =0;i<result.length-1;i++) {\r\n                console.log(\"result[i]\",result[i]);\r\n                \r\n                updatedHintWords.push(result[i].answer.toUpperCase().replace(/\\s+/g, \"\"))\r\n            }\r\n            //const hintWords = result.slice(0, result.length - 1).map((item: any) => item.answer.toUpperCase().replace(/\\s+/g, \"\"));\r\n            console.log(\"hintWords\",updatedHintWords)\r\n            setHintWords(updatedHintWords);\r\n\r\n        }\r\n\r\n        getSecondRoundQuestion()\r\n\r\n    }, [])\r\n    return (\r\n        <Host\r\n            QuestionComponent={<QuestionBoxRound2 obstacleWord={obstacleWord} hintWordArray={hintWords} isHost={true} />}\r\n        />\r\n\r\n    )\r\n};\r\n\r\nexport default HostRound2;\r\n"],"mappings":";;AACA,OAAOA,IAAI,MAAM,4BAA4B;AAC7C,OAAOC,iBAAiB,MAAM,mCAAmC;AACjE,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,eAAe,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnD,MAAMC,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,MAAM,CAAC,GAAGL,eAAe,CAAC,CAAC;EAClC,MAAMM,MAAM,GAAGD,MAAM,CAACE,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE;EACzC,MAAMC,QAAQ,GAAGH,MAAM,CAACE,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE;EAC7C,MAAM,CAACE,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAS,EAAE,CAAC;EAC5D,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAW,EAAE,CAAC;EACxDD,SAAS,CAAC,MAAM;IACZ,MAAMe,sBAAsB,GAAG,MAAAA,CAAA,KAAY;MACvC,MAAMC,MAAM,GAAG,MAAMlB,kBAAkB,CAACY,QAAQ,EAAE,GAAG,EAAEF,MAAM,CAAC;MAC9DS,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,MAAM,CAAC;MACnCJ,eAAe,CAACI,MAAM,CAAC,CAAC,CAAC,CAACG,MAAM,CAACC,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;MACnE,MAAMC,gBAAgB,GAAG,EAAE;MAC3B,KAAK,IAAIC,CAAC,GAAE,CAAC,EAACA,CAAC,GAACP,MAAM,CAACQ,MAAM,GAAC,CAAC,EAACD,CAAC,EAAE,EAAE;QACjCN,OAAO,CAACC,GAAG,CAAC,WAAW,EAACF,MAAM,CAACO,CAAC,CAAC,CAAC;QAElCD,gBAAgB,CAACG,IAAI,CAACT,MAAM,CAACO,CAAC,CAAC,CAACJ,MAAM,CAACC,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;MAC7E;MACA;MACAJ,OAAO,CAACC,GAAG,CAAC,WAAW,EAACI,gBAAgB,CAAC;MACzCR,YAAY,CAACQ,gBAAgB,CAAC;IAElC,CAAC;IAEDP,sBAAsB,CAAC,CAAC;EAE5B,CAAC,EAAE,EAAE,CAAC;EACN,oBACIX,OAAA,CAACR,IAAI;IACD8B,iBAAiB,eAAEtB,OAAA,CAACP,iBAAiB;MAACc,YAAY,EAAEA,YAAa;MAACgB,aAAa,EAAEd,SAAU;MAACe,MAAM,EAAE;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChH,CAAC;AAGV,CAAC;AAAC1B,EAAA,CAhCID,UAAoB;EAAA,QACLH,eAAe;AAAA;AAAA+B,EAAA,GAD9B5B,UAAoB;AAkC1B,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}