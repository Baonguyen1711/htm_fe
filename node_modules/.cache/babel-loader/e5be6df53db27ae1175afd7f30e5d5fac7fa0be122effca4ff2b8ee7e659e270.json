{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\routes\\\\ProtectedRoute.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst routeRoleMap = {\n  '/host': 'host',\n  '/play': 'player',\n  '/spectator': 'spectator'\n};\nconst ProtectedRoute = ({\n  element,\n  requireAccessToken = false,\n  requireHost = false\n}) => {\n  _s();\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"You don't have permission to access this route.\");\n  const [isVerified, setIsVerified] = useState(false);\n  const location = useLocation();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const verify = async () => {\n      if (requireAccessToken) {\n        const accessToken = localStorage.getItem('accessToken');\n        if (!accessToken) {\n          setModalMessage('No access token found. Please log in.');\n          setShowModal(true);\n          return;\n        }\n        try {\n          const response = await axios.post(`http://localhost:8000/api/auth/verify`, {}, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${accessToken}`\n            }\n          });\n          const payload = response.data;\n          if (!payload) {\n            setModalMessage('Invalid token payload.');\n            setShowModal(true);\n            return;\n          }\n          const requiredRole = routeRoleMap[`/${location.pathname.split('/')[1]}`];\n          if (!requiredRole || payload.role !== requiredRole) {\n            setModalMessage(\"You don't have the right role to access this route.\");\n            setShowModal(true);\n            return;\n          }\n          const currentTime = Date.now() / 1000;\n          if (payload.exp < currentTime) {\n            setModalMessage('Your session has expired. Please log in again.');\n            setShowModal(true);\n            return;\n          }\n          setIsVerified(true);\n        } catch (error) {\n          console.error('Error verifying access token:', error);\n          setModalMessage('Failed to verify access token. Please try again.');\n          setShowModal(true);\n        }\n      } else if (requireHost) {\n        // Example: check Firebase user info (maybe from localStorage or a backend API)\n        const firebaseToken = localStorage.getItem('firebaseToken');\n        if (!firebaseToken) {\n          setModalMessage('You must be logged in as host.');\n          setShowModal(true);\n          return;\n        }\n        try {\n          const response = await axios.post(`http://localhost:8000/api/auth/verify_firebase`, {}, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${firebaseToken}`\n            }\n          });\n          const user = response.data.user;\n          if (!user || user.firebase.sign_in_provider !== 'password') {\n            setModalMessage('You must be logged in as host.');\n            setShowModal(true);\n            return;\n          }\n          setIsVerified(true);\n        } catch (error) {\n          console.error('Error verifying host:', error);\n          setModalMessage('Failed to verify host. Please try again.');\n          setShowModal(true);\n        }\n      } else {\n        // No protection required (optional)\n        setIsVerified(true);\n      }\n    };\n    verify();\n  }, [location.pathname, requireAccessToken, requireHost]);\n  const handleCloseModal = () => {\n    setShowModal(false);\n    navigate(-1);\n  };\n  if (showModal) {\n    return /*#__PURE__*/_jsxDEV(AccessDeniedModal, {\n      onClose: handleCloseModal,\n      message: modalMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 16\n    }, this);\n  }\n  if (!isVerified) {\n    return null; // or <LoadingSpinner />\n  }\n  return element;\n};\n_s(ProtectedRoute, \"IHfR24guSEDZRAsomjTeWMq7aNI=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useNavigate","axios","jsxDEV","_jsxDEV","routeRoleMap","ProtectedRoute","element","requireAccessToken","requireHost","_s","showModal","setShowModal","modalMessage","setModalMessage","isVerified","setIsVerified","location","navigate","verify","accessToken","localStorage","getItem","response","post","headers","payload","data","requiredRole","pathname","split","role","currentTime","Date","now","exp","error","console","firebaseToken","user","firebase","sign_in_provider","handleCloseModal","AccessDeniedModal","onClose","message","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/routes/ProtectedRoute.tsx"],"sourcesContent":["import React, { ReactNode, useEffect, useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\ninterface VerifyResponse {\r\n\r\n    roomId: string;\r\n    role: 'host' | 'player' | 'spectator';\r\n    userId: string;\r\n    exp: number;\r\n\r\n}\r\n\r\nconst routeRoleMap: { [key: string]: 'host' | 'player' | 'spectator' } = {\r\n    '/host': 'host',\r\n    '/play': 'player',\r\n    '/spectator': 'spectator',\r\n};\r\n\r\nconst ProtectedRoute: React.FC<{ element: ReactNode, requireAccessToken?: boolean, requireHost?: boolean }> = ({\r\n    element, requireAccessToken = false, requireHost = false\r\n}) => {\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [modalMessage, setModalMessage] = useState(\"You don't have permission to access this route.\");\r\n    const [isVerified, setIsVerified] = useState(false);\r\n\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const verify = async () => {\r\n            if (requireAccessToken) {\r\n                const accessToken = localStorage.getItem('accessToken');\r\n                if (!accessToken) {\r\n                    setModalMessage('No access token found. Please log in.');\r\n                    setShowModal(true);\r\n                    return;\r\n                }\r\n\r\n                try {\r\n                    const response = await axios.post<VerifyResponse>(\r\n                        `http://localhost:8000/api/auth/verify`,\r\n                        {},\r\n                        {\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                                'Authorization': `Bearer ${accessToken}`,\r\n                            },\r\n                        }\r\n                    );\r\n\r\n                    const payload = response.data;\r\n                    if (!payload) {\r\n                        setModalMessage('Invalid token payload.');\r\n                        setShowModal(true);\r\n                        return;\r\n                    }\r\n\r\n                    const requiredRole = routeRoleMap[`/${location.pathname.split('/')[1]}`];\r\n\r\n                    if (!requiredRole || payload.role !== requiredRole) {\r\n                        setModalMessage(\"You don't have the right role to access this route.\");\r\n                        setShowModal(true);\r\n                        return;\r\n                    }\r\n\r\n                    const currentTime = Date.now() / 1000;\r\n                    if (payload.exp < currentTime) {\r\n                        setModalMessage('Your session has expired. Please log in again.');\r\n                        setShowModal(true);\r\n                        return;\r\n                    }\r\n\r\n                    setIsVerified(true);\r\n                } catch (error) {\r\n                    console.error('Error verifying access token:', error);\r\n                    setModalMessage('Failed to verify access token. Please try again.');\r\n                    setShowModal(true);\r\n                }\r\n            } else if (requireHost) {\r\n                // Example: check Firebase user info (maybe from localStorage or a backend API)\r\n                const firebaseToken = localStorage.getItem('firebaseToken');\r\n                if (!firebaseToken) {\r\n                    setModalMessage('You must be logged in as host.');\r\n                    setShowModal(true);\r\n                    return;\r\n                }\r\n\r\n                try {\r\n                    const response = await axios.post(\r\n                        `http://localhost:8000/api/auth/verify_firebase`,\r\n                        {},\r\n                        {\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                                'Authorization': `Bearer ${firebaseToken}`,\r\n                            },\r\n                        }\r\n                    );\r\n\r\n                    const user = response.data.user;\r\n                    if (!user || user.firebase.sign_in_provider !== 'password') {\r\n                        setModalMessage('You must be logged in as host.');\r\n                        setShowModal(true);\r\n                        return;\r\n                    }\r\n\r\n                    setIsVerified(true);\r\n                } catch (error) {\r\n                    console.error('Error verifying host:', error);\r\n                    setModalMessage('Failed to verify host. Please try again.');\r\n                    setShowModal(true);\r\n                }\r\n            } else {\r\n                // No protection required (optional)\r\n                setIsVerified(true);\r\n            }\r\n        };\r\n\r\n        verify();\r\n    }, [location.pathname, requireAccessToken, requireHost]);\r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        navigate(-1);\r\n    };\r\n\r\n    if (showModal) {\r\n        return <AccessDeniedModal onClose={handleCloseModal} message={modalMessage} />;\r\n    }\r\n\r\n    if (!isVerified) {\r\n        return null; // or <LoadingSpinner />\r\n    }\r\n\r\n    return element;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}