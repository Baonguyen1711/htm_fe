{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\Play.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { usePlayer } from '../context/playerContext';\nimport { deletePath, listenToPlayers, setupOnDisconnect } from '../services/firebaseServices';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { useHost } from '../context/hostContext';\nimport { useTimeStart } from '../context/timeListenerContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Play = ({\n  questionComponent,\n  isHost = false,\n  PlayerScore,\n  SideBar\n}) => {\n  _s();\n  const roundName = {\n    \"1\": \"NHỔ NEO\",\n    \"2\": \"VƯỢT SÓNG\",\n    \"3\": \"BỨT PHÁ\",\n    \"4\": \"CHINH PHỤC\"\n  };\n  const navigate = useNavigate();\n  const playerAnswerRef = useRef(\"\");\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [userId, setUserId] = useState(localStorage.getItem(\"userId\"));\n  const [params] = useSearchParams();\n  const round = params.get(\"round\") || \"1\";\n  const {\n    players,\n    setPlayers,\n    setRoomId,\n    playersArray,\n    setPlayerArray,\n    position,\n    setCurrentQuestion,\n    selectedTopic,\n    setSelectedTopic,\n    setScoreList\n  } = usePlayer();\n  const {\n    playerScores,\n    setPlayerScores\n  } = useHost();\n  const isMounted = useRef(false);\n  const {\n    timeLeft,\n    startTimer\n  } = useTimeStart();\n  const [searchParams] = useSearchParams();\n  const currentRound = searchParams.get(\"round\") || \"1\";\n  const testName = searchParams.get(\"testName\") || \"1\";\n  const roomId = searchParams.get(\"roomId\") || \"\";\n  const handleRoundChange = async delta => {\n    console.log(\"currentRound\", currentRound);\n    const newRound = parseInt(currentRound) + delta;\n    console.log(\"new round\", newRound);\n    if (newRound >= 1 && newRound <= 4) {\n      // limit to 1-4 rounds\n      navigate(`?round=${newRound}&testName=${testName}&roomId=${roomId}`);\n    }\n    await deletePath(roomId, \"questions\");\n    await deletePath(roomId, \"answers\");\n  };\n  useEffect(() => {\n    if (!roomId || !userId) return;\n\n    // Setup onDisconnect to remove user from room when connection lost\n    const cancelOnDisconnect = setupOnDisconnect(roomId, userId);\n    return () => {\n      // Optional: cancel onDisconnect if component unmounts normally\n      cancelOnDisconnect();\n    };\n  }, [roomId, userId]);\n  useEffect(() => {\n    const unsubscribePlayers = listenToPlayers(roomId, updatedPlayers => {\n      console.log(\"updatedPlayers\", updatedPlayers);\n      console.log(\"Object.keys(updatedPlayers)\", Object.keys(updatedPlayers));\n      console.log(\"Object.keys(updatedPlayers).length\", Object.keys(updatedPlayers).length);\n      if (updatedPlayers && Object.keys(updatedPlayers).length > 0) {\n        const playersList = Object.values(updatedPlayers);\n        console.log(\"playersList\", playersList);\n        const initialScoreList = [...playersList];\n        if (round === \"1\") {\n          for (var score of initialScoreList) {\n            score[\"score\"] = \"0\";\n            score[\"isCorrect\"] = false;\n            score[\"isModified\"] = false;\n          }\n          console.log(\"initialScoreList\", initialScoreList);\n          setScoreList(initialScoreList);\n          setPlayerScores(initialScoreList);\n        }\n        setPlayerArray(playersList);\n        localStorage.setItem(\"playerList\", JSON.stringify(playersList));\n        console.log(\"Updated localStorage:\", localStorage.getItem(\"playerList\"));\n      } else {\n        console.log(\"Room is empty or players node deleted\");\n        console.log(\"roomId\", roomId);\n        setPlayerArray([]); // Clear state\n        localStorage.removeItem(\"playerList\"); // Clear localStorage\n      }\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, [round]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-screen min-h-screen flex justify-center items-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scale-[0.8] origin-top w-full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n_s(Play, \"0Ucj6YC8miIe1pAWETJNqFEI/xI=\", false, function () {\n  return [useNavigate, useSearchParams, usePlayer, useHost, useTimeStart, useSearchParams];\n});\n_c = Play;\nexport default Play;\nvar _c;\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"names":["React","useState","useEffect","useRef","usePlayer","deletePath","listenToPlayers","setupOnDisconnect","useNavigate","useSearchParams","useHost","useTimeStart","jsxDEV","_jsxDEV","Play","questionComponent","isHost","PlayerScore","SideBar","_s","roundName","navigate","playerAnswerRef","isChatOpen","setIsChatOpen","isModalOpen","setIsModalOpen","userId","setUserId","localStorage","getItem","params","round","get","players","setPlayers","setRoomId","playersArray","setPlayerArray","position","setCurrentQuestion","selectedTopic","setSelectedTopic","setScoreList","playerScores","setPlayerScores","isMounted","timeLeft","startTimer","searchParams","currentRound","testName","roomId","handleRoundChange","delta","console","log","newRound","parseInt","cancelOnDisconnect","unsubscribePlayers","updatedPlayers","Object","keys","length","playersList","values","initialScoreList","score","setItem","JSON","stringify","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/Play.tsx"],"sourcesContent":["import React, { useState, useEffect, ReactNode, useRef, useCallback } from 'react';\r\nimport Header from './Header';\r\nimport { usePlayer } from '../context/playerContext';\r\nimport { Answer, User } from '../type';\r\nimport { deletePath, addPlayerToRoom, listenToPlayers, listenToScores, listenToAnswers, listenToTimeStart, listenToBroadcastedAnswer, setupOnDisconnect, listenToRoundStart } from '../services/firebaseServices';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport { submitAnswer } from './services';\r\nimport { getNextQuestion } from '../pages/Host/Test/service';\r\nimport { useHost } from '../context/hostContext';\r\nimport HostManagement from '../components/HostManagement';\r\nimport PlayerScore from '../components/PlayerScore';\r\nimport HostScore from '../components/PlayerAnswer';\r\nimport { setCurrentPacketQuestion } from '../components/services';\r\nimport { useTimeStart } from '../context/timeListenerContext';\r\n\r\n\r\n\r\ninterface PlayProps {\r\n    questionComponent: ReactNode;\r\n    isHost?: boolean;\r\n    PlayerScore: ReactNode\r\n    SideBar: ReactNode\r\n}\r\n\r\ninterface Player {\r\n    score: number;\r\n    index: number;\r\n    username: string;\r\n    position: number;\r\n}\r\n\r\nconst Play: React.FC<PlayProps> = ({ questionComponent, isHost = false, PlayerScore, SideBar }) => {\r\n\r\n    const roundName = {\r\n        \"1\": \"NHỔ NEO\",\r\n        \"2\": \"VƯỢT SÓNG\",\r\n        \"3\": \"BỨT PHÁ\",\r\n        \"4\": \"CHINH PHỤC\",\r\n    }\r\n    const navigate = useNavigate()\r\n    const playerAnswerRef = useRef(\"\");\r\n    const [isChatOpen, setIsChatOpen] = useState(false);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [userId, setUserId] = useState(localStorage.getItem(\"userId\"))\r\n    const [params] = useSearchParams()\r\n    const round = (params.get(\"round\") as \"1\" | \"2\" | \"3\" | \"4\") || \"1\"\r\n    const { players, setPlayers,  setRoomId, playersArray, setPlayerArray, position, setCurrentQuestion, selectedTopic, setSelectedTopic, setScoreList } = usePlayer()\r\n    const { playerScores, setPlayerScores } = useHost()\r\n    const isMounted = useRef(false);\r\n    const { timeLeft, startTimer } = useTimeStart();\r\n\r\n\r\n    const [searchParams] = useSearchParams();\r\n\r\n\r\n    const currentRound = searchParams.get(\"round\") || \"1\";\r\n    const testName = searchParams.get(\"testName\") || \"1\"\r\n    const roomId = searchParams.get(\"roomId\") || \"\";\r\n\r\n\r\n    const handleRoundChange = async (delta: number) => {\r\n        console.log(\"currentRound\", currentRound)\r\n        const newRound = parseInt(currentRound) + delta;\r\n        console.log(\"new round\", newRound)\r\n        if (newRound >= 1 && newRound <= 4) { // limit to 1-4 rounds\r\n            navigate(`?round=${newRound}&testName=${testName}&roomId=${roomId}`);\r\n        }\r\n        await deletePath(roomId, \"questions\");\r\n        await deletePath(roomId, \"answers\");\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if (!roomId || !userId) return;\r\n\r\n        // Setup onDisconnect to remove user from room when connection lost\r\n        const cancelOnDisconnect = setupOnDisconnect(roomId, userId);\r\n\r\n        return () => {\r\n            // Optional: cancel onDisconnect if component unmounts normally\r\n            cancelOnDisconnect();\r\n        };\r\n    }, [roomId, userId]);\r\n\r\n    useEffect(() => {\r\n        const unsubscribePlayers = listenToPlayers(roomId, (updatedPlayers) => {\r\n            console.log(\"updatedPlayers\", updatedPlayers)\r\n            console.log(\"Object.keys(updatedPlayers)\", Object.keys(updatedPlayers))\r\n            console.log(\"Object.keys(updatedPlayers).length\", Object.keys(updatedPlayers).length)\r\n            if (updatedPlayers && Object.keys(updatedPlayers).length > 0) {\r\n                const playersList = Object.values(updatedPlayers);\r\n                console.log(\"playersList\", playersList);\r\n                \r\n                const initialScoreList = [...playersList]\r\n                if (round === \"1\") {\r\n                    for (var score of initialScoreList) {\r\n                        score[\"score\"] = \"0\";\r\n                        score[\"isCorrect\"] = false;\r\n                        score[\"isModified\"] = false\r\n                    }\r\n                    console.log(\"initialScoreList\", initialScoreList);\r\n                    setScoreList(initialScoreList)\r\n                    setPlayerScores(initialScoreList)\r\n                }\r\n\r\n\r\n                setPlayerArray(playersList);\r\n                localStorage.setItem(\"playerList\", JSON.stringify(playersList));\r\n                console.log(\"Updated localStorage:\", localStorage.getItem(\"playerList\"));\r\n            } else {\r\n                console.log(\"Room is empty or players node deleted\");\r\n                console.log(\"roomId\", roomId);\r\n                \r\n                setPlayerArray([]); // Clear state\r\n                localStorage.removeItem(\"playerList\"); // Clear localStorage\r\n            }\r\n        });\r\n\r\n        // No need to set state here; it's handled by useState initializer\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, [round]);\r\n\r\n\r\n    return (\r\n        <div className=\"w-screen min-h-screen flex justify-center items-center\"\r\n            \r\n        >\r\n\r\n            <div className=\"scale-[0.8] origin-top w-full\">\r\n\r\n            </div>\r\n            {/* Ocean/Starry Night Background */}\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default Play;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}