{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { renderGrid } from \"./utils\";\nimport { usePlayer } from \"../../context/playerContext\";\nimport { setSelectedRow, setCorrectRow, setIncorectRow } from \"../../components/services\";\nimport { listenToSelectRow } from \"../../services/firebaseServices\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mainKeyword = \"BÒCÔNGANH\";\nconst QuestionBoxRound2 = ({\n  obstacleWord = mainKeyword,\n  hintWordArray,\n  initialGrid,\n  isHost = false\n}) => {\n  _s();\n  console.log(\"hintWordArray\", typeof hintWordArray);\n  console.log(\"obstacle\", obstacleWord);\n  const [searchParams] = useSearchParams();\n  const {\n    setInitialGrid\n  } = usePlayer();\n  const roomId = searchParams.get(\"roomId\") || \"\";\n  const GRID_SIZE = 20;\n  const generateEmptyGrid = () => {\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n  };\n  const [grid, setGrid] = useState(generateEmptyGrid());\n  const [hintWords, setHintWords] = useState([]);\n  const [cellStyles, setCellStyles] = useState({}); // Tracks background and text styles\n  const [menu, setMenu] = useState({\n    visible: false\n  });\n  const [hintWordsLength, setHintWordsLength] = useState([]);\n  const menuRef = useRef(null);\n  const revealCells = (rowIndex, colIndex, action, hintWordNumber) => {\n    if (!isHost) return;\n    const hintWordIndex = hintWordNumber ? parseInt(hintWordNumber) - 1 : -1;\n    const hintWord = hintWords.find(word => word.y === rowIndex && word.direction === \"horizontal\" || word.x === colIndex && word.direction === \"vertical\");\n    if (!hintWord) return;\n    const isRow = hintWord.direction === \"horizontal\";\n    const wordLength = hintWordIndex >= 0 && hintWordArray ? hintWordArray[hintWordIndex].length : hintWord.word.length;\n    const startIndex = isRow ? colIndex + 1 : rowIndex + 1;\n    setCellStyles(prev => {\n      const newStyles = {\n        ...prev\n      };\n      if (isRow) {\n        for (let col = startIndex; col < startIndex + wordLength; col++) {\n          const key = `${rowIndex}-${col}`;\n          // Skip number cells to preserve their appearance\n          if (!grid[rowIndex][col].includes(\"number\")) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setSelectedRow(roomId, hintWordNumber);\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-black\"\n              };\n              let indexInTarget = 0;\n              if (hintWordArray) for (let i = 0; i < hintWordArray[hintWordIndex].length; i++) {\n                const char = hintWordArray[hintWordIndex][i];\n                indexInTarget = obstacleWord.indexOf(char);\n                if (indexInTarget !== -1) {\n                  console.log(`First matching character: ${char}`);\n                  console.log(`Index in \"${obstacleWord}\": ${indexInTarget}`);\n                  break;\n                }\n              }\n              if (hintWordArray && hintWordNumber) setCorrectRow(roomId, hintWordNumber, hintWordArray[hintWordIndex], indexInTarget.toString());\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setIncorectRow(roomId, hintWordNumber);\n            }\n          }\n        }\n      } else {\n        for (let row = startIndex; row < startIndex + wordLength; row++) {\n          const key = `${row}-${colIndex}`;\n          // Skip number cells to preserve their appearance\n          if (!grid[row][colIndex].includes(\"number\")) {\n            if (action === \"open\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setSelectedRow(roomId, hintWordNumber);\n            } else if (action === \"correct\") {\n              newStyles[key] = {\n                background: \"bg-yellow-200\",\n                textColor: \"text-black\"\n              };\n              let indexInTarget = 0;\n              if (hintWordArray) for (let i = 0; i < hintWordArray[hintWordIndex].length; i++) {\n                const char = hintWordArray[hintWordIndex][i];\n                indexInTarget = obstacleWord.indexOf(char);\n                if (indexInTarget !== -1) {\n                  console.log(`First matching character: ${char}`);\n                  console.log(`Index in \"${obstacleWord}\": ${indexInTarget}`);\n                  break;\n                }\n              }\n              if (hintWordArray && hintWordNumber) setCorrectRow(roomId, hintWordNumber, hintWordArray[hintWordIndex], indexInTarget.toString());\n            } else if (action === \"incorrect\") {\n              newStyles[key] = {\n                background: \"bg-gray-400\",\n                textColor: \"text-transparent\"\n              };\n              if (hintWordNumber) setIncorectRow(roomId, hintWordNumber);\n            }\n          }\n        }\n      }\n      return newStyles;\n    });\n\n    // if (action === \"correct\" || action === \"incorrect\") {\n    //   setSelectedRow(roomId, isRow ? rowIndex.toString() : colIndex.toString());\n    // }\n  };\n  useEffect(() => {\n    if (hintWordArray) {\n      hintWordArray.forEach((word, index) => {\n        console.log(`Word ${index}: '${word}' has length: ${word.length}`);\n        console.log([...word]);\n      });\n      const lengthArray = hintWordArray.map(word => word.length);\n      setHintWordsLength(lengthArray);\n    }\n  }, [hintWordArray]);\n  useEffect(() => {\n    const unsubscribePlayers = listenToSelectRow(roomId, rowNumber => {\n      if (initialGrid) {\n        for (let row = 0; row < initialGrid.length; row++) {\n          for (let col = 0; col < initialGrid[row].length; col++) {\n            if (grid[row][col] === `number${ro}`) {\n              console.log(`Found \"${target}\" at row ${row}, column ${col}`);\n              found = true;\n              break;\n            }\n          }\n          if (found) break;\n        }\n      }\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  // Initialize grid\n  useEffect(() => {\n    if (isHost) {\n      const wordList = [\"GIÓ\", \"HẠTGIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂUKIỆTLUÂN\"];\n      console.log(\"wordList\", wordList);\n      console.log(\"hintWordArray\", hintWordArray);\n      if (hintWordArray && obstacleWord) {\n        const {\n          randomHintWords,\n          newGrid\n        } = renderGrid(hintWordArray, obstacleWord, GRID_SIZE);\n        console.log(\"randomHintWords\", randomHintWords);\n        console.log(\"newGrid\", newGrid);\n        setHintWords(randomHintWords);\n        setInitialGrid(newGrid);\n        setGrid(newGrid);\n      }\n    } else {\n      if (initialGrid) {\n        setGrid(initialGrid);\n      }\n    }\n  }, [isHost, hintWordArray, obstacleWord, initialGrid, setInitialGrid]);\n\n  // Reveal cells in a row or column\n\n  // Handle number click to show menu\n  const handleNumberClick = (rowIndex, colIndex) => {\n    if (!isHost) return;\n    setMenu({\n      visible: true,\n      rowIndex,\n      colIndex\n    });\n  };\n\n  // Handle menu actions\n  const handleMenuAction = (action, rowIndex, colIndex, hintWordNumber) => {\n    revealCells(rowIndex, colIndex, action, hintWordNumber);\n    setMenu({\n      visible: false\n    });\n  };\n\n  // Handle cell click to reveal\n  const handleCellClick = (rowIndex, colIndex) => {\n    if (!isHost) return;\n    revealCells(rowIndex, colIndex, \"open\");\n  };\n\n  // Close menu on outside click\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setMenu({\n          visible: false\n        });\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6 relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\",\n      children: \"Trong c\\xE1c gi\\u1EA3i \\u0111\\u1EA5u th\\u1EC3 thao, nh\\u1EEFng \\u0111\\u1ED9i hay v\\u1EADn \\u0111\\u1ED9ng vi\\xEAn m\\u1EA1nh s\\u1EBD \\u0111\\u01B0\\u1EE3c x\\u1EBFp v\\xE0o c\\xF9ng m\\u1ED9t ho\\u1EB7c nhi\\u1EC1u nh\\xF3m trong khi b\\u1ED1c th\\u0103m \\u0111\\u1EC3 tr\\xE1nh vi\\u1EC7c g\\u1EB7p nhau s\\u1EDBm. T\\xEAn g\\u1ECDi chung c\\u1EE7a c\\xE1c nh\\xF3m v\\u1EADn \\u0111\\u1ED9ng vi\\xEAn n\\xE0y l\\xE0 g\\xEC?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map((cell, colIndex) => {\n          const cellKey = `${rowIndex}-${colIndex}`;\n          const cellStyle = cellStyles[cellKey] || {\n            background: cell === \"\" ? \"bg-white\" : \"bg-gray-50\",\n            textColor: cell.includes(\"number\") ? \"text-blue-500\" : \"text-transparent\"\n          };\n          const showMenu = menu.visible && menu.rowIndex === rowIndex && menu.colIndex === colIndex && cell.includes(\"number\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: `w-10 h-10 flex items-center justify-center text-lg font-semibold select-none\n                      ${cell.includes(\"number\") ? \"text-blue-500 border-none\" : \"\"}\n                      ${cell.includes(\"number\") ? \"\" : cellStyle.background}\n                      ${cell.includes(\"number\") ? \"text-blue-500\" : cellStyle.textColor}\n                      ${obstacleWord !== null && obstacleWord !== void 0 && obstacleWord.includes(cell) && cellStyle.textColor === \"text-black\" && !cell.includes(\"number\") && isNaN(Number(cell)) ? \"font-bold text-red-500\" : \"\"}\n                    `,\n              onClick: () => {\n                if (isHost) {\n                  if (cell.includes(\"number\")) {\n                    handleNumberClick(rowIndex, colIndex);\n                  } else {\n                    handleCellClick(rowIndex, colIndex);\n                  }\n                }\n              },\n              style: {\n                cursor: isHost && (cell.includes(\"number\") || hintWords.some(word => word.y === rowIndex || word.x === colIndex)) ? \"pointer\" : \"default\"\n              },\n              children: cell.includes(\"number\") ? cell.replace(\"number\", \"\").trim() : cell\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 19\n            }, this), showMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: menuRef,\n              className: \"absolute left-12 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\",\n                onClick: () => handleMenuAction(\"open\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"SELECT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600\",\n                onClick: () => handleMenuAction(\"correct\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"Correct\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600\",\n                onClick: () => handleMenuAction(\"incorrect\", rowIndex, colIndex, cell.replace(\"number\", \"\")),\n                children: \"Incorrect\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 21\n            }, this)]\n          }, colIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 17\n          }, this);\n        })\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionBoxRound2, \"aHlPZzA4prry9ulQN7/64E2LZp8=\", false, function () {\n  return [useSearchParams, usePlayer];\n});\n_c = QuestionBoxRound2;\nexport default QuestionBoxRound2;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound2\");","map":{"version":3,"names":["React","useState","useEffect","useRef","renderGrid","usePlayer","setSelectedRow","setCorrectRow","setIncorectRow","listenToSelectRow","useSearchParams","jsxDEV","_jsxDEV","mainKeyword","QuestionBoxRound2","obstacleWord","hintWordArray","initialGrid","isHost","_s","console","log","searchParams","setInitialGrid","roomId","get","GRID_SIZE","generateEmptyGrid","Array","fill","map","grid","setGrid","hintWords","setHintWords","cellStyles","setCellStyles","menu","setMenu","visible","hintWordsLength","setHintWordsLength","menuRef","revealCells","rowIndex","colIndex","action","hintWordNumber","hintWordIndex","parseInt","hintWord","find","word","y","direction","x","isRow","wordLength","length","startIndex","prev","newStyles","col","key","includes","background","textColor","indexInTarget","i","char","indexOf","toString","row","forEach","index","lengthArray","unsubscribePlayers","rowNumber","ro","target","found","wordList","randomHintWords","newGrid","handleNumberClick","handleMenuAction","handleCellClick","handleClickOutside","event","current","contains","document","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","cell","cellKey","cellStyle","showMenu","isNaN","Number","onClick","style","cursor","some","replace","trim","ref","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round2.tsx"],"sourcesContent":["import Play from \"../Play\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { renderGrid } from \"./utils\";\r\nimport { usePlayer } from \"../../context/playerContext\";\r\nimport { setSelectedRow, setCorrectRow, setIncorectRow } from \"../../components/services\";\r\nimport { listenToCorrectRow, listenToIncorrectRow, listenToSelectRow } from \"../../services/firebaseServices\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\n\r\n\r\ninterface HintWord {\r\n  word: string;\r\n  x: number;\r\n  y: number;\r\n  direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n  obstacleWord?: string;\r\n  hintWordArray?: string[];\r\n  isHost?: boolean;\r\n  initialGrid?: string[][];\r\n}\r\n\r\nconst mainKeyword = \"BÒCÔNGANH\";\r\n\r\nconst QuestionBoxRound2: React.FC<ObstacleQuestionBoxProps> = ({\r\n  obstacleWord = mainKeyword,\r\n  hintWordArray,\r\n  initialGrid,\r\n  isHost = false,\r\n}) => {\r\n  console.log(\"hintWordArray\", typeof hintWordArray);\r\n  console.log(\"obstacle\", obstacleWord);\r\n\r\n  const [searchParams] = useSearchParams();\r\n  const { setInitialGrid } = usePlayer();\r\n  const roomId = searchParams.get(\"roomId\") || \"\";\r\n  const GRID_SIZE = 20;\r\n\r\n  const generateEmptyGrid = () => {\r\n    return Array(GRID_SIZE)\r\n      .fill(null)\r\n      .map(() => Array(GRID_SIZE).fill(\"\"));\r\n  };\r\n\r\n  const [grid, setGrid] = useState<string[][]>(generateEmptyGrid());\r\n  const [hintWords, setHintWords] = useState<HintWord[]>([]);\r\n  const [cellStyles, setCellStyles] = useState<\r\n    Record<string, { background: string; textColor: string }>\r\n  >({}); // Tracks background and text styles\r\n  const [menu, setMenu] = useState<{\r\n    visible: boolean;\r\n    rowIndex?: number;\r\n    colIndex?: number;\r\n  }>({ visible: false });\r\n  const [hintWordsLength, setHintWordsLength] = useState<number[]>([]);\r\n\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n\r\n  const revealCells = (\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    action: \"open\" | \"correct\" | \"incorrect\",\r\n    hintWordNumber?: string\r\n  ) => {\r\n    if (!isHost) return;\r\n\r\n    const hintWordIndex = hintWordNumber ? parseInt(hintWordNumber) - 1 : -1;\r\n    const hintWord = hintWords.find(\r\n      (word) =>\r\n        (word.y === rowIndex && word.direction === \"horizontal\") ||\r\n        (word.x === colIndex && word.direction === \"vertical\")\r\n    );\r\n\r\n    if (!hintWord) return;\r\n\r\n    const isRow = hintWord.direction === \"horizontal\";\r\n    const wordLength =\r\n      hintWordIndex >= 0 && hintWordArray ? hintWordArray[hintWordIndex].length : hintWord.word.length;\r\n    const startIndex = isRow ? colIndex + 1 : rowIndex + 1;\r\n\r\n    setCellStyles((prev) => {\r\n      const newStyles = { ...prev };\r\n      if (isRow) {\r\n        for (let col = startIndex; col < startIndex + wordLength; col++) {\r\n          const key = `${rowIndex}-${col}`;\r\n          // Skip number cells to preserve their appearance\r\n          if (!grid[rowIndex][col].includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setSelectedRow(roomId, hintWordNumber)\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-black\" };\r\n              let indexInTarget = 0\r\n              if (hintWordArray)\r\n                for (let i = 0; i < hintWordArray[hintWordIndex].length; i++) {\r\n                  const char = hintWordArray[hintWordIndex][i];\r\n                  indexInTarget = obstacleWord.indexOf(char);\r\n\r\n                  if (indexInTarget !== -1) {\r\n                    console.log(`First matching character: ${char}`);\r\n                    console.log(`Index in \"${obstacleWord}\": ${indexInTarget}`);\r\n                    break;\r\n                  }\r\n                }\r\n              if (hintWordArray && hintWordNumber)\r\n                setCorrectRow(roomId, hintWordNumber, hintWordArray[hintWordIndex], indexInTarget.toString())\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setIncorectRow(roomId, hintWordNumber)\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        for (let row = startIndex; row < startIndex + wordLength; row++) {\r\n          const key = `${row}-${colIndex}`;\r\n          // Skip number cells to preserve their appearance\r\n          if (!grid[row][colIndex].includes(\"number\")) {\r\n            if (action === \"open\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setSelectedRow(roomId, hintWordNumber)\r\n            } else if (action === \"correct\") {\r\n              newStyles[key] = { background: \"bg-yellow-200\", textColor: \"text-black\" };\r\n              let indexInTarget = 0\r\n              if (hintWordArray)\r\n                for (let i = 0; i < hintWordArray[hintWordIndex].length; i++) {\r\n                  const char = hintWordArray[hintWordIndex][i];\r\n                  indexInTarget = obstacleWord.indexOf(char);\r\n\r\n                  if (indexInTarget !== -1) {\r\n                    console.log(`First matching character: ${char}`);\r\n                    console.log(`Index in \"${obstacleWord}\": ${indexInTarget}`);\r\n                    break;\r\n                  }\r\n                }\r\n              if (hintWordArray && hintWordNumber)\r\n                setCorrectRow(roomId, hintWordNumber, hintWordArray[hintWordIndex], indexInTarget.toString())\r\n            } else if (action === \"incorrect\") {\r\n              newStyles[key] = { background: \"bg-gray-400\", textColor: \"text-transparent\" };\r\n              if (hintWordNumber)\r\n                setIncorectRow(roomId, hintWordNumber)\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return newStyles;\r\n    });\r\n\r\n    // if (action === \"correct\" || action === \"incorrect\") {\r\n    //   setSelectedRow(roomId, isRow ? rowIndex.toString() : colIndex.toString());\r\n    // }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (hintWordArray) {\r\n      hintWordArray.forEach((word, index) => {\r\n        console.log(`Word ${index}: '${word}' has length: ${word.length}`);\r\n        console.log([...word]);\r\n      });\r\n      const lengthArray = hintWordArray.map((word) => word.length);\r\n      setHintWordsLength(lengthArray);\r\n    }\r\n  }, [hintWordArray]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribePlayers = listenToSelectRow(roomId, (rowNumber) => {\r\n      if(initialGrid){\r\n        for (let row = 0; row < initialGrid.length; row++) {\r\n          for (let col = 0; col < initialGrid[row].length; col++) {\r\n            if (grid[row][col] === `number${ro}`) {\r\n              console.log(`Found \"${target}\" at row ${row}, column ${col}`);\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n          if (found) break;\r\n        }\r\n      }\r\n\r\n    });\r\n\r\n    // No need to set state here; it's handled by useState initializer\r\n    return () => {\r\n      unsubscribePlayers();\r\n    };\r\n  }, []);\r\n  // Initialize grid\r\n  useEffect(() => {\r\n    if (isHost) {\r\n      const wordList = [\"GIÓ\", \"HẠTGIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂUKIỆTLUÂN\"];\r\n      console.log(\"wordList\", wordList);\r\n      console.log(\"hintWordArray\", hintWordArray);\r\n      if (hintWordArray && obstacleWord) {\r\n        const { randomHintWords, newGrid } = renderGrid(hintWordArray, obstacleWord, GRID_SIZE);\r\n        console.log(\"randomHintWords\", randomHintWords);\r\n        console.log(\"newGrid\", newGrid);\r\n        setHintWords(randomHintWords);\r\n        setInitialGrid(newGrid);\r\n        setGrid(newGrid);\r\n      }\r\n    } else {\r\n      if (initialGrid) {\r\n        setGrid(initialGrid);\r\n      }\r\n    }\r\n  }, [isHost, hintWordArray, obstacleWord, initialGrid, setInitialGrid]);\r\n\r\n  // Reveal cells in a row or column\r\n\r\n\r\n  // Handle number click to show menu\r\n  const handleNumberClick = (rowIndex: number, colIndex: number) => {\r\n    if (!isHost) return;\r\n    setMenu({\r\n      visible: true,\r\n      rowIndex,\r\n      colIndex,\r\n    });\r\n  };\r\n\r\n  // Handle menu actions\r\n  const handleMenuAction = (\r\n    action: \"open\" | \"correct\" | \"incorrect\",\r\n    rowIndex: number,\r\n    colIndex: number,\r\n    hintWordNumber: string\r\n  ) => {\r\n    revealCells(rowIndex, colIndex, action, hintWordNumber);\r\n    setMenu({ visible: false });\r\n  };\r\n\r\n  // Handle cell click to reveal\r\n  const handleCellClick = (rowIndex: number, colIndex: number) => {\r\n    if (!isHost) return;\r\n    revealCells(rowIndex, colIndex, \"open\");\r\n  };\r\n\r\n  // Close menu on outside click\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n        setMenu({ visible: false });\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6 relative\">\r\n      <div className=\"text-gray-700 text-xl font-semibold text-center mb-4 max-w-[90%]\">\r\n        Trong các giải đấu thể thao, những đội hay vận động viên mạnh sẽ được xếp vào cùng một hoặc nhiều nhóm trong khi bốc thăm để tránh việc gặp nhau sớm. Tên gọi chung của các nhóm vận động viên này là gì?\r\n      </div>\r\n      <div className=\"grid grid-cols-[repeat(20,40px)] grid-rows-[repeat(20,40px)] gap-1 max-h-[400px] overflow-y-scroll\">\r\n        {grid.map((row, rowIndex) => (\r\n          <React.Fragment key={rowIndex}>\r\n            {row.map((cell, colIndex) => {\r\n              const cellKey = `${rowIndex}-${colIndex}`;\r\n              const cellStyle = cellStyles[cellKey] || {\r\n                background: cell === \"\" ? \"bg-white\" : \"bg-gray-50\",\r\n                textColor: cell.includes(\"number\") ? \"text-blue-500\" : \"text-transparent\",\r\n              };\r\n\r\n              const showMenu =\r\n                menu.visible &&\r\n                menu.rowIndex === rowIndex &&\r\n                menu.colIndex === colIndex &&\r\n                cell.includes(\"number\");\r\n\r\n              return (\r\n                <div className=\"relative flex items-center\" key={colIndex}>\r\n                  <div\r\n                    className={`w-10 h-10 flex items-center justify-center text-lg font-semibold select-none\r\n                      ${cell.includes(\"number\") ? \"text-blue-500 border-none\" : \"\"}\r\n                      ${cell.includes(\"number\") ? \"\" : cellStyle.background}\r\n                      ${cell.includes(\"number\") ? \"text-blue-500\" : cellStyle.textColor}\r\n                      ${obstacleWord?.includes(cell) &&\r\n                        cellStyle.textColor === \"text-black\" &&\r\n                        !cell.includes(\"number\") &&\r\n                        isNaN(Number(cell))\r\n                        ? \"font-bold text-red-500\"\r\n                        : \"\"}\r\n                    `}\r\n                    onClick={() => {\r\n                      if (isHost) {\r\n                        if (cell.includes(\"number\")) {\r\n                          handleNumberClick(rowIndex, colIndex);\r\n                        } else {\r\n                          handleCellClick(rowIndex, colIndex);\r\n                        }\r\n                      }\r\n                    }}\r\n                    style={{\r\n                      cursor:\r\n                        isHost &&\r\n                          (cell.includes(\"number\") ||\r\n                            hintWords.some((word) => word.y === rowIndex || word.x === colIndex))\r\n                          ? \"pointer\"\r\n                          : \"default\",\r\n                    }}\r\n                  >\r\n                    {cell.includes(\"number\") ? cell.replace(\"number\", \"\").trim() : cell}\r\n                  </div>\r\n                  {showMenu && (\r\n                    <div\r\n                      ref={menuRef}\r\n                      className=\"absolute left-12 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\"\r\n                    >\r\n                      <button\r\n                        className=\"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n                        onClick={() =>\r\n                          handleMenuAction(\"open\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                        }\r\n                      >\r\n                        SELECT\r\n                      </button>\r\n                      <button\r\n                        className=\"px-2 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600\"\r\n                        onClick={() =>\r\n                          handleMenuAction(\"correct\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                        }\r\n                      >\r\n                        Correct\r\n                      </button>\r\n                      <button\r\n                        className=\"px-2 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600\"\r\n                        onClick={() =>\r\n                          handleMenuAction(\"incorrect\", rowIndex, colIndex, cell.replace(\"number\", \"\"))\r\n                        }\r\n                      >\r\n                        Incorrect\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </React.Fragment>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionBoxRound2;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}