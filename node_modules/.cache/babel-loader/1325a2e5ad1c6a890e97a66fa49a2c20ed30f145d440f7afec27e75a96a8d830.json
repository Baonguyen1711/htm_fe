{"ast":null,"code":"import { getAxiosAuthContext } from \"../../../context/authContext\";\nexport const getTest = async (testName, userId) => {\n  try {\n    const context = getAxiosAuthContext();\n    const {\n      authToken,\n      getAxiosInstance\n    } = context;\n    const axiosInstance = getAxiosInstance();\n    if (!authToken) {\n      throw new Error(\"No token found. Please log in.\");\n    }\n    const response = await axiosInstance(`/api/test/${testName}?test_owner=${userId}`, {\n      method: 'GET',\n      // Phương thức HTTP\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}` // Nếu API yêu cầu token\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch test with ID: ${testName}, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    const data = await response.json();\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const uploadTestToServer = async (file, testName) => {\n  const context = getAxiosAuthContext();\n  const {\n    authToken,\n    getAxiosInstance\n  } = context;\n  const axiosInstance = getAxiosInstance();\n  if (!authToken) {\n    throw new Error(\"No token found. Please log in.\");\n  }\n  // Kiểm tra nếu không có file\n  if (!file) {\n    throw new Error(\"Không có file nào được chọn!\");\n  }\n\n  // Tạo đối tượng FormData để đóng gói file\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  console.log(formData.getAll(\"file\"));\n  try {\n    // Gửi yêu cầu POST tới server\n    const response = await axiosInstance.post(`api/test/upload?test_name=${testName}`, formData, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        'Authorization': `Bearer ${authToken}`\n      },\n      credentials: \"include\"\n    });\n\n    // Kiểm tra phản hồi HTTP\n    if (response.status == 400) {\n      throw new Error(`Upload thất bại: Bộ đề đã tồn tại! chọn bộ đề khác`);\n    }\n    if (!response.ok) {\n      console.log(\"response.status == 400\", response.status == 400);\n      throw new Error(`Upload thất bại: ${response.statusText}`);\n    }\n\n    // Giải mã JSON từ server\n\n    console.log(\"Upload thành công:\", response.data);\n    return {\n      message: \"Upload thành công!\",\n      data: response.data\n    };\n  } catch (error) {\n    console.error(\"Lỗi khi upload file:\", error.message);\n    throw new Error(`Lỗi upload: ${error.message}`);\n  }\n};\nexport const getTestByUserId = async () => {\n  try {\n    const context = getAxiosAuthContext();\n    const {\n      authToken,\n      getAxiosInstance\n    } = context;\n    const axiosInstance = getAxiosInstance();\n    if (!authToken) {\n      throw new Error(\"No token found. Please log in.\");\n    }\n    const response = await axiosInstance(`/api/test/user`, {\n      method: 'GET',\n      // Phương thức HTTP\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}` // Nếu API yêu cầu token\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to fetch test with Status: ${response.status}`);\n    }\n\n    // Access the response data\n    console.log(response.data);\n\n    // Phân tích dữ liệu từ response JSO\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const updateQuestion = async (updateQuestion, question_id, getToken) => {\n  try {\n    const token = await getToken();\n    if (!token) {\n      throw new Error(\"No token found. Please log in.\");\n    }\n    const response = await fetch(`http://127.0.0.1:8000/api/test/update/${question_id}`, {\n      method: 'PUT',\n      // Phương thức HTTP\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Nếu API yêu cầu token\n      },\n      body: JSON.stringify(updateQuestion)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch test with ID: ${question_id}, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};","map":{"version":3,"names":["getAxiosAuthContext","getTest","testName","userId","context","authToken","getAxiosInstance","axiosInstance","Error","response","method","headers","ok","status","data","json","error","console","uploadTestToServer","file","formData","FormData","append","log","getAll","post","credentials","statusText","message","getTestByUserId","withCredentials","updateQuestion","question_id","getToken","token","fetch","body","JSON","stringify"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Test/service.ts"],"sourcesContent":["import { Question } from \"../../../type\";\r\nimport { getAxiosAuthContext } from \"../../../context/authContext\";\r\n\r\nexport const getTest = async (testName: string, userId: string): Promise<any> => {\r\n  try {\r\n    const context = getAxiosAuthContext()\r\n    const { authToken, getAxiosInstance } = context\r\n    const axiosInstance = getAxiosInstance()\r\n    if (!authToken) {\r\n      throw new Error(\"No token found. Please log in.\");\r\n    }\r\n    const response = await axiosInstance(`/api/test/${testName}?test_owner=${userId}`, {\r\n      method: 'GET', // Phương thức HTTP\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${authToken}`, // Nếu API yêu cầu token\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch test with ID: ${testName}, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    const data = await response.json();\r\n    return response.data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n\r\nexport const uploadTestToServer = async (file: File, testName: string): Promise<{ message: string; data?: any }> => {\r\n  const context = getAxiosAuthContext()\r\n  const { authToken, getAxiosInstance } = context\r\n  const axiosInstance = getAxiosInstance()\r\n  if (!authToken) {\r\n    throw new Error(\"No token found. Please log in.\");\r\n  }\r\n  // Kiểm tra nếu không có file\r\n  if (!file) {\r\n    throw new Error(\"Không có file nào được chọn!\");\r\n  }\r\n\r\n  // Tạo đối tượng FormData để đóng gói file\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n\r\n  console.log(formData.getAll(\"file\"))\r\n\r\n  try {\r\n    // Gửi yêu cầu POST tới server\r\n    const response = await axiosInstance.post(`api/test/upload?test_name=${testName}`,formData, {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n        'Authorization': `Bearer ${authToken}`, \r\n      },\r\n      credentials: \"include\",\r\n    });\r\n\r\n    // Kiểm tra phản hồi HTTP\r\n    if (response.status == 400) {\r\n      throw new Error(`Upload thất bại: Bộ đề đã tồn tại! chọn bộ đề khác`);\r\n    }\r\n\r\n    if (!response.ok) {\r\n      console.log(\"response.status == 400\", response.status == 400)\r\n      throw new Error(`Upload thất bại: ${response.statusText}`);\r\n    }\r\n\r\n    // Giải mã JSON từ server\r\n\r\n    console.log(\"Upload thành công:\", response.data);\r\n    return { message: \"Upload thành công!\", data: response.data };\r\n  } catch (error: any) {\r\n    console.error(\"Lỗi khi upload file:\", error.message);\r\n    throw new Error(`Lỗi upload: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const getTestByUserId = async (): Promise<any> => {\r\n  try {\r\n\r\n    const context = getAxiosAuthContext()\r\n    const { authToken, getAxiosInstance } = context\r\n    const axiosInstance = getAxiosInstance()\r\n    if (!authToken) {\r\n      throw new Error(\"No token found. Please log in.\");\r\n    }\r\n    const response = await axiosInstance(`/api/test/user`, {\r\n      method: 'GET', // Phương thức HTTP\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${authToken}`, // Nếu API yêu cầu token\r\n      },\r\n      withCredentials: true,\r\n    });\r\n\r\n    if (response.status !== 200) {\r\n      throw new Error(`Failed to fetch test with Status: ${response.status}`);\r\n    }\r\n    \r\n    // Access the response data\r\n    console.log(response.data);\r\n\r\n    // Phân tích dữ liệu từ response JSO\r\n    return response.data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n\r\nexport const updateQuestion = async (updateQuestion: Partial<Question>, question_id: string, getToken: () => Promise<string | null>): Promise<any> => {\r\n  try {\r\n\r\n    const token = await getToken();\r\n    if (!token) {\r\n      throw new Error(\"No token found. Please log in.\");\r\n    }\r\n\r\n    const response = await fetch(`http://127.0.0.1:8000/api/test/update/${question_id}`, {\r\n      method: 'PUT', // Phương thức HTTP\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`, // Nếu API yêu cầu token\r\n      },\r\n      body: JSON.stringify(updateQuestion)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch test with ID: ${question_id}, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    const data = await response.json();\r\n    return data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}