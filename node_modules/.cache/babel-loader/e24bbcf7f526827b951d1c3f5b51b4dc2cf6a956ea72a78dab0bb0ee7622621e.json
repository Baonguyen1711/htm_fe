{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\context\\\\hostContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, createContext, useContext } from \"react\";\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { getNextQuestion } from '../pages/Host/Test/service';\nimport { sendAnswerToPlayer, startTime } from \"../pages/Host/Management/service\";\nimport { goToNextRound } from \"../components/services\";\nimport { setCurrentPacketQuestion, sendCorrectAnswer } from \"../components/services\";\nimport { deletePath } from \"../services/firebaseServices\";\nimport { useSounds } from \"./soundContext\";\nimport { playSound } from \"../components/services\";\n// Create a context for Axios with Authentication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HostContext = /*#__PURE__*/createContext(null);\nexport const HostProvider = ({\n  children\n}) => {\n  _s();\n  const sounds = useSounds();\n  const spotsNumber = [1, 2, 3, 4];\n  const [searchParams] = useSearchParams();\n  const currentRound = searchParams.get(\"round\") || \"\";\n  const testName = searchParams.get(\"testName\") || \"\";\n  const hostRoomId = searchParams.get(\"roomId\") || \"\";\n  const navigate = useNavigate();\n  const [playerScores, setPlayerScores] = useState([]);\n  const [playerFlashes, setPlayerFlashes] = useState(Array(playerScores.length).fill(\"\"));\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(\"1\");\n  const [currentAnswer, setCurrentAnswer] = useState(\"\");\n  const [timeLeft, setTimeLeft] = useState(30);\n  const [hostInitialGrid, setHostInitialGrid] = useState([]);\n  const [currentQuestionNumber, setCurrentQuestionNumber] = useState(0);\n  const [animationKey, setAnimationKey] = useState(0);\n  const handleScoreAdjust = (index, amount, isCorrect, playerName, avatar) => {\n    console.log(\"playerScores before update \", playerScores);\n    setPlayerScores(prevScores => {\n      const newScores = [...prevScores];\n      console.log(\"index \", index);\n      console.log(\"newScores\", newScores[0].stt);\n      const player = newScores.find(player => player.stt === index.toString());\n      console.log(\"player\", player);\n      if (player) {\n        player.score = (parseInt(player.score) + amount).toString();\n        player.isCorrect = isCorrect;\n        player.isModified = true;\n      }\n      console.log(\"newScores\", player);\n      return player ? newScores : prevScores;\n    });\n    console.log(\"playerScores after update \", playerScores);\n  };\n  const handleNextQuestion = async (topic, difficulty, number) => {\n    if (currentRound === \"3\") {\n      let answer = \"\";\n      console.log(\"currentQuestionIndex\", currentQuestionIndex);\n      console.log(\"type currentQuestionIndex\", typeof currentQuestionIndex);\n      if (currentQuestionIndex != \"1\") {\n        console.log(\"currentQuestionIndex\", currentQuestionIndex);\n        console.log(\"[parseInt(currentQuestionIndex) - 2]\", JSON.parse(localStorage.getItem(\"questions\") || \"\")[parseInt(currentQuestionIndex) - 2]);\n        answer = JSON.parse(localStorage.getItem(\"questions\") || \"\")[parseInt(currentQuestionIndex) - 2].answer || \"\";\n        console.log(\"answer\", answer);\n      }\n      console.log(\"currentQuestionIndex\", currentQuestionIndex);\n      sendCorrectAnswer(hostRoomId, answer);\n      if (currentQuestionIndex === \"12\") {\n        setCurrentQuestionIndex(\"1\");\n        setCurrentPacketQuestion(hostRoomId, parseInt(currentQuestionIndex));\n        sendCorrectAnswer(hostRoomId, \"\");\n        return;\n      }\n      setTimeout(() => {\n        setCurrentPacketQuestion(hostRoomId, parseInt(currentQuestionIndex));\n        setCurrentQuestionIndex(prev => (parseInt(prev) + 1).toString());\n      }, 1000);\n      alert('Moving to the next question!');\n      return;\n    }\n    if (currentRound === \"4\" && difficulty && number) {\n      const question = await getNextQuestion(testName, number, currentRound, hostRoomId, undefined, difficulty);\n      setCurrentAnswer(question.answer);\n      console.log(question);\n      alert('Moving to the next question!');\n      return;\n    }\n    setCurrentQuestionIndex(prev => (parseInt(prev) + 1).toString());\n    const question = await getNextQuestion(testName, currentQuestionIndex, currentRound, hostRoomId);\n    setCurrentAnswer(question.answer);\n    console.log(question);\n    alert('Moving to the next question!');\n  };\n  const handleShowAnswer = async () => {\n    await sendAnswerToPlayer(hostRoomId);\n    alert(\"answer sent!\");\n  };\n  const handleStartTime = async () => {\n    console.log(\"start time on \", hostRoomId);\n    // if (currentRound === \"2\") {\n    //   const playSound = async () => {\n    //     const audio = sounds[`timer_2`];\n    //     if (audio) {\n    //       console.log(\"Attempting to play sound\");\n    //       try {\n    //         await audio.play();\n    //         console.log(\"Sound played successfully\");\n    //       } catch (err) {\n    //         console.error(\"Failed to play sound:\", err);\n    //       }\n    //     }\n    //   }\n\n    //   playSound()\n    // }\n\n    if (currentRound === \"1\") {\n      playSound(hostRoomId, \"timer_1\");\n    }\n    if (currentRound === \"2\") {\n      playSound(hostRoomId, \"timer_2\");\n    }\n    if (currentRound === \"3\") {\n      playSound(hostRoomId, \"timer_3\");\n    }\n    if (currentRound === \"4\") {\n      playSound(hostRoomId, \"timer_4\");\n    }\n    await startTime(hostRoomId);\n    alert(\"time started!\");\n  };\n  const handleStartRound = async (round, roomId, grid) => {\n    if (grid) {\n      console.log(\"grid\", grid);\n      await goToNextRound(roomId, round, grid);\n      alert(\"grid sent!\");\n      return;\n    }\n    console.log(\"roomId\", roomId);\n    await deletePath(roomId, \"questions\");\n    await deletePath(roomId, \"answers\");\n    await goToNextRound(roomId, round);\n  };\n  const handleCorrectAnswer = async answer => {\n    await sendCorrectAnswer(hostRoomId, answer);\n    alert(\"correct answer sent!\");\n  };\n\n  // const getSortedPlayers = (): Player[] => {\n  //     return playerScores\n  //         .map((score, index) => ({ score, index, username: `Player ${index + 1}`, position: index }))\n  //         .sort((a, b) => b.score - a.score)\n  //         .map((player, rank) => ({ ...player, position: rank }));\n  // };\n\n  return /*#__PURE__*/_jsxDEV(HostContext.Provider, {\n    value: {\n      animationKey,\n      setCurrentAnswer,\n      handleScoreAdjust,\n      handleNextQuestion,\n      handleStartRound,\n      currentQuestionIndex,\n      setCurrentQuestionIndex,\n      playerFlashes,\n      setPlayerFlashes,\n      playerScores,\n      setPlayerScores,\n      spotsNumber,\n      handleShowAnswer,\n      handleStartTime,\n      hostInitialGrid,\n      setHostInitialGrid,\n      currentQuestionNumber,\n      setCurrentQuestionNumber,\n      handleCorrectAnswer,\n      currentAnswer\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use Axios with Bearer authentication\n_s(HostProvider, \"GeF4crozlNMj+fxZz2XFx/ZWpTU=\", false, function () {\n  return [useSounds, useSearchParams, useNavigate];\n});\n_c = HostProvider;\nexport const useHost = () => {\n  _s2();\n  return useContext(HostContext);\n};\n_s2(useHost, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"HostProvider\");","map":{"version":3,"names":["useState","createContext","useContext","useNavigate","useSearchParams","getNextQuestion","sendAnswerToPlayer","startTime","goToNextRound","setCurrentPacketQuestion","sendCorrectAnswer","deletePath","useSounds","playSound","jsxDEV","_jsxDEV","HostContext","HostProvider","children","_s","sounds","spotsNumber","searchParams","currentRound","get","testName","hostRoomId","navigate","playerScores","setPlayerScores","playerFlashes","setPlayerFlashes","Array","length","fill","currentQuestionIndex","setCurrentQuestionIndex","currentAnswer","setCurrentAnswer","timeLeft","setTimeLeft","hostInitialGrid","setHostInitialGrid","currentQuestionNumber","setCurrentQuestionNumber","animationKey","setAnimationKey","handleScoreAdjust","index","amount","isCorrect","playerName","avatar","console","log","prevScores","newScores","stt","player","find","toString","score","parseInt","isModified","handleNextQuestion","topic","difficulty","number","answer","JSON","parse","localStorage","getItem","setTimeout","prev","alert","question","undefined","handleShowAnswer","handleStartTime","handleStartRound","round","roomId","grid","handleCorrectAnswer","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useHost","_s2","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/context/hostContext.tsx"],"sourcesContent":["\r\nimport { useEffect, useState, createContext, useContext } from \"react\";\r\nimport { User, Score } from \"../type\";\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport { getNextQuestion } from '../pages/Host/Test/service';\r\nimport { sendAnswerToPlayer, startTime } from \"../pages/Host/Management/service\";\r\nimport { sendGridToPlayers, goToNextRound } from \"../components/services\";\r\nimport { setCurrentChunk, setCurrentPacketQuestion, sendCorrectAnswer } from \"../components/services\";\r\nimport { deletePath } from \"../services/firebaseServices\";\r\nimport { round } from \"react-placeholder/lib/placeholders\";\r\nimport { useSounds } from \"./soundContext\";\r\nimport { playSound } from \"../components/services\";\r\n// Create a context for Axios with Authentication\r\nconst HostContext = createContext<any>(null);\r\n\r\nexport const HostProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const sounds = useSounds();\r\n  const spotsNumber = [1, 2, 3, 4]\r\n  const [searchParams] = useSearchParams()\r\n  const currentRound = searchParams.get(\"round\") || \"\"\r\n  const testName = searchParams.get(\"testName\") || \"\"\r\n  const hostRoomId = searchParams.get(\"roomId\") || \"\"\r\n  const navigate = useNavigate()\r\n  const [playerScores, setPlayerScores] = useState<Score[]>([]);\r\n  const [playerFlashes, setPlayerFlashes] = useState(Array(playerScores.length).fill(\"\"));\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<string>(\"1\")\r\n  const [currentAnswer, setCurrentAnswer] = useState<string>(\"\")\r\n  const [timeLeft, setTimeLeft] = useState(30);\r\n  const [hostInitialGrid, setHostInitialGrid] = useState<string[][]>([])\r\n  const [currentQuestionNumber, setCurrentQuestionNumber] = useState<Number>(0)\r\n  const [animationKey, setAnimationKey] = useState(0);\r\n  \r\n\r\n  const handleScoreAdjust = (index: string, amount: number, isCorrect: boolean, playerName: string, avatar: string) => {\r\n    console.log(\"playerScores before update \", playerScores);\r\n\r\n    setPlayerScores((prevScores) => {\r\n      const newScores = [...prevScores];\r\n      console.log(\"index \", index);\r\n      console.log(\"newScores\", newScores[0].stt);\r\n      const player: any = newScores.find((player) => player.stt === index.toString())\r\n      console.log(\"player\", player);\r\n      if (player) {\r\n        player.score = (parseInt(player.score) + amount).toString();\r\n        player.isCorrect = isCorrect;\r\n        player.isModified = true;\r\n      }\r\n\r\n      console.log(\"newScores\", player);\r\n\r\n      return player ? newScores : prevScores;\r\n\r\n    });\r\n\r\n    console.log(\"playerScores after update \", playerScores);\r\n  };\r\n\r\n  const handleNextQuestion = async (topic?: string, difficulty?: string, number?: string) => {\r\n    if (currentRound === \"3\") {\r\n      let answer = \"\"\r\n      console.log(\"currentQuestionIndex\", currentQuestionIndex);\r\n      console.log(\"type currentQuestionIndex\", typeof currentQuestionIndex);\r\n\r\n\r\n      if (currentQuestionIndex != \"1\") {\r\n        console.log(\"currentQuestionIndex\", currentQuestionIndex);\r\n        console.log(\"[parseInt(currentQuestionIndex) - 2]\", JSON.parse(localStorage.getItem(\"questions\") || \"\")[parseInt(currentQuestionIndex) - 2]);\r\n\r\n        answer = JSON.parse(localStorage.getItem(\"questions\") || \"\")[parseInt(currentQuestionIndex) - 2].answer || \"\"\r\n        console.log(\"answer\", answer);\r\n      }\r\n\r\n      console.log(\"currentQuestionIndex\", currentQuestionIndex);\r\n\r\n\r\n      sendCorrectAnswer(hostRoomId, answer)\r\n\r\n      if (currentQuestionIndex === \"12\") {\r\n        setCurrentQuestionIndex(\"1\")\r\n        setCurrentPacketQuestion(hostRoomId, parseInt(currentQuestionIndex));\r\n        sendCorrectAnswer(hostRoomId, \"\")\r\n        return\r\n      }\r\n      setTimeout(() => {\r\n        setCurrentPacketQuestion(hostRoomId, parseInt(currentQuestionIndex));\r\n        setCurrentQuestionIndex((prev) => (parseInt(prev) + 1).toString());\r\n      }, 1000);\r\n\r\n      alert('Moving to the next question!');\r\n      return\r\n    }\r\n\r\n    if (currentRound === \"4\" && difficulty && number) {\r\n      const question = await getNextQuestion(testName, number, currentRound, hostRoomId, undefined, difficulty)\r\n      setCurrentAnswer(question.answer)\r\n      console.log(question)\r\n      alert('Moving to the next question!')\r\n      return\r\n    }\r\n    setCurrentQuestionIndex((prev) => (parseInt(prev) + 1).toString())\r\n    const question = await getNextQuestion(testName, currentQuestionIndex, currentRound, hostRoomId)\r\n    setCurrentAnswer(question.answer)\r\n    console.log(question)\r\n    alert('Moving to the next question!');\r\n  };\r\n\r\n  const handleShowAnswer = async () => {\r\n    await sendAnswerToPlayer(hostRoomId)\r\n    alert(\"answer sent!\")\r\n  };\r\n\r\n  const handleStartTime = async () => {\r\n    console.log(\"start time on \", hostRoomId);\r\n    // if (currentRound === \"2\") {\r\n    //   const playSound = async () => {\r\n    //     const audio = sounds[`timer_2`];\r\n    //     if (audio) {\r\n    //       console.log(\"Attempting to play sound\");\r\n    //       try {\r\n    //         await audio.play();\r\n    //         console.log(\"Sound played successfully\");\r\n    //       } catch (err) {\r\n    //         console.error(\"Failed to play sound:\", err);\r\n    //       }\r\n    //     }\r\n    //   }\r\n\r\n    //   playSound()\r\n    // }\r\n\r\n    if (currentRound === \"1\") {\r\n      playSound(hostRoomId, \"timer_1\");\r\n    }\r\n\r\n    if (currentRound === \"2\") {\r\n      playSound(hostRoomId, \"timer_2\");\r\n    }\r\n\r\n    if (currentRound === \"3\") {\r\n      playSound(hostRoomId, \"timer_3\");\r\n    }\r\n\r\n    if (currentRound === \"4\") {\r\n      playSound(hostRoomId, \"timer_4\");\r\n    }\r\n\r\n    await startTime(hostRoomId);\r\n    alert(\"time started!\");\r\n  }\r\n\r\n  const handleStartRound = async (round: string, roomId: string, grid?: string[][]) => {\r\n    if (grid) {\r\n      console.log(\"grid\", grid)\r\n      await goToNextRound(roomId, round, grid)\r\n      alert(\"grid sent!\")\r\n      return;\r\n    }\r\n    console.log(\"roomId\", roomId);\r\n    \r\n    await deletePath(roomId, \"questions\");\r\n    await deletePath(roomId, \"answers\");\r\n    await goToNextRound(roomId, round)\r\n\r\n  }\r\n\r\n  const handleCorrectAnswer = async (answer: string) => {\r\n    await sendCorrectAnswer(hostRoomId, answer)\r\n    alert(\"correct answer sent!\")\r\n  }\r\n\r\n\r\n  // const getSortedPlayers = (): Player[] => {\r\n  //     return playerScores\r\n  //         .map((score, index) => ({ score, index, username: `Player ${index + 1}`, position: index }))\r\n  //         .sort((a, b) => b.score - a.score)\r\n  //         .map((player, rank) => ({ ...player, position: rank }));\r\n  // };\r\n\r\n  return (\r\n    <HostContext.Provider value={{ animationKey, setCurrentAnswer, handleScoreAdjust, handleNextQuestion, handleStartRound, currentQuestionIndex, setCurrentQuestionIndex, playerFlashes, setPlayerFlashes, playerScores, setPlayerScores, spotsNumber, handleShowAnswer, handleStartTime, hostInitialGrid, setHostInitialGrid, currentQuestionNumber, setCurrentQuestionNumber, handleCorrectAnswer, currentAnswer }}>\r\n      {children}\r\n    </HostContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use Axios with Bearer authentication\r\nexport const useHost = () => {\r\n  return useContext(HostContext);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}