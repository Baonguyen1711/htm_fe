{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\FinalScore\\\\PlayerFinalScore.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport FinalScore from '../../components/FinalScore';\nimport { useSounds } from '../../context/soundContext';\nimport { listenToSound } from '../../services/firebaseServices';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerFinalScore = () => {\n  _s();\n  const sounds = useSounds();\n  useEffect(() => {\n    const unsubscribePlayers = listenToSound(roomId, async type => {\n      const audio = sounds[`${type}`];\n      if (audio) {\n        audio.play();\n      }\n      console.log(\"sound type\", type);\n      await deletePath(roomId, \"sound\");\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(FinalScore, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(PlayerFinalScore, \"U25W+DUBoqrd1up6sNFgu9IIaWM=\", false, function () {\n  return [useSounds];\n});\n_c = PlayerFinalScore;\nexport default PlayerFinalScore;\nvar _c;\n$RefreshReg$(_c, \"PlayerFinalScore\");","map":{"version":3,"names":["React","useEffect","FinalScore","useSounds","listenToSound","jsxDEV","_jsxDEV","PlayerFinalScore","_s","sounds","unsubscribePlayers","roomId","type","audio","play","console","log","deletePath","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/FinalScore/PlayerFinalScore.tsx"],"sourcesContent":["import React, {useEffect} from 'react';\r\nimport FinalScore from '../../components/FinalScore';\r\nimport { useSounds } from '../../context/soundContext';\r\nimport { listenToSound } from '../../services/firebaseServices';\r\nconst PlayerFinalScore: React.FC = () => {\r\n    const sounds = useSounds();\r\n    useEffect(() => {\r\n        const unsubscribePlayers = listenToSound(roomId, async (type) => {\r\n\r\n            const audio = sounds[`${type}`];\r\n            if (audio) {\r\n                audio.play();\r\n            }\r\n            console.log(\"sound type\", type)\r\n            await deletePath(roomId, \"sound\")\r\n        });\r\n\r\n        // No need to set state here; it's handled by useState initializer\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <FinalScore />\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default PlayerFinalScore;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,OAAOC,UAAU,MAAM,6BAA6B;AACpD,SAASC,SAAS,QAAQ,4BAA4B;AACtD,SAASC,aAAa,QAAQ,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChE,MAAMC,gBAA0B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAMC,MAAM,GAAGN,SAAS,CAAC,CAAC;EAC1BF,SAAS,CAAC,MAAM;IACZ,MAAMS,kBAAkB,GAAGN,aAAa,CAACO,MAAM,EAAE,MAAOC,IAAI,IAAK;MAE7D,MAAMC,KAAK,GAAGJ,MAAM,CAAC,GAAGG,IAAI,EAAE,CAAC;MAC/B,IAAIC,KAAK,EAAE;QACPA,KAAK,CAACC,IAAI,CAAC,CAAC;MAChB;MACAC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEJ,IAAI,CAAC;MAC/B,MAAMK,UAAU,CAACN,MAAM,EAAE,OAAO,CAAC;IACrC,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACTD,kBAAkB,CAAC,CAAC;IACxB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIJ,OAAA,CAACJ,UAAU;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEtB,CAAC;AAACb,EAAA,CAtBID,gBAA0B;EAAA,QACbJ,SAAS;AAAA;AAAAmB,EAAA,GADtBf,gBAA0B;AA0BhC,eAAeA,gBAAgB;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}