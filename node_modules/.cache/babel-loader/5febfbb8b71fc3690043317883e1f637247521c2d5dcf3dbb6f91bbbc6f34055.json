{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Player\\\\PlayerQuestionBoxRound4.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { usePlayer } from '../../../context/playerContext';\nimport { listenToTimeStart } from '../../../services/firebaseServices';\nimport { useTimeStart } from '../../../context/timeListenerContext';\nimport { useSounds } from '../../../context/soundContext';\nimport { useGameListeners } from '../../../hooks/useListener';\nimport GameGrid from '../../../components/ui/GameGrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerQuestionBoxRound4 = ({\n  initialGrid,\n  isSpectator\n}) => {\n  _s();\n  const colorMap = {\n    red: '#FF0000',\n    green: '#00FF00',\n    blue: '#0000FF',\n    yellow: '#FFFF00'\n  };\n  const sounds = useSounds();\n  const {\n    startTimer,\n    timeLeft,\n    setTimeLeft\n  } = useTimeStart();\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(\"\");\n  const [correctAnswer, setCorrectAnswer] = useState(\"\");\n  const [gridColors, setGridColors] = useState(Array(5).fill(null).map(() => Array(5).fill('#FFFFFF')) // Default grid colors are white\n  );\n  const [menu, setMenu] = useState({\n    visible: false\n  });\n  const [selectedCell, setSelectedCell] = useState(null);\n  const menuRef = useRef(null);\n  const [searchParams] = useSearchParams();\n  const roomId = searchParams.get(\"roomId\") || \"4\";\n  const {\n    setEasyQuestionNumber,\n    setMediumQuestionNumber,\n    setHardQuestionNumber,\n    setLevel,\n    animationKey,\n    setAnimationKey\n  } = usePlayer();\n  const [buzzedPlayer, setBuzzedPlayer] = useState(\"\");\n  const [staredPlayer, setStaredPlayer] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n  const isInitialTimerMount = useRef(false);\n  useGameListeners({\n    roomId,\n    setBuzzedPlayer,\n    setStaredPlayer,\n    setShowModal,\n    setCorrectAnswer,\n    setCurrentQuestion,\n    setGridColors,\n    setSelectedCell,\n    sounds,\n    round: \"4\",\n    startTimer\n  });\n  useEffect(() => {\n    console.log(\"timeLeft\", timeLeft);\n    if (isInitialTimerMount.current) {\n      isInitialTimerMount.current = false;\n      return;\n    }\n    if (timeLeft === 0) {\n      setAnimationKey(prev => prev + 1);\n    }\n  }, [timeLeft]);\n  const isInitialMount = useRef(false);\n  useEffect(() => {\n    const unsubscribe = listenToTimeStart(roomId, async () => {\n      // Skip the timer setting on the first mount, but allow future calls to run\n      if (isInitialMount.current) {\n        isInitialMount.current = false;\n        return;\n      }\n      startTimer(15);\n      return () => {\n        unsubscribe();\n      };\n    });\n  }, []);\n  const handleCloseModal = () => {\n    setShowModal(false);\n    // Optionally clear buzzedPlayer if you want to reset it\n    setBuzzedPlayer(\"\");\n  };\n  const handleCellClick = () => {};\n  const handleMenuAction = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-slate-800/80 backdrop-blur-sm rounded-2xl border border-blue-400/30 shadow-2xl p-6 mb-4 w-full max-w-3xl mx-auto min-h-[470px]\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold text-cyan-200 mb-2 text-center drop-shadow\",\n      children: currentQuestion || \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), correctAnswer && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold text-green-300 mb-4 text-center drop-shadow\",\n      children: correctAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(GameGrid, {\n      initialGrid: initialGrid,\n      gridColors: gridColors,\n      menu: menu,\n      isHost: true,\n      isSpectator: isSpectator,\n      showModal: showModal,\n      buzzedPlayer: buzzedPlayer,\n      staredPlayer: staredPlayer,\n      menuRef: menuRef,\n      onCellClick: handleCellClick,\n      onMenuAction: handleMenuAction,\n      onCloseModal: handleCloseModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n_s(PlayerQuestionBoxRound4, \"NgBt23wPe8hGuw3uvszB1chhBAM=\", false, function () {\n  return [useSounds, useTimeStart, useSearchParams, usePlayer, useGameListeners];\n});\n_c = PlayerQuestionBoxRound4;\nexport default PlayerQuestionBoxRound4;\nvar _c;\n$RefreshReg$(_c, \"PlayerQuestionBoxRound4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useSearchParams","usePlayer","listenToTimeStart","useTimeStart","useSounds","useGameListeners","GameGrid","jsxDEV","_jsxDEV","PlayerQuestionBoxRound4","initialGrid","isSpectator","_s","colorMap","red","green","blue","yellow","sounds","startTimer","timeLeft","setTimeLeft","selectedQuestion","setSelectedQuestion","currentQuestion","setCurrentQuestion","correctAnswer","setCorrectAnswer","gridColors","setGridColors","Array","fill","map","menu","setMenu","visible","selectedCell","setSelectedCell","menuRef","searchParams","roomId","get","setEasyQuestionNumber","setMediumQuestionNumber","setHardQuestionNumber","setLevel","animationKey","setAnimationKey","buzzedPlayer","setBuzzedPlayer","staredPlayer","setStaredPlayer","showModal","setShowModal","isInitialTimerMount","round","console","log","current","prev","isInitialMount","unsubscribe","handleCloseModal","handleCellClick","handleMenuAction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isHost","onCellClick","onMenuAction","onCloseModal","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Player/PlayerQuestionBoxRound4.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { usePlayer } from '../../../context/playerContext';\r\nimport { deletePath, listenToTimeStart, listenToSound, listenToQuestions, listenToSelectedCell, listenToCellColor, listenToAnswers, listenToBuzzing, listenToStar } from '../../../services/firebaseServices';\r\nimport { useTimeStart } from '../../../context/timeListenerContext';\r\nimport { useSounds } from '../../../context/soundContext';\r\nimport { useGameListeners } from '../../../hooks/useListener';\r\nimport GameGrid from '../../../components/ui/GameGrid';\r\ninterface QuestionComponentProps {\r\n    initialGrid: string[][]; // 5x5 grid (can be passed from parent or generated)\r\n    questions: string[]; // Array of questions for testing\r\n    isSpectator?: boolean; // Indicates whether the user is a spectator\r\n    isHost?: boolean; // Indicates whether the user is the host\r\n}\r\n\r\nconst PlayerQuestionBoxRound4: React.FC<QuestionComponentProps> = ({\r\n    initialGrid,\r\n    isSpectator,\r\n}) => {\r\n    const colorMap: Record<string, string> = {\r\n        red: '#FF0000',\r\n        green: '#00FF00',\r\n        blue: '#0000FF',\r\n        yellow: '#FFFF00',\r\n    };\r\n    const sounds = useSounds();\r\n    const { startTimer, timeLeft, setTimeLeft } = useTimeStart();\r\n    const [selectedQuestion, setSelectedQuestion] = useState<string | null>(null);\r\n    const [currentQuestion, setCurrentQuestion] = useState<string>(\"\")\r\n    const [correctAnswer, setCorrectAnswer] = useState<string>(\"\")\r\n    const [gridColors, setGridColors] = useState<string[][]>(\r\n        Array(5).fill(null).map(() => Array(5).fill('#FFFFFF')) // Default grid colors are white\r\n    );\r\n    const [menu, setMenu] = useState<{\r\n        visible: boolean;\r\n        rowIndex?: number;\r\n        colIndex?: number;\r\n    }>({ visible: false });\r\n    const [selectedCell, setSelectedCell] = useState<{ row: number; col: number } | null>(null);\r\n    const menuRef = useRef<HTMLDivElement>(null);\r\n    const [searchParams] = useSearchParams()\r\n    const roomId = searchParams.get(\"roomId\") || \"4\"\r\n    const { setEasyQuestionNumber, setMediumQuestionNumber, setHardQuestionNumber, setLevel, animationKey, setAnimationKey } = usePlayer()\r\n    const [buzzedPlayer, setBuzzedPlayer] = useState<string>(\"\");\r\n    const [staredPlayer, setStaredPlayer] = useState<string>(\"\");\r\n    const [showModal, setShowModal] = useState(false);\r\n    const isInitialTimerMount = useRef(false)\r\n\r\n    useGameListeners({\r\n        roomId,\r\n        setBuzzedPlayer,\r\n        setStaredPlayer,\r\n        setShowModal,\r\n        setCorrectAnswer,\r\n        setCurrentQuestion,\r\n        setGridColors,\r\n        setSelectedCell,\r\n        sounds,\r\n        round:\"4\",\r\n        startTimer\r\n    }\r\n    )\r\n    useEffect(() => {\r\n        console.log(\"timeLeft\", timeLeft);\r\n        if (isInitialTimerMount.current) {\r\n            isInitialTimerMount.current = false;\r\n            return;\r\n        }\r\n        if (timeLeft === 0) {\r\n            setAnimationKey((prev: number) => prev + 1);\r\n        }\r\n    }, [timeLeft]);\r\n\r\n    const isInitialMount = useRef(false)\r\n    useEffect(() => {\r\n        const unsubscribe = listenToTimeStart(roomId, async () => {\r\n\r\n\r\n            // Skip the timer setting on the first mount, but allow future calls to run\r\n            if (isInitialMount.current) {\r\n                isInitialMount.current = false;\r\n                return;\r\n            }\r\n            startTimer(15)\r\n            return () => {\r\n                unsubscribe();\r\n\r\n            };\r\n        })\r\n\r\n    }, [])\r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        // Optionally clear buzzedPlayer if you want to reset it\r\n        setBuzzedPlayer(\"\");\r\n    };\r\n\r\n    const handleCellClick = () => {\r\n\r\n    };\r\n\r\n\r\n    const handleMenuAction = () => {\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center bg-slate-800/80 backdrop-blur-sm rounded-2xl border border-blue-400/30 shadow-2xl p-6 mb-4 w-full max-w-3xl mx-auto min-h-[470px]\">\r\n            {/* Display selected question */}\r\n            <h2 className=\"text-2xl font-bold text-cyan-200 mb-2 text-center drop-shadow\">\r\n                {currentQuestion || \"\"}\r\n            </h2>\r\n            {correctAnswer && (\r\n                <h2 className=\"text-xl font-semibold text-green-300 mb-4 text-center drop-shadow\">\r\n                    {correctAnswer}\r\n                </h2>\r\n            )}\r\n\r\n            <GameGrid\r\n                initialGrid={initialGrid}\r\n                gridColors={gridColors}\r\n                menu={menu}\r\n                isHost={true}\r\n                isSpectator={isSpectator}\r\n                showModal={showModal}\r\n                buzzedPlayer={buzzedPlayer}\r\n                staredPlayer={staredPlayer}\r\n                menuRef={menuRef}\r\n                onCellClick={handleCellClick}\r\n                onMenuAction={handleMenuAction}\r\n                onCloseModal={handleCloseModal}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayerQuestionBoxRound4;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}