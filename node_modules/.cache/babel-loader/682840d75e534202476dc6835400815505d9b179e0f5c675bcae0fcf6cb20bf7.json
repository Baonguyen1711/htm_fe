{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Host\\\\HostQuestionBoxRound4.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { sendSelectedCell, sendCellColor } from '../../../components/services';\nimport { useSearchParams } from 'react-router-dom';\nimport { usePlayer } from '../../../context/playerContext';\nimport { useTimeStart } from '../../../context/timeListenerContext';\nimport { resetBuzz } from '../../../components/services';\nimport { useSounds } from '../../../context/soundContext';\nimport { useGameListeners } from '../../../hooks/useListener';\nimport GameGrid from '../../../components/ui/GameGrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exampleGrid = [['!', '', '?', '', '!'], ['', '?', '!', '', '?'], ['?', '', '', '!', '?'], ['!', '?', '', '', '!'], ['?', '!', '', '?', '']];\n\n// Example questions for testing\nconst exampleQuestions = ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5', 'Question 6', 'Question 7', 'Question 8', 'Question 9', 'Question 10', 'Question 11', 'Question 12', 'Question 13', 'Question 14', 'Question 15', 'Question 16', 'Question 17', 'Question 18', 'Question 19', 'Question 20', 'Question 21', 'Question 22', 'Question 23', 'Question 24', 'Question 25'];\nconst HostQuestionBoxRound4 = ({\n  initialGrid,\n  questions,\n  isSpectator,\n  isHost = false\n}) => {\n  _s();\n  function generateRandomGrid() {\n    const size = 5;\n    const totalCells = size * size; // 25\n    const symbols = [\"\", \"!\", \"?\"];\n\n    // Generate counts for symbols (4-8 each, total 25)\n    let counts = [];\n    let remainingCells = totalCells;\n    for (let i = 0; i < 2; i++) {\n      const max = Math.min(8, remainingCells - 7 - (2 - i) * 7);\n      const min = 7;\n      const count = Math.floor(Math.random() * (max - min + 1)) + min;\n      counts.push(count);\n      remainingCells -= count;\n    }\n    if (remainingCells < 7 || remainingCells > 9) {\n      if (remainingCells > 9) {\n        let excess = remainingCells - 9;\n        counts[1] -= Math.ceil(excess / 2);\n        counts[0] -= Math.floor(excess / 2);\n        counts.push(9);\n      } else {\n        let needed = 7 - remainingCells;\n        counts[1] += Math.ceil(needed / 2);\n        counts[0] += Math.floor(needed / 2);\n        counts.push(7);\n      }\n    } else {\n      counts.push(remainingCells);\n    }\n\n    // Create symbol array\n    let symbolArray = [];\n    for (let i = 0; i < symbols.length; i++) {\n      for (let j = 0; j < counts[i]; j++) {\n        symbolArray.push(symbols[i]);\n      }\n    }\n\n    // Shuffle array\n    for (let i = symbolArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [symbolArray[i], symbolArray[j]] = [symbolArray[j], symbolArray[i]];\n    }\n\n    // Create 5x5 grid\n    let grid = [];\n    let index = 0;\n    for (let i = 0; i < size; i++) {\n      let row = [];\n      for (let j = 0; j < size; j++) {\n        row.push(symbolArray[index++]);\n      }\n      grid.push(row);\n    }\n\n    // Ensure each row has at least one \"!\" or \"?\"\n    for (let i = 0; i < size; i++) {\n      const hasNonEmpty = grid[i].some(cell => cell === \"!\" || cell === \"?\");\n      if (!hasNonEmpty) {\n        // Find a row with multiple \"!\" or \"?\" to swap\n        let donorRow = -1;\n        let donorCol = -1;\n        for (let r = 0; r < size; r++) {\n          if (r === i) continue;\n          const nonEmptyCount = grid[r].filter(cell => cell === \"!\" || cell === \"?\").length;\n          if (nonEmptyCount > 1) {\n            for (let c = 0; c < size; c++) {\n              if (grid[r][c] === \"!\" || grid[r][c] === \"?\") {\n                donorRow = r;\n                donorCol = c;\n                break;\n              }\n            }\n            if (donorRow !== -1) break;\n          }\n        }\n        if (donorRow !== -1) {\n          // Swap with an empty cell in the target row\n          for (let c = 0; c < size; c++) {\n            if (grid[i][c] === \"\") {\n              [grid[i][c], grid[donorRow][donorCol]] = [grid[donorRow][donorCol], grid[i][c]];\n              break;\n            }\n          }\n        } else {\n          // Place \"!\" in an empty cell and adjust elsewhere\n          for (let c = 0; c < size; c++) {\n            if (grid[i][c] === \"\") {\n              grid[i][c] = \"!\";\n              // Replace a \"!\" elsewhere with \"\"\n              for (let r = 0; r < size; r++) {\n                if (r === i) continue;\n                for (let c2 = 0; c2 < size; c2++) {\n                  if (grid[r][c2] === \"!\") {\n                    grid[r][c2] = \"\";\n                    break;\n                  }\n                }\n                if (grid[r].some(cell => cell === \"\")) break;\n              }\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    // Verify counts\n    const finalCounts = {\n      \"\": 0,\n      \"!\": 0,\n      \"?\": 0\n    };\n    for (const row of grid) {\n      for (const cell of row) {\n        finalCounts[cell]++;\n      }\n    }\n    if (Object.values(finalCounts).some(count => count < 7 || count > 9)) {\n      return generateRandomGrid();\n    }\n    return grid;\n  }\n  const handleSuffleGrid = () => {\n    console.log(\"start generating grid\");\n    const newGrid = generateRandomGrid();\n    console.log(\"newGrid\", newGrid);\n    setGrid(newGrid);\n    setInitialGrid(newGrid);\n  };\n  const colorMap = {\n    red: '#FF0000',\n    green: '#00FF00',\n    blue: '#0000FF',\n    yellow: '#FFFF00'\n  };\n  const [grid, setGrid] = useState([[]]);\n  const sounds = useSounds();\n  const {\n    startTimer,\n    timeLeft,\n    setTimeLeft\n  } = useTimeStart();\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(\"\");\n  const [correctAnswer, setCorrectAnswer] = useState(\"\");\n  const [gridColors, setGridColors] = useState(Array(5).fill(null).map(() => Array(5).fill('#FFFFFF')) // Default grid colors are white\n  );\n  const [menu, setMenu] = useState({\n    visible: false\n  });\n  const [selectedCell, setSelectedCell] = useState(null);\n  const menuRef = useRef(null);\n  const [searchParams] = useSearchParams();\n  const roomId = searchParams.get(\"roomId\") || \"4\";\n  const {\n    setEasyQuestionNumber,\n    setMediumQuestionNumber,\n    setHardQuestionNumber,\n    setLevel,\n    animationKey,\n    setAnimationKey,\n    setInitialGrid\n  } = usePlayer();\n  const [buzzedPlayer, setBuzzedPlayer] = useState(\"\");\n  const [staredPlayer, setStaredPlayer] = useState(\"\");\n  const [showModal, setShowModal] = useState(false); // State for modal visibility\n  const isInitialTimerMount = useRef(false);\n  useGameListeners({\n    roomId,\n    setBuzzedPlayer,\n    setStaredPlayer,\n    setShowModal,\n    setCorrectAnswer,\n    setCurrentQuestion,\n    setGridColors,\n    setSelectedCell,\n    sounds,\n    round: \"4\",\n    startTimer\n  });\n  useEffect(() => {\n    if (initialGrid) {\n      setGrid(initialGrid);\n      setInitialGrid(initialGrid);\n    }\n  }, []);\n  useEffect(() => {\n    console.log(\"timeLeft\", timeLeft);\n    if (isInitialTimerMount.current) {\n      isInitialTimerMount.current = false;\n      return;\n    }\n    if (timeLeft === 0) {\n      setAnimationKey(prev => prev + 1);\n    }\n  }, [timeLeft]);\n\n  // const isInitialMount = useRef(false)\n  // useEffect(() => {\n  //     const unsubscribe = listenToTimeStart(roomId, async () => {\n\n  //         // Skip the timer setting on the first mount, but allow future calls to run\n  //         if (isInitialMount.current) {\n  //             isInitialMount.current = false;\n  //             return;\n  //         }\n  //         startTimer(15)\n  //         return () => {\n  //             unsubscribe();\n\n  //         };\n  //     })\n\n  // }, [])\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n    // Optionally clear buzzedPlayer if you want to reset it\n    setBuzzedPlayer(\"\");\n    if (isHost) {\n      resetBuzz(roomId);\n    }\n  };\n  // Function to handle cell click (only for host)\n  const handleCellClick = (row, col) => {\n    if (!isHost) return; // Prevent non-host users from interacting\n    setMenu({\n      visible: true,\n      rowIndex: row,\n      colIndex: col\n    });\n  };\n\n  // Function to handle menu actions\n  const handleMenuAction = (action, row, col) => {\n    if (action === 'select') {\n      if (initialGrid[row][col] == \"\") {\n        setLevel(\"Dễ\");\n      }\n      if (initialGrid[row][col] == \"!\") {\n        setLevel(\"Trung bình\");\n      }\n      if (initialGrid[row][col] == \"?\") {\n        setLevel(\"Khó\");\n      }\n      sendSelectedCell(roomId, col.toString(), row.toString());\n      const questionIndex = row * 5 + col; // Calculate question index from grid position\n      if (questions[questionIndex]) {\n        setSelectedQuestion(questions[questionIndex]);\n        setGridColors(prev => {\n          const newGrid = prev.map(rowArray => [...rowArray]);\n          // Reset the previously selected cell to white, if it exists and wasn't colored otherwise\n          if (selectedCell) {\n            const {\n              row: prevRow,\n              col: prevCol\n            } = selectedCell;\n            // Only reset if the cell is still light yellow (i.e., not changed by color buttons)\n            if (newGrid[prevRow][prevCol] === '#FFFF99') {\n              newGrid[prevRow][prevCol] = '#FFFFFF';\n            }\n          }\n          // Set the current cell to light yellow\n          newGrid[row][col] = '#FFFF99'; // Light yellow\n          return newGrid;\n        });\n        // Update the selected cell\n        setSelectedCell({\n          row,\n          col\n        });\n      }\n    } else {\n      sendCellColor(roomId, col.toString(), row.toString(), action);\n      // Set the cell color based on the selected action\n\n      setGridColors(prev => {\n        const newGrid = prev.map(rowArray => [...rowArray]);\n        newGrid[row][col] = colorMap[action];\n        return newGrid;\n      });\n      // If the cell was previously selected, clear the selection\n      if (selectedCell && selectedCell.row === row && selectedCell.col === col) {\n        setSelectedCell(null);\n      }\n    }\n    setMenu({\n      visible: false\n    }); // Close the menu\n  };\n  const lastBuzzedPlayerRef = useRef(null);\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setMenu({\n          visible: false\n        });\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-slate-800/80 backdrop-blur-sm rounded-2xl border border-blue-400/30 shadow-2xl p-6 mb-4 w-full max-w-3xl mx-auto min-h-[470px]\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold text-cyan-200 mb-2 text-center drop-shadow\",\n      children: currentQuestion || \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 13\n    }, this), correctAnswer && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold text-green-300 mb-4 text-center drop-shadow\",\n      children: correctAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(GameGrid, {\n      initialGrid: grid,\n      gridColors: gridColors,\n      menu: menu,\n      isHost: true,\n      isSpectator: isSpectator,\n      showModal: showModal,\n      buzzedPlayer: buzzedPlayer,\n      staredPlayer: staredPlayer,\n      menuRef: menuRef,\n      onCellClick: handleCellClick,\n      onMenuAction: handleMenuAction,\n      onCloseModal: handleCloseModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 mt-4 w-full\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleSuffleGrid();\n        },\n        className: \"bg-indigo-600 hover:bg-indigo-700 text-white p-2 flex-1 rounded-md whitespace-nowrap\",\n        children: \"X\\xE1o tr\\u1ED9n h\\xE0ng ngang\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 9\n  }, this);\n};\n_s(HostQuestionBoxRound4, \"I+EtjZCmI5H4s4AuFxSkQJBaR40=\", false, function () {\n  return [useSounds, useTimeStart, useSearchParams, usePlayer, useGameListeners];\n});\n_c = HostQuestionBoxRound4;\nexport default HostQuestionBoxRound4;\nvar _c;\n$RefreshReg$(_c, \"HostQuestionBoxRound4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","sendSelectedCell","sendCellColor","useSearchParams","usePlayer","useTimeStart","resetBuzz","useSounds","useGameListeners","GameGrid","jsxDEV","_jsxDEV","exampleGrid","exampleQuestions","HostQuestionBoxRound4","initialGrid","questions","isSpectator","isHost","_s","generateRandomGrid","size","totalCells","symbols","counts","remainingCells","i","max","Math","min","count","floor","random","push","excess","ceil","needed","symbolArray","length","j","grid","index","row","hasNonEmpty","some","cell","donorRow","donorCol","r","nonEmptyCount","filter","c","c2","finalCounts","Object","values","handleSuffleGrid","console","log","newGrid","setGrid","setInitialGrid","colorMap","red","green","blue","yellow","sounds","startTimer","timeLeft","setTimeLeft","selectedQuestion","setSelectedQuestion","currentQuestion","setCurrentQuestion","correctAnswer","setCorrectAnswer","gridColors","setGridColors","Array","fill","map","menu","setMenu","visible","selectedCell","setSelectedCell","menuRef","searchParams","roomId","get","setEasyQuestionNumber","setMediumQuestionNumber","setHardQuestionNumber","setLevel","animationKey","setAnimationKey","buzzedPlayer","setBuzzedPlayer","staredPlayer","setStaredPlayer","showModal","setShowModal","isInitialTimerMount","round","current","prev","handleCloseModal","handleCellClick","col","rowIndex","colIndex","handleMenuAction","action","toString","questionIndex","rowArray","prevRow","prevCol","lastBuzzedPlayerRef","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onCellClick","onMenuAction","onCloseModal","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Host/HostQuestionBoxRound4.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Play from '../../Play';\r\nimport { RoundBase } from '../../../type';\r\nimport { sendSelectedCell, sendCellColor } from '../../../components/services';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { usePlayer } from '../../../context/playerContext';\r\nimport { deletePath, listenToTimeStart, listenToSound, listenToQuestions, listenToSelectedCell, listenToCellColor, listenToAnswers, listenToBuzzing, listenToStar } from '../../../services/firebaseServices';\r\nimport { useTimeStart } from '../../../context/timeListenerContext';\r\nimport { resetBuzz } from '../../../components/services';\r\nimport { useSounds } from '../../../context/soundContext';\r\nimport { useGameListeners } from '../../../hooks/useListener';\r\nimport GameGrid from '../../../components/ui/GameGrid';\r\ninterface QuestionComponentProps {\r\n    initialGrid: string[][]; // 5x5 grid (can be passed from parent or generated)\r\n    questions: string[]; // Array of questions for testing\r\n    isSpectator?: boolean; // Indicates whether the user is a spectator\r\n    isHost?: boolean; // Indicates whether the user is the host\r\n}\r\ninterface GameGridProps {\r\n    initialGrid: string[][];\r\n    gridColors: string[][];\r\n    menu: { visible: boolean; rowIndex?: number; colIndex?: number };\r\n    isSpectator?: boolean;\r\n    showModal: boolean;\r\n    menuRef: React.RefObject<HTMLDivElement | null>;\r\n    onCellClick: (row: number, col: number) => void;\r\n    onMenuAction: (action: 'select' | 'red' | 'green' | 'blue' | 'yellow', row: number, col: number) => void;\r\n    onCloseModal: () => void;\r\n}\r\nconst exampleGrid = [\r\n    ['!', '', '?', '', '!'],\r\n    ['', '?', '!', '', '?'],\r\n    ['?', '', '', '!', '?'],\r\n    ['!', '?', '', '', '!'],\r\n    ['?', '!', '', '?', ''],\r\n];\r\n\r\n// Example questions for testing\r\nconst exampleQuestions = [\r\n    'Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5',\r\n    'Question 6', 'Question 7', 'Question 8', 'Question 9', 'Question 10',\r\n    'Question 11', 'Question 12', 'Question 13', 'Question 14', 'Question 15',\r\n    'Question 16', 'Question 17', 'Question 18', 'Question 19', 'Question 20',\r\n    'Question 21', 'Question 22', 'Question 23', 'Question 24', 'Question 25',\r\n];\r\n\r\nconst HostQuestionBoxRound4: React.FC<QuestionComponentProps> = ({\r\n    initialGrid,\r\n    questions,\r\n    isSpectator,\r\n    isHost = false,\r\n}) => {\r\n    function generateRandomGrid(): (\"\" | \"!\" | \"?\")[][] {\r\n        const size = 5;\r\n        const totalCells = size * size; // 25\r\n        const symbols = [\"\", \"!\", \"?\"] as const;\r\n\r\n        // Generate counts for symbols (4-8 each, total 25)\r\n        let counts: number[] = [];\r\n        let remainingCells = totalCells;\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            const max = Math.min(8, remainingCells - 7 - (2 - i) * 7);\r\n            const min = 7;\r\n            const count = Math.floor(Math.random() * (max - min + 1)) + min;\r\n            counts.push(count);\r\n            remainingCells -= count;\r\n        }\r\n\r\n        if (remainingCells < 7 || remainingCells > 9) {\r\n            if (remainingCells > 9) {\r\n                let excess = remainingCells - 9;\r\n                counts[1] -= Math.ceil(excess / 2);\r\n                counts[0] -= Math.floor(excess / 2);\r\n                counts.push(9);\r\n            } else {\r\n                let needed = 7 - remainingCells;\r\n                counts[1] += Math.ceil(needed / 2);\r\n                counts[0] += Math.floor(needed / 2);\r\n                counts.push(7);\r\n            }\r\n        } else {\r\n            counts.push(remainingCells);\r\n        }\r\n\r\n        // Create symbol array\r\n        let symbolArray: (\"\" | \"!\" | \"?\")[] = [];\r\n        for (let i = 0; i < symbols.length; i++) {\r\n            for (let j = 0; j < counts[i]; j++) {\r\n                symbolArray.push(symbols[i]);\r\n            }\r\n        }\r\n\r\n        // Shuffle array\r\n        for (let i = symbolArray.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [symbolArray[i], symbolArray[j]] = [symbolArray[j], symbolArray[i]];\r\n        }\r\n\r\n        // Create 5x5 grid\r\n        let grid: (\"\" | \"!\" | \"?\")[][] = [];\r\n        let index = 0;\r\n        for (let i = 0; i < size; i++) {\r\n            let row: (\"\" | \"!\" | \"?\")[] = [];\r\n            for (let j = 0; j < size; j++) {\r\n                row.push(symbolArray[index++]);\r\n            }\r\n            grid.push(row);\r\n        }\r\n\r\n        // Ensure each row has at least one \"!\" or \"?\"\r\n        for (let i = 0; i < size; i++) {\r\n            const hasNonEmpty = grid[i].some(cell => cell === \"!\" || cell === \"?\");\r\n            if (!hasNonEmpty) {\r\n                // Find a row with multiple \"!\" or \"?\" to swap\r\n                let donorRow = -1;\r\n                let donorCol = -1;\r\n                for (let r = 0; r < size; r++) {\r\n                    if (r === i) continue;\r\n                    const nonEmptyCount = grid[r].filter(cell => cell === \"!\" || cell === \"?\").length;\r\n                    if (nonEmptyCount > 1) {\r\n                        for (let c = 0; c < size; c++) {\r\n                            if (grid[r][c] === \"!\" || grid[r][c] === \"?\") {\r\n                                donorRow = r;\r\n                                donorCol = c;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (donorRow !== -1) break;\r\n                    }\r\n                }\r\n\r\n                if (donorRow !== -1) {\r\n                    // Swap with an empty cell in the target row\r\n                    for (let c = 0; c < size; c++) {\r\n                        if (grid[i][c] === \"\") {\r\n                            [grid[i][c], grid[donorRow][donorCol]] = [grid[donorRow][donorCol], grid[i][c]];\r\n                            break;\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Place \"!\" in an empty cell and adjust elsewhere\r\n                    for (let c = 0; c < size; c++) {\r\n                        if (grid[i][c] === \"\") {\r\n                            grid[i][c] = \"!\";\r\n                            // Replace a \"!\" elsewhere with \"\"\r\n                            for (let r = 0; r < size; r++) {\r\n                                if (r === i) continue;\r\n                                for (let c2 = 0; c2 < size; c2++) {\r\n                                    if (grid[r][c2] === \"!\") {\r\n                                        grid[r][c2] = \"\";\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (grid[r].some(cell => cell === \"\")) break;\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Verify counts\r\n        const finalCounts: Record<\"\" | \"!\" | \"?\", number> = { \"\": 0, \"!\": 0, \"?\": 0 };\r\n        for (const row of grid) {\r\n            for (const cell of row) {\r\n                finalCounts[cell]++;\r\n            }\r\n        }\r\n        if (Object.values(finalCounts).some(count => count < 7 || count > 9)) {\r\n            return generateRandomGrid();\r\n        }\r\n\r\n        return grid;\r\n    }\r\n    const handleSuffleGrid = () => {\r\n        console.log(\"start generating grid\");\r\n\r\n        const newGrid = generateRandomGrid()\r\n        console.log(\"newGrid\", newGrid);\r\n\r\n        setGrid(newGrid)\r\n        setInitialGrid(newGrid)\r\n    }\r\n\r\n    const colorMap: Record<string, string> = {\r\n        red: '#FF0000',\r\n        green: '#00FF00',\r\n        blue: '#0000FF',\r\n        yellow: '#FFFF00',\r\n    };\r\n\r\n    const [grid, setGrid] = useState<string[][]>([[]])\r\n    const sounds = useSounds();\r\n    const { startTimer, timeLeft, setTimeLeft } = useTimeStart();\r\n    const [selectedQuestion, setSelectedQuestion] = useState<string | null>(null);\r\n    const [currentQuestion, setCurrentQuestion] = useState<string>(\"\")\r\n    const [correctAnswer, setCorrectAnswer] = useState<string>(\"\")\r\n    const [gridColors, setGridColors] = useState<string[][]>(\r\n        Array(5).fill(null).map(() => Array(5).fill('#FFFFFF')) // Default grid colors are white\r\n    );\r\n    const [menu, setMenu] = useState<{\r\n        visible: boolean;\r\n        rowIndex?: number;\r\n        colIndex?: number;\r\n    }>({ visible: false });\r\n    const [selectedCell, setSelectedCell] = useState<{ row: number; col: number } | null>(null);\r\n    const menuRef = useRef<HTMLDivElement>(null);\r\n    const [searchParams] = useSearchParams()\r\n    const roomId = searchParams.get(\"roomId\") || \"4\"\r\n    const { setEasyQuestionNumber, setMediumQuestionNumber, setHardQuestionNumber, setLevel, animationKey, setAnimationKey, setInitialGrid } = usePlayer()\r\n    const [buzzedPlayer, setBuzzedPlayer] = useState<string>(\"\");\r\n    const [staredPlayer, setStaredPlayer] = useState<string>(\"\");\r\n    const [showModal, setShowModal] = useState(false); // State for modal visibility\r\n    const isInitialTimerMount = useRef(false)\r\n    useGameListeners({\r\n        roomId,\r\n        setBuzzedPlayer,\r\n        setStaredPlayer,\r\n        setShowModal,\r\n        setCorrectAnswer,\r\n        setCurrentQuestion,\r\n        setGridColors,\r\n        setSelectedCell,\r\n        sounds,\r\n        round: \"4\",\r\n        startTimer\r\n    }\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (initialGrid) {\r\n            setGrid(initialGrid)\r\n            setInitialGrid(initialGrid)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        console.log(\"timeLeft\", timeLeft);\r\n        if (isInitialTimerMount.current) {\r\n            isInitialTimerMount.current = false;\r\n            return;\r\n        }\r\n        if (timeLeft === 0) {\r\n            setAnimationKey((prev: number) => prev + 1);\r\n        }\r\n    }, [timeLeft]);\r\n\r\n    // const isInitialMount = useRef(false)\r\n    // useEffect(() => {\r\n    //     const unsubscribe = listenToTimeStart(roomId, async () => {\r\n\r\n\r\n    //         // Skip the timer setting on the first mount, but allow future calls to run\r\n    //         if (isInitialMount.current) {\r\n    //             isInitialMount.current = false;\r\n    //             return;\r\n    //         }\r\n    //         startTimer(15)\r\n    //         return () => {\r\n    //             unsubscribe();\r\n\r\n    //         };\r\n    //     })\r\n\r\n    // }, [])\r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        // Optionally clear buzzedPlayer if you want to reset it\r\n        setBuzzedPlayer(\"\");\r\n\r\n        if (isHost) {\r\n            resetBuzz(roomId)\r\n        }\r\n    };\r\n    // Function to handle cell click (only for host)\r\n    const handleCellClick = (row: number, col: number) => {\r\n        if (!isHost) return; // Prevent non-host users from interacting\r\n        setMenu({\r\n            visible: true,\r\n            rowIndex: row,\r\n            colIndex: col,\r\n        });\r\n    };\r\n\r\n    // Function to handle menu actions\r\n    const handleMenuAction = (action: 'select' | 'red' | 'green' | 'blue' | 'yellow', row: number, col: number) => {\r\n        if (action === 'select') {\r\n            if (initialGrid[row][col] == \"\") {\r\n\r\n                setLevel(\"Dễ\")\r\n            }\r\n\r\n            if (initialGrid[row][col] == \"!\") {\r\n\r\n                setLevel(\"Trung bình\")\r\n            }\r\n\r\n            if (initialGrid[row][col] == \"?\") {\r\n\r\n                setLevel(\"Khó\")\r\n            }\r\n\r\n            sendSelectedCell(roomId, col.toString(), row.toString())\r\n            const questionIndex = row * 5 + col; // Calculate question index from grid position\r\n            if (questions[questionIndex]) {\r\n                setSelectedQuestion(questions[questionIndex]);\r\n                setGridColors((prev) => {\r\n                    const newGrid = prev.map((rowArray) => [...rowArray]);\r\n                    // Reset the previously selected cell to white, if it exists and wasn't colored otherwise\r\n                    if (selectedCell) {\r\n                        const { row: prevRow, col: prevCol } = selectedCell;\r\n                        // Only reset if the cell is still light yellow (i.e., not changed by color buttons)\r\n                        if (newGrid[prevRow][prevCol] === '#FFFF99') {\r\n                            newGrid[prevRow][prevCol] = '#FFFFFF';\r\n                        }\r\n                    }\r\n                    // Set the current cell to light yellow\r\n                    newGrid[row][col] = '#FFFF99'; // Light yellow\r\n                    return newGrid;\r\n                });\r\n                // Update the selected cell\r\n                setSelectedCell({ row, col });\r\n            }\r\n        } else {\r\n            sendCellColor(roomId, col.toString(), row.toString(), action)\r\n            // Set the cell color based on the selected action\r\n\r\n            setGridColors((prev) => {\r\n                const newGrid = prev.map((rowArray) => [...rowArray]);\r\n                newGrid[row][col] = colorMap[action];\r\n                return newGrid;\r\n            });\r\n            // If the cell was previously selected, clear the selection\r\n            if (selectedCell && selectedCell.row === row && selectedCell.col === col) {\r\n                setSelectedCell(null);\r\n            }\r\n        }\r\n        setMenu({ visible: false }); // Close the menu\r\n    };\r\n    const lastBuzzedPlayerRef = useRef<string | null>(null);\r\n\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n                setMenu({ visible: false });\r\n            }\r\n        };\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center bg-slate-800/80 backdrop-blur-sm rounded-2xl border border-blue-400/30 shadow-2xl p-6 mb-4 w-full max-w-3xl mx-auto min-h-[470px]\">\r\n            {/* Display selected question */}\r\n            <h2 className=\"text-2xl font-bold text-cyan-200 mb-2 text-center drop-shadow\">\r\n                {currentQuestion || \"\"}\r\n            </h2>\r\n            {correctAnswer && (\r\n                <h2 className=\"text-xl font-semibold text-green-300 mb-4 text-center drop-shadow\">\r\n                    {correctAnswer}\r\n                </h2>\r\n            )}\r\n\r\n            <GameGrid\r\n                initialGrid={grid}\r\n                gridColors={gridColors}\r\n                menu={menu}\r\n                isHost={true}\r\n                isSpectator={isSpectator}\r\n                showModal={showModal}\r\n                buzzedPlayer={buzzedPlayer}\r\n                staredPlayer={staredPlayer}\r\n                menuRef={menuRef}\r\n                onCellClick={handleCellClick}\r\n                onMenuAction={handleMenuAction}\r\n                onCloseModal={handleCloseModal}\r\n            />\r\n\r\n\r\n            <div className=\"flex gap-2 mt-4 w-full\">\r\n                <button\r\n                    onClick={() => {\r\n                        handleSuffleGrid()\r\n                    }}\r\n                    className=\"bg-indigo-600 hover:bg-indigo-700 text-white p-2 flex-1 rounded-md whitespace-nowrap\"\r\n                >\r\n                    Xáo trộn hàng ngang\r\n                </button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HostQuestionBoxRound4;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}