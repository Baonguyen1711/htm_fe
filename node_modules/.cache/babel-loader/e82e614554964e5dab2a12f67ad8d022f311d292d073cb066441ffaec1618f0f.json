{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\User\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport Play from \"../../layouts/Play\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Từ khóa chướng ngại vật\nconst mainKeyword = \"BOCONGANH\";\nconst hintWords = [{\n  word: \"GIÓ\",\n  x: 1,\n  y: 2,\n  direction: \"vertical\"\n}, {\n  word: \"HẠTGIỐNG\",\n  x: 2,\n  y: 2,\n  direction: \"vertical\"\n}, {\n  word: \"DREAM\",\n  x: 3,\n  y: 1,\n  direction: \"horizontal\"\n}, {\n  word: \"THUỐC\",\n  x: 4,\n  y: 4,\n  direction: \"horizontal\"\n}, {\n  word: \"CÚC\",\n  x: 6,\n  y: 5,\n  direction: \"vertical\"\n}, {\n  word: \"CHÂUKIỆTLUÂN\",\n  x: 6,\n  y: 6,\n  direction: \"vertical\"\n}];\n// Kích thước lưới (có thể thay đổi)\nconst GRID_SIZE = 20;\n\n// Tạo lưới trống\nconst generateEmptyGrid = () => {\n  return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n};\nconst ObstacleQuestionBox = ({\n  obstacleWord,\n  hintWords\n}) => {\n  _s();\n  const [grid, setGrid] = useState(generateEmptyGrid());\n  const [revealedRows, setRevealedRows] = useState(Array(GRID_SIZE).fill(false));\n  const [revealedCols, setRevealedCols] = useState(Array(GRID_SIZE).fill(false));\n  useEffect(() => {\n    let newGrid = generateEmptyGrid();\n\n    // Thêm các từ vào lưới\n    hintWords.forEach(({\n      word,\n      x,\n      y,\n      direction\n    }) => {\n      for (let i = 0; i < word.length; i++) {\n        if (direction === \"horizontal\") {\n          newGrid[y][x + i] = word[i];\n        } else {\n          newGrid[y + i][x] = word[i];\n        }\n      }\n    });\n    setGrid(newGrid);\n  }, [hintWords]);\n\n  // Hàm toggle hiển thị hàng/cột\n  const toggleRow = rowIndex => {\n    setRevealedRows(prev => {\n      const newRevealed = [...prev];\n      newRevealed[rowIndex] = !newRevealed[rowIndex];\n      return newRevealed;\n    });\n  };\n  const toggleCol = colIndex => {\n    setRevealedCols(prev => {\n      const newRevealed = [...prev];\n      newRevealed[colIndex] = !newRevealed[colIndex];\n      return newRevealed;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[30px_repeat(10,40px)] gap-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), \" \", Array.from({\n        length: GRID_SIZE\n      }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"font-bold text-blue-500 cursor-pointer\",\n        onClick: () => toggleCol(colIndex),\n        children: colIndex + 1\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)), grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"font-bold text-blue-500 cursor-pointer\",\n          onClick: () => toggleRow(rowIndex),\n          children: rowIndex + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `w-10 h-10 border flex items-center justify-center text-lg font-semibold \n                                    ${revealedRows[rowIndex] || revealedCols[colIndex] ? \"text-black\" : \"text-transparent\"}\n                                    ${obstacleWord.includes(cell) ? \"font-bold text-red-500\" : \"\"}\n                                    ${cell === \"\" ? \"border-none\" : \"border-gray-400\"}\n                                `,\n          children: cell\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this))]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(ObstacleQuestionBox, \"98jPaQ0PtjSqYzo5+GfKKsSl3rQ=\");\n_c = ObstacleQuestionBox;\nfunction Round2() {\n  return /*#__PURE__*/_jsxDEV(Play, {\n    questionComponent: /*#__PURE__*/_jsxDEV(ObstacleQuestionBox, {\n      obstacleWord: mainKeyword,\n      hintWords: hintWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 37\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 12\n  }, this);\n}\n_c2 = Round2;\nexport default Round2;\nvar _c, _c2;\n$RefreshReg$(_c, \"ObstacleQuestionBox\");\n$RefreshReg$(_c2, \"Round2\");","map":{"version":3,"names":["Play","React","useState","useEffect","jsxDEV","_jsxDEV","mainKeyword","hintWords","word","x","y","direction","GRID_SIZE","generateEmptyGrid","Array","fill","map","ObstacleQuestionBox","obstacleWord","_s","grid","setGrid","revealedRows","setRevealedRows","revealedCols","setRevealedCols","newGrid","forEach","i","length","toggleRow","rowIndex","prev","newRevealed","toggleCol","colIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","from","_","onClick","row","Fragment","cell","includes","_c","Round2","questionComponent","_c2","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/User/Round2.tsx"],"sourcesContent":["import Play from \"../../layouts/Play\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\n// Từ khóa chướng ngại vật\r\nconst mainKeyword = \"BOCONGANH\";\r\nconst hintWords: { word: string; x: number; y: number; direction: \"horizontal\" | \"vertical\" }[] = [\r\n    { word: \"GIÓ\", x: 1, y: 2, direction: \"vertical\" },\r\n    { word: \"HẠTGIỐNG\", x: 2, y: 2, direction: \"vertical\" },\r\n    { word: \"DREAM\", x: 3, y: 1, direction: \"horizontal\" },\r\n    { word: \"THUỐC\", x: 4, y: 4, direction: \"horizontal\" },\r\n    { word: \"CÚC\", x: 6, y: 5, direction: \"vertical\" },\r\n    { word: \"CHÂUKIỆTLUÂN\", x: 6, y: 6, direction: \"vertical\" },\r\n];\r\n// Kích thước lưới (có thể thay đổi)\r\nconst GRID_SIZE = 20;\r\n\r\n// Tạo lưới trống\r\nconst generateEmptyGrid = () => {\r\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\r\n};\r\n\r\ninterface HintWord {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n    obstacleWord: string;\r\n    hintWords: HintWord[];\r\n}\r\n\r\nconst ObstacleQuestionBox: React.FC<ObstacleQuestionBoxProps> = ({ obstacleWord, hintWords }) => {\r\n    const [grid, setGrid] = useState<string[][]>(generateEmptyGrid());\r\n    const [revealedRows, setRevealedRows] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [revealedCols, setRevealedCols] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n\r\n    useEffect(() => {\r\n        let newGrid = generateEmptyGrid();\r\n\r\n        // Thêm các từ vào lưới\r\n        hintWords.forEach(({ word, x, y, direction }) => {\r\n            for (let i = 0; i < word.length; i++) {\r\n                if (direction === \"horizontal\") {\r\n                    newGrid[y][x + i] = word[i];\r\n                } else {\r\n                    newGrid[y + i][x] = word[i];\r\n                }\r\n            }\r\n        });\r\n\r\n        setGrid(newGrid);\r\n    }, [hintWords]);\r\n\r\n    // Hàm toggle hiển thị hàng/cột\r\n    const toggleRow = (rowIndex: number) => {\r\n        setRevealedRows((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[rowIndex] = !newRevealed[rowIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    const toggleCol = (colIndex: number) => {\r\n        setRevealedCols((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[colIndex] = !newRevealed[colIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6\">\r\n            <div className=\"grid grid-cols-[30px_repeat(10,40px)] gap-1\">\r\n                {/* Hàng đầu tiên chứa số cột */}\r\n                <div></div> {/* Ô trống ở góc */}\r\n                {Array.from({ length: GRID_SIZE }).map((_, colIndex) => (\r\n                    <button\r\n                        key={colIndex}\r\n                        className=\"font-bold text-blue-500 cursor-pointer\"\r\n                        onClick={() => toggleCol(colIndex)}\r\n                    >\r\n                        {colIndex + 1}\r\n                    </button>\r\n                ))}\r\n\r\n                {/* Hiển thị lưới chữ */}\r\n                {grid.map((row, rowIndex) => (\r\n                    <React.Fragment key={rowIndex}>\r\n                        {/* Số hàng bên trái */}\r\n                        <button\r\n                            className=\"font-bold text-blue-500 cursor-pointer\"\r\n                            onClick={() => toggleRow(rowIndex)}\r\n                        >\r\n                            {rowIndex + 1}\r\n                        </button>\r\n\r\n                        {row.map((cell, colIndex) => (\r\n                            <div\r\n                                key={colIndex}\r\n                                className={`w-10 h-10 border flex items-center justify-center text-lg font-semibold \r\n                                    ${revealedRows[rowIndex] || revealedCols[colIndex] ? \"text-black\" : \"text-transparent\"}\r\n                                    ${obstacleWord.includes(cell) ? \"font-bold text-red-500\" : \"\"}\r\n                                    ${cell === \"\" ? \"border-none\" : \"border-gray-400\"}\r\n                                `}\r\n                            >\r\n                                {cell}\r\n                            </div>\r\n                        ))}\r\n                    </React.Fragment>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction Round2() {\r\n    return <Play questionComponent={<ObstacleQuestionBox obstacleWord={mainKeyword} hintWords={hintWords} />} />;\r\n\r\n}\r\n\r\nexport default Round2"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}