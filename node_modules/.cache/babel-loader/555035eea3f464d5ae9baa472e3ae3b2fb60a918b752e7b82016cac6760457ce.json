{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\Host\\\\Management\\\\HostRound2.tsx\";\nimport React from \"react\";\n\n// Define word object structure\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CrosswordGrid = ({\n  placedWords,\n  boardSize = 25\n}) => {\n  // Initialize board\n  const board = Array.from({\n    length: boardSize\n  }, () => Array(boardSize).fill(null));\n\n  // Place words\n  for (const {\n    word,\n    x,\n    y,\n    direction\n  } of placedWords) {\n    for (let i = 0; i < word.length; i++) {\n      const char = word[i];\n      const dx = direction === \"horizontal\" ? i : 0;\n      const dy = direction === \"vertical\" ? i : 0;\n      const row = y + dy;\n      const col = x + dx;\n      if (row >= 0 && row < boardSize && col >= 0 && col < boardSize) {\n        board[row][col] = char;\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid bg-gray-500\",\n    style: {\n      gridTemplateColumns: `repeat(${boardSize}, 1.75rem)`,\n      gridAutoRows: \"1.75rem\"\n    },\n    children: board.flatMap((row, rowIndex) => row.map((char, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `w-7 h-7 text-sm flex items-center justify-center font-bold border border-gray-300 ${char ? \"bg-yellow-100 text-black\" : \"bg-white\"}`,\n      children: char\n    }, `${rowIndex}-${colIndex}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_c = CrosswordGrid;\nexport default CrosswordGrid;\n\n// Main React Component\nconst WordBoard = () => {\n  // TypeScript version of the crossword builder with shuffled letter matches\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_c2 = WordBoard;\nvar _c, _c2;\n$RefreshReg$(_c, \"CrosswordGrid\");\n$RefreshReg$(_c2, \"WordBoard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","CrosswordGrid","placedWords","boardSize","board","Array","from","length","fill","word","x","y","direction","i","char","dx","dy","row","col","className","style","gridTemplateColumns","gridAutoRows","children","flatMap","rowIndex","map","colIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","WordBoard","_c2","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/HostRound2.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Define word object structure\r\n\r\ntype WordPlacement = {\r\n  word: string;\r\n  x: number;\r\n  y: number;\r\n  direction: \"horizontal\" | \"vertical\";\r\n};\r\n\r\ninterface CrosswordGridProps {\r\n  placedWords: WordPlacement[];\r\n  boardSize?: number;\r\n}\r\n\r\nconst CrosswordGrid: React.FC<CrosswordGridProps> = ({ placedWords, boardSize = 25 }) => {\r\n  // Initialize board\r\n  const board: (string | null)[][] = Array.from({ length: boardSize }, () =>\r\n    Array(boardSize).fill(null)\r\n  );\r\n\r\n  // Place words\r\n  for (const { word, x, y, direction } of placedWords) {\r\n    for (let i = 0; i < word.length; i++) {\r\n      const char = word[i];\r\n      const dx = direction === \"horizontal\" ? i : 0;\r\n      const dy = direction === \"vertical\" ? i : 0;\r\n      const row = y + dy;\r\n      const col = x + dx;\r\n      if (row >= 0 && row < boardSize && col >= 0 && col < boardSize) {\r\n        board[row][col] = char;\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"grid bg-gray-500\"\r\n      style={{\r\n        gridTemplateColumns: `repeat(${boardSize}, 1.75rem)`,\r\n        gridAutoRows: \"1.75rem\",\r\n      }}\r\n    >\r\n      {board.flatMap((row, rowIndex) =>\r\n        row.map((char, colIndex) => (\r\n          <div\r\n            key={`${rowIndex}-${colIndex}`}\r\n            className={`w-7 h-7 text-sm flex items-center justify-center font-bold border border-gray-300 ${\r\n              char ? \"bg-yellow-100 text-black\" : \"bg-white\"\r\n            }`}\r\n          >\r\n            {char}\r\n          </div>\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CrosswordGrid;\r\n\r\n\r\n// Main React Component\r\nconst WordBoard: React.FC = () => {\r\n  // TypeScript version of the crossword builder with shuffled letter matches\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n    </>\r\n  );\r\n};\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAA+B,OAAO;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAcA,MAAMC,aAA2C,GAAGA,CAAC;EAAEC,WAAW;EAAEC,SAAS,GAAG;AAAG,CAAC,KAAK;EACvF;EACA,MAAMC,KAA0B,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEJ;EAAU,CAAC,EAAE,MACnEE,KAAK,CAACF,SAAS,CAAC,CAACK,IAAI,CAAC,IAAI,CAC5B,CAAC;;EAED;EACA,KAAK,MAAM;IAAEC,IAAI;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAU,CAAC,IAAIV,WAAW,EAAE;IACnD,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACF,MAAM,EAAEM,CAAC,EAAE,EAAE;MACpC,MAAMC,IAAI,GAAGL,IAAI,CAACI,CAAC,CAAC;MACpB,MAAME,EAAE,GAAGH,SAAS,KAAK,YAAY,GAAGC,CAAC,GAAG,CAAC;MAC7C,MAAMG,EAAE,GAAGJ,SAAS,KAAK,UAAU,GAAGC,CAAC,GAAG,CAAC;MAC3C,MAAMI,GAAG,GAAGN,CAAC,GAAGK,EAAE;MAClB,MAAME,GAAG,GAAGR,CAAC,GAAGK,EAAE;MAClB,IAAIE,GAAG,IAAI,CAAC,IAAIA,GAAG,GAAGd,SAAS,IAAIe,GAAG,IAAI,CAAC,IAAIA,GAAG,GAAGf,SAAS,EAAE;QAC9DC,KAAK,CAACa,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGJ,IAAI;MACxB;IACF;EACF;EAEA,oBACEhB,OAAA;IACEqB,SAAS,EAAC,kBAAkB;IAC5BC,KAAK,EAAE;MACLC,mBAAmB,EAAE,UAAUlB,SAAS,YAAY;MACpDmB,YAAY,EAAE;IAChB,CAAE;IAAAC,QAAA,EAEDnB,KAAK,CAACoB,OAAO,CAAC,CAACP,GAAG,EAAEQ,QAAQ,KAC3BR,GAAG,CAACS,GAAG,CAAC,CAACZ,IAAI,EAAEa,QAAQ,kBACrB7B,OAAA;MAEEqB,SAAS,EAAE,qFACTL,IAAI,GAAG,0BAA0B,GAAG,UAAU,EAC7C;MAAAS,QAAA,EAEFT;IAAI,GALA,GAAGW,QAAQ,IAAIE,QAAQ,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAM3B,CACN,CACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACC,EAAA,GA1CI/B,aAA2C;AA4CjD,eAAeA,aAAa;;AAG5B;AACA,MAAMgC,SAAmB,GAAGA,CAAA,KAAM;EAChC;;EAIA,oBACEnC,OAAA,CAAAE,SAAA,mBACE,CAAC;AAEP,CAAC;AAACkC,GAAA,GATID,SAAmB;AAAA,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}