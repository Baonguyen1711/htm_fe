{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport useAuth from \"../../../hooks/useAuth\";\nexport const getTest = async (testName, userId, getToken) => {\n  try {\n    const token = await getToken();\n    if (!token) {\n      throw new Error(\"No token found. Please log in.\");\n    }\n    const response = await fetch(`http://127.0.0.1:8000/api/test/${testName}?test_owner=${userId}`, {\n      method: 'GET',\n      // Phương thức HTTP\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Nếu API yêu cầu token\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch test with ID: ${testName}, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const uploadTestToServer = async (file, testName, getToken) => {\n  const token = await getToken();\n  if (!token) {\n    throw new Error(\"No token found. Please log in.\");\n  }\n  // Kiểm tra nếu không có file\n  if (!file) {\n    throw new Error(\"Không có file nào được chọn!\");\n  }\n\n  // Tạo đối tượng FormData để đóng gói file\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  try {\n    // Gửi yêu cầu POST tới server\n    const response = await fetch(`http://127.0.0.1:8000/api/test/upload?test_name=${testName}&test_owner=mnbvcxz`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Nếu API yêu cầu token\n      },\n      body: formData\n    });\n\n    // Kiểm tra phản hồi HTTP\n    if (response.status == 400) {\n      throw new Error(`Upload thất bại: Bộ đề đã tồn tại! chọn bộ đề khác`);\n    }\n    if (!response.ok) {\n      throw new Error(`Upload thất bại: ${response.statusText}`);\n    }\n\n    // Giải mã JSON từ server\n    const result = await response.json();\n    console.log(\"Upload thành công:\", result);\n    return {\n      message: \"Upload thành công!\",\n      data: result\n    };\n  } catch (error) {\n    console.error(\"Lỗi khi upload file:\", error.message);\n    throw new Error(`Lỗi upload: ${error.message}`);\n  }\n};\nexport const getTestByUserId = async (userId, getToken) => {\n  _s();\n  try {\n    const {\n      getToken\n    } = useAuth();\n    const token = await getToken();\n    if (!token) {\n      throw new Error(\"No token found. Please log in.\");\n    }\n    const response = await fetch(`http://127.0.0.1:8000/api/test/user/${userId}`, {\n      method: 'GET',\n      // Phương thức HTTP\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Nếu API yêu cầu token\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch test with ID: ${userId}, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\n_s(getTestByUserId, \"TZyIvyGBnam54p/7H4rjGZDRcCU=\", false, function () {\n  return [useAuth];\n});\nexport const updateQuestion = async (updateQuestion, question_id) => {\n  _s2();\n  try {\n    const {\n      getToken\n    } = useAuth();\n    const token = await getToken();\n    if (!token) {\n      throw new Error(\"No token found. Please log in.\");\n    }\n    const response = await fetch(`http://127.0.0.1:8000/api/test/update/${question_id}`, {\n      method: 'PUT',\n      // Phương thức HTTP\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Nếu API yêu cầu token\n      },\n      body: JSON.stringify(updateQuestion)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch test with ID: ${question_id}, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\n_s2(updateQuestion, \"TZyIvyGBnam54p/7H4rjGZDRcCU=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useAuth","getTest","testName","userId","getToken","token","Error","response","fetch","method","headers","ok","status","data","json","error","console","uploadTestToServer","file","formData","FormData","append","body","statusText","result","log","message","getTestByUserId","_s","updateQuestion","question_id","_s2","JSON","stringify"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Test/service.ts"],"sourcesContent":["import { Question } from \"../../../type\";\r\nimport useAuth from \"../../../hooks/useAuth\";\r\n\r\nexport const getTest = async (testName: string, userId: string, getToken: () => Promise<string | null>): Promise<any> => {\r\n  try {\r\n\r\n    const token = await getToken();\r\n    if (!token) {\r\n      throw new Error(\"No token found. Please log in.\");\r\n    }\r\n    const response = await fetch(`http://127.0.0.1:8000/api/test/${testName}?test_owner=${userId}`, {\r\n      method: 'GET', // Phương thức HTTP\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`, // Nếu API yêu cầu token\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch test with ID: ${testName}, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    const data = await response.json();\r\n    return data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n\r\nexport const uploadTestToServer = async (file: File, testName: string, getToken: () => Promise<string | null>): Promise<{ message: string; data?: any }> => {\r\n  const token = await getToken();\r\n  if (!token) {\r\n    throw new Error(\"No token found. Please log in.\");\r\n  }\r\n  // Kiểm tra nếu không có file\r\n  if (!file) {\r\n    throw new Error(\"Không có file nào được chọn!\");\r\n  }\r\n\r\n  // Tạo đối tượng FormData để đóng gói file\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n\r\n  try {\r\n    // Gửi yêu cầu POST tới server\r\n    const response = await fetch(`http://127.0.0.1:8000/api/test/upload?test_name=${testName}&test_owner=mnbvcxz`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`, // Nếu API yêu cầu token\r\n      },\r\n      body: formData,\r\n    });\r\n\r\n    // Kiểm tra phản hồi HTTP\r\n    if (response.status == 400) {\r\n      throw new Error(`Upload thất bại: Bộ đề đã tồn tại! chọn bộ đề khác`);\r\n    }\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Upload thất bại: ${response.statusText}`);\r\n    }\r\n\r\n    // Giải mã JSON từ server\r\n    const result = await response.json();\r\n    console.log(\"Upload thành công:\", result);\r\n    return { message: \"Upload thành công!\", data: result };\r\n  } catch (error: any) {\r\n    console.error(\"Lỗi khi upload file:\", error.message);\r\n    throw new Error(`Lỗi upload: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const getTestByUserId = async (userId: string, getToken: () => Promise<string | null>): Promise<any> => {\r\n  try {\r\n\r\n    const { getToken } = useAuth()\r\n    const token = await getToken();\r\n    if (!token) {\r\n      throw new Error(\"No token found. Please log in.\");\r\n    }\r\n    const response = await fetch(`http://127.0.0.1:8000/api/test/user/${userId}`, {\r\n      method: 'GET', // Phương thức HTTP\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`, // Nếu API yêu cầu token\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch test with ID: ${userId}, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    const data = await response.json();\r\n    return data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n\r\nexport const updateQuestion = async (updateQuestion: Partial<Question>, question_id: string): Promise<any> => {\r\n  try {\r\n    const { getToken } = useAuth()\r\n    const token = await getToken();\r\n    if (!token) {\r\n      throw new Error(\"No token found. Please log in.\");\r\n    }\r\n\r\n    const response = await fetch(`http://127.0.0.1:8000/api/test/update/${question_id}`, {\r\n      method: 'PUT', // Phương thức HTTP\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`, // Nếu API yêu cầu token\r\n      },\r\n      body: JSON.stringify(updateQuestion)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch test with ID: ${question_id}, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    const data = await response.json();\r\n    return data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}