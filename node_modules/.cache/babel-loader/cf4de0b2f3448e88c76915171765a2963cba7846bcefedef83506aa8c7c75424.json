{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\User\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport Play from \"../../layouts/Play\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mainKeyword = \"BOCONGANH\";\nconst GRID_SIZE = 10;\nconst generateEmptyGrid = () => {\n  return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n};\nconst generateHintWords = () => {\n  return [{\n    word: \"GIÓ\",\n    x: 1,\n    y: 2,\n    direction: \"horizontal\"\n  }, {\n    word: \"HẠT\",\n    x: 4,\n    y: 3,\n    direction: \"vertical\"\n  }, {\n    word: \"DREAM\",\n    x: 6,\n    y: 1,\n    direction: \"horizontal\"\n  }];\n};\nconst ObstacleQuestionBox = ({\n  obstacleWord\n}) => {\n  _s();\n  const [grid, setGrid] = useState(generateEmptyGrid());\n  const [revealedRows, setRevealedRows] = useState(Array(GRID_SIZE).fill(false));\n  const [revealedCols, setRevealedCols] = useState(Array(GRID_SIZE).fill(false));\n  const [hintWords, setHintWords] = useState([]);\n  useEffect(() => {\n    const hintWords = generateHintWords();\n    setHintWords(hintWords);\n    let newGrid = generateEmptyGrid();\n    hintWords.forEach(({\n      word,\n      x,\n      y,\n      direction\n    }) => {\n      for (let i = 0; i < word.length; i++) {\n        if (direction === \"horizontal\") {\n          newGrid[y][x + i] = word[i];\n        } else {\n          newGrid[y + i][x] = word[i];\n        }\n      }\n    });\n    setGrid(newGrid);\n  }, []);\n  const toggleRow = rowIndex => {\n    setRevealedRows(prev => {\n      const newRevealed = [...prev];\n      newRevealed[rowIndex] = !newRevealed[rowIndex];\n      return newRevealed;\n    });\n  };\n  const toggleCol = colIndex => {\n    setRevealedCols(prev => {\n      const newRevealed = [...prev];\n      newRevealed[colIndex] = !newRevealed[colIndex];\n      return newRevealed;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[30px_repeat(10,32px)] gap-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), Array.from({\n        length: GRID_SIZE\n      }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"font-bold text-blue-500 text-xs cursor-pointer\",\n        onClick: () => toggleCol(colIndex),\n        children: colIndex + 1\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)), grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"font-bold text-blue-500 text-xs cursor-pointer\",\n          onClick: () => toggleRow(rowIndex),\n          children: rowIndex + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this), row.map((cell, colIndex) => {\n          const isRevealed = revealedRows[rowIndex] && hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\") || revealedCols[colIndex] && hintWords.some(word => word.x === colIndex && word.direction === \"vertical\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-8 h-8 border flex items-center justify-center text-sm font-semibold select-none \n                                    ${isRevealed ? \"text-black\" : \"text-transparent\"}\n                                    ${obstacleWord.includes(cell) && isRevealed ? \"font-bold text-red-500\" : \"\"}\n                                    ${cell === \"\" ? \"border-none\" : \"border-gray-400\"}\n                                `,\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 33\n          }, this);\n        })]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(ObstacleQuestionBox, \"0tXfE1RkmpIdWy/liPKPIQWuBnQ=\");\n_c = ObstacleQuestionBox;\nfunction Round2() {\n  return /*#__PURE__*/_jsxDEV(Play, {\n    questionComponent: /*#__PURE__*/_jsxDEV(ObstacleQuestionBox, {\n      obstacleWord: mainKeyword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 37\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 12\n  }, this);\n}\n_c2 = Round2;\nexport default Round2;\nvar _c, _c2;\n$RefreshReg$(_c, \"ObstacleQuestionBox\");\n$RefreshReg$(_c2, \"Round2\");","map":{"version":3,"names":["Play","React","useState","useEffect","jsxDEV","_jsxDEV","mainKeyword","GRID_SIZE","generateEmptyGrid","Array","fill","map","generateHintWords","word","x","y","direction","ObstacleQuestionBox","obstacleWord","_s","grid","setGrid","revealedRows","setRevealedRows","revealedCols","setRevealedCols","hintWords","setHintWords","newGrid","forEach","i","length","toggleRow","rowIndex","prev","newRevealed","toggleCol","colIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","from","_","onClick","row","Fragment","cell","isRevealed","some","includes","_c","Round2","questionComponent","_c2","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/User/Round2.tsx"],"sourcesContent":["import Play from \"../../layouts/Play\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\ninterface HintWord {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n    obstacleWord: string;\r\n}\r\n\r\nconst mainKeyword = \"BOCONGANH\";\r\nconst GRID_SIZE = 10;\r\n\r\nconst generateEmptyGrid = () => {\r\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\r\n};\r\n\r\nconst generateHintWords = (): HintWord[] => {\r\n    return [\r\n        { word: \"GIÓ\", x: 1, y: 2, direction: \"horizontal\" },\r\n        { word: \"HẠT\", x: 4, y: 3, direction: \"vertical\" },\r\n        { word: \"DREAM\", x: 6, y: 1, direction: \"horizontal\" },\r\n    ];\r\n};\r\n\r\nconst ObstacleQuestionBox: React.FC<ObstacleQuestionBoxProps> = ({ obstacleWord }) => {\r\n    const [grid, setGrid] = useState<string[][]>(generateEmptyGrid());\r\n    const [revealedRows, setRevealedRows] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [revealedCols, setRevealedCols] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [hintWords, setHintWords] = useState<HintWord[]>([]);\r\n\r\n    useEffect(() => {\r\n        const hintWords = generateHintWords();\r\n        setHintWords(hintWords);\r\n        let newGrid = generateEmptyGrid();\r\n\r\n        hintWords.forEach(({ word, x, y, direction }) => {\r\n            for (let i = 0; i < word.length; i++) {\r\n                if (direction === \"horizontal\") {\r\n                    newGrid[y][x + i] = word[i];\r\n                } else {\r\n                    newGrid[y + i][x] = word[i];\r\n                }\r\n            }\r\n        });\r\n\r\n        setGrid(newGrid);\r\n    }, []);\r\n\r\n    const toggleRow = (rowIndex: number) => {\r\n        setRevealedRows((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[rowIndex] = !newRevealed[rowIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    const toggleCol = (colIndex: number) => {\r\n        setRevealedCols((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[colIndex] = !newRevealed[colIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-4\">\r\n            <div className=\"grid grid-cols-[30px_repeat(10,32px)] gap-1\">\r\n                <div></div>\r\n                {Array.from({ length: GRID_SIZE }).map((_, colIndex) => (\r\n                    <button\r\n                        key={colIndex}\r\n                        className=\"font-bold text-blue-500 text-xs cursor-pointer\"\r\n                        onClick={() => toggleCol(colIndex)}\r\n                    >\r\n                        {colIndex + 1}\r\n                    </button>\r\n                ))}\r\n\r\n                {grid.map((row, rowIndex) => (\r\n                    <React.Fragment key={rowIndex}>\r\n                        <button\r\n                            className=\"font-bold text-blue-500 text-xs cursor-pointer\"\r\n                            onClick={() => toggleRow(rowIndex)}\r\n                        >\r\n                            {rowIndex + 1}\r\n                        </button>\r\n\r\n                        {row.map((cell, colIndex) => {\r\n                            const isRevealed =\r\n                                (revealedRows[rowIndex] && hintWords.some((word) => word.y === rowIndex && word.direction === \"horizontal\")) ||\r\n                                (revealedCols[colIndex] && hintWords.some((word) => word.x === colIndex && word.direction === \"vertical\"));\r\n\r\n                            return (\r\n                                <div\r\n                                    key={colIndex}\r\n                                    className={`w-8 h-8 border flex items-center justify-center text-sm font-semibold select-none \r\n                                    ${isRevealed ? \"text-black\" : \"text-transparent\"}\r\n                                    ${obstacleWord.includes(cell) && isRevealed ? \"font-bold text-red-500\" : \"\"}\r\n                                    ${cell === \"\" ? \"border-none\" : \"border-gray-400\"}\r\n                                `}\r\n                                >\r\n                                    {cell}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </React.Fragment>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction Round2() {\r\n    return <Play questionComponent={<ObstacleQuestionBox obstacleWord={mainKeyword} />} />;\r\n}\r\n\r\nexport default Round2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}