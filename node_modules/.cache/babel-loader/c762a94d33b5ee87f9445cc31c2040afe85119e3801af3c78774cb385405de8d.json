{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\User\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport Play from \"../../layouts/Play\";\nimport React, { useState, useEffect } from \"react\";\n\n// Từ khóa chướng ngại vật\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mainKeyword = \"BOCONGANH\";\n\n// Tạo từ khóa gợi ý với vị trí và hướng random\nconst generateHintWords = (words, gridSize) => {\n  return words.map(word => {\n    const direction = Math.random() > 0.5 ? \"horizontal\" : \"vertical\";\n    let x, y;\n    if (direction === \"horizontal\") {\n      x = Math.floor(Math.random() * (gridSize - word.length + 1));\n      y = Math.floor(Math.random() * gridSize);\n    } else {\n      x = Math.floor(Math.random() * gridSize);\n      y = Math.floor(Math.random() * (gridSize - word.length + 1));\n    }\n    return {\n      word,\n      x,\n      y,\n      direction\n    };\n  });\n};\n\n// Danh sách từ gợi ý (chỉ nhập từ, vị trí và hướng sẽ random)\nconst hintWords = generateHintWords([\"GIÓ\", \"HẠT\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂU\"], 10);\n\n// Kích thước lưới\nconst GRID_SIZE = 10;\n\n// Tạo lưới trống\nconst generateEmptyGrid = () => {\n  return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n};\nconst ObstacleQuestionBox = ({\n  obstacleWord,\n  hintWords\n}) => {\n  _s();\n  const [grid, setGrid] = useState(generateEmptyGrid());\n  const [revealedRows, setRevealedRows] = useState(Array(GRID_SIZE).fill(false));\n  const [revealedCols, setRevealedCols] = useState(Array(GRID_SIZE).fill(false));\n  useEffect(() => {\n    const randomHintWords = generateHintWords([\"GIÓ\", \"HẠT\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂU\"], GRID_SIZE);\n    setHintWords(randomHintWords);\n    let newGrid = generateEmptyGrid();\n\n    // Thêm từ vào lưới\n    hintWords.forEach(({\n      word,\n      x,\n      y,\n      direction\n    }) => {\n      for (let i = 0; i < word.length; i++) {\n        if (direction === \"horizontal\") {\n          newGrid[y][x + i] = word[i];\n        } else {\n          newGrid[y + i][x] = word[i];\n        }\n      }\n    });\n    setGrid(newGrid);\n  }, [hintWords]);\n\n  // Hàm toggle hiển thị hàng/cột\n  const toggleRow = rowIndex => {\n    setRevealedRows(prev => {\n      const newRevealed = [...prev];\n      newRevealed[rowIndex] = !newRevealed[rowIndex];\n      return newRevealed;\n    });\n  };\n  const toggleCol = colIndex => {\n    setRevealedCols(prev => {\n      const newRevealed = [...prev];\n      newRevealed[colIndex] = !newRevealed[colIndex];\n      return newRevealed;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[30px_repeat(10,40px)] gap-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), \" \", Array.from({\n        length: GRID_SIZE\n      }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"font-bold text-blue-500 cursor-pointer\",\n        onClick: () => toggleCol(colIndex),\n        children: colIndex + 1\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this)), grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"font-bold text-blue-500 cursor-pointer\",\n          onClick: () => toggleRow(rowIndex),\n          children: rowIndex + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this), row.map((cell, colIndex) => {\n          const isRevealed = revealedRows[rowIndex] && hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\") || revealedCols[colIndex] && hintWords.some(word => word.x === colIndex && word.direction === \"vertical\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-10 h-10 border flex items-center justify-center text-lg font-semibold select-none \n                                    ${isRevealed ? \"text-black\" : \"text-transparent\"}\n                                    ${obstacleWord.includes(cell) && isRevealed ? \"font-bold text-red-500\" : \"\"}\n                                    ${cell === \"\" ? \"border-none\" : \"border-gray-400\"}\n                                `,\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 33\n          }, this);\n        })]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n_s(ObstacleQuestionBox, \"98jPaQ0PtjSqYzo5+GfKKsSl3rQ=\");\n_c = ObstacleQuestionBox;\nfunction Round2() {\n  return /*#__PURE__*/_jsxDEV(Play, {\n    questionComponent: /*#__PURE__*/_jsxDEV(ObstacleQuestionBox, {\n      obstacleWord: mainKeyword,\n      hintWords: hintWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 37\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 12\n  }, this);\n}\n_c2 = Round2;\nexport default Round2;\nvar _c, _c2;\n$RefreshReg$(_c, \"ObstacleQuestionBox\");\n$RefreshReg$(_c2, \"Round2\");","map":{"version":3,"names":["Play","React","useState","useEffect","jsxDEV","_jsxDEV","mainKeyword","generateHintWords","words","gridSize","map","word","direction","Math","random","x","y","floor","length","hintWords","GRID_SIZE","generateEmptyGrid","Array","fill","ObstacleQuestionBox","obstacleWord","_s","grid","setGrid","revealedRows","setRevealedRows","revealedCols","setRevealedCols","randomHintWords","setHintWords","newGrid","forEach","i","toggleRow","rowIndex","prev","newRevealed","toggleCol","colIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","from","_","onClick","row","Fragment","cell","isRevealed","some","includes","_c","Round2","questionComponent","_c2","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/User/Round2.tsx"],"sourcesContent":["import Play from \"../../layouts/Play\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n// Từ khóa chướng ngại vật\r\nconst mainKeyword = \"BOCONGANH\";\r\n\r\n// Tạo từ khóa gợi ý với vị trí và hướng random\r\nconst generateHintWords = (words: string[], gridSize: number) => {\r\n    return words.map((word) => {\r\n        const direction = Math.random() > 0.5 ? \"horizontal\" : \"vertical\";\r\n        let x, y;\r\n\r\n        if (direction === \"horizontal\") {\r\n            x = Math.floor(Math.random() * (gridSize - word.length + 1));\r\n            y = Math.floor(Math.random() * gridSize);\r\n        } else {\r\n            x = Math.floor(Math.random() * gridSize);\r\n            y = Math.floor(Math.random() * (gridSize - word.length + 1));\r\n        }\r\n\r\n        return { word, x, y, direction };\r\n    });\r\n};\r\n\r\n// Danh sách từ gợi ý (chỉ nhập từ, vị trí và hướng sẽ random)\r\nconst hintWords = generateHintWords([\"GIÓ\", \"HẠT\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂU\"], 10);\r\n\r\n// Kích thước lưới\r\nconst GRID_SIZE = 10;\r\n\r\n// Tạo lưới trống\r\nconst generateEmptyGrid = () => {\r\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\r\n};\r\n\r\ninterface HintWord {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n    obstacleWord: string;\r\n    hintWords: HintWord[];\r\n}\r\n\r\nconst ObstacleQuestionBox: React.FC<ObstacleQuestionBoxProps> = ({ obstacleWord, hintWords }) => {\r\n    const [grid, setGrid] = useState<string[][]>(generateEmptyGrid());\r\n    const [revealedRows, setRevealedRows] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [revealedCols, setRevealedCols] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n\r\n    useEffect(() => {\r\n\r\n        const randomHintWords = generateHintWords([\"GIÓ\", \"HẠT\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂU\"], GRID_SIZE);\r\n        setHintWords(randomHintWords);\r\n        let newGrid = generateEmptyGrid();\r\n\r\n        // Thêm từ vào lưới\r\n        hintWords.forEach(({ word, x, y, direction }) => {\r\n            for (let i = 0; i < word.length; i++) {\r\n                if (direction === \"horizontal\") {\r\n                    newGrid[y][x + i] = word[i];\r\n                } else {\r\n                    newGrid[y + i][x] = word[i];\r\n                }\r\n            }\r\n        });\r\n\r\n        setGrid(newGrid);\r\n    }, [hintWords]);\r\n\r\n    // Hàm toggle hiển thị hàng/cột\r\n    const toggleRow = (rowIndex: number) => {\r\n        setRevealedRows((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[rowIndex] = !newRevealed[rowIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    const toggleCol = (colIndex: number) => {\r\n        setRevealedCols((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[colIndex] = !newRevealed[colIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6\">\r\n            <div className=\"grid grid-cols-[30px_repeat(10,40px)] gap-1\">\r\n                {/* Hàng đầu tiên chứa số cột */}\r\n                <div></div> {/* Ô trống ở góc */}\r\n                {Array.from({ length: GRID_SIZE }).map((_, colIndex) => (\r\n                    <button\r\n                        key={colIndex}\r\n                        className=\"font-bold text-blue-500 cursor-pointer\"\r\n                        onClick={() => toggleCol(colIndex)}\r\n                    >\r\n                        {colIndex + 1}\r\n                    </button>\r\n                ))}\r\n\r\n                {/* Hiển thị lưới chữ */}\r\n                {grid.map((row, rowIndex) => (\r\n                    <React.Fragment key={rowIndex}>\r\n                        {/* Số hàng bên trái */}\r\n                        <button\r\n                            className=\"font-bold text-blue-500 cursor-pointer\"\r\n                            onClick={() => toggleRow(rowIndex)}\r\n                        >\r\n                            {rowIndex + 1}\r\n                        </button>\r\n\r\n                        {row.map((cell, colIndex) => {\r\n                            const isRevealed =\r\n                                (revealedRows[rowIndex] && hintWords.some((word) => word.y === rowIndex && word.direction === \"horizontal\")) ||\r\n                                (revealedCols[colIndex] && hintWords.some((word) => word.x === colIndex && word.direction === \"vertical\"));\r\n\r\n                            return (\r\n                                <div\r\n                                    key={colIndex}\r\n                                    className={`w-10 h-10 border flex items-center justify-center text-lg font-semibold select-none \r\n                                    ${isRevealed ? \"text-black\" : \"text-transparent\"}\r\n                                    ${obstacleWord.includes(cell) && isRevealed ? \"font-bold text-red-500\" : \"\"}\r\n                                    ${cell === \"\" ? \"border-none\" : \"border-gray-400\"}\r\n                                `}\r\n                                >\r\n                                    {cell}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </React.Fragment>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction Round2() {\r\n    return <Play questionComponent={<ObstacleQuestionBox obstacleWord={mainKeyword} hintWords={hintWords} />} />;\r\n}\r\n\r\nexport default Round2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}