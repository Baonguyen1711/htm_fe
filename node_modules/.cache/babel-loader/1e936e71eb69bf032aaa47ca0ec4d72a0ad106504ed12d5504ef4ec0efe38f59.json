{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\User\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport Play from \"../../layouts/Play\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Từ khóa chướng ngại vật\nconst mainKeyword = \"BOCONGANH\";\n\n// Tạo từ khóa gợi ý với vị trí và hướng random\nconst generateHintWords = (words, gridSize, obstacleWord) => {\n  const placedWords = []; // Danh sách từ đã đặt\n  const grid = Array(gridSize).fill(null).map(() => Array(gridSize).fill(\"\")); // Mảng kiểm tra vị trí\n\n  const findCommonLetters = words => {\n    let results = [];\n    for (let i = 0; i < words.length; i++) {\n      for (let j = i + 1; j < words.length; j++) {\n        const word1 = words[i];\n        const word2 = words[j];\n\n        // Tìm ký tự chung\n        const commonLetters = [...new Set(word1)].filter(letter => word2.includes(letter));\n        if (commonLetters.length >= 2) {\n          // Tính trọng số: Ưu tiên các chữ cái gần trung tâm\n          const scoredLetters = commonLetters.map(letter => {\n            const index1 = word1.indexOf(letter);\n            const index2 = word2.indexOf(letter);\n            const center1 = word1.length / 2;\n            const center2 = word2.length / 2;\n            const score = Math.abs(index1 - center1) + Math.abs(index2 - center2);\n            return {\n              letter,\n              score\n            };\n          });\n\n          // Sắp xếp theo điểm ưu tiên thấp nhất (gần trung tâm hơn)\n          scoredLetters.sort((a, b) => a.score - b.score);\n\n          // Lấy ra các chữ cái ưu tiên nhất\n          const prioritizedLetters = scoredLetters.map(item => item.letter);\n          results.push({\n            word1,\n            word2,\n            commonLetters: prioritizedLetters\n          });\n        }\n      }\n    }\n    return results;\n  };\n  const testWords = [\"hạtgiống\", \"cúc\", \"thuốc\", \"dream\", \"gió\", \"châukiệtluân\"];\n  console.log(findCommonLetters(words));\n  const canPlaceWord = (word, x, y, direction) => {\n    for (let i = 0; i < word.length; i++) {\n      const newX = direction === \"horizontal\" ? x + i : x;\n      const newY = direction === \"horizontal\" ? y : y + i;\n      if (newX >= gridSize || newY >= gridSize) return false; // Vượt giới hạn\n\n      // Nếu ô đã có ký tự khác từ trước, kiểm tra xem có trùng với ký tự cần đặt không\n      if (grid[newY][newX] && grid[newY][newX] !== word[i]) return false;\n    }\n    return true;\n  };\n  words.forEach(word => {\n    let placed = false;\n    for (let attempt = 0; attempt < 100; attempt++) {\n      // Thử đặt tối đa 100 lần\n      const direction = Math.random() > 0.5 ? \"horizontal\" : \"vertical\";\n      let x = direction === \"horizontal\" ? Math.floor(Math.random() * (gridSize - word.length + 1)) : Math.floor(Math.random() * gridSize);\n      let y = direction === \"vertical\" ? Math.floor(Math.random() * (gridSize - word.length + 1)) : Math.floor(Math.random() * gridSize);\n      if (canPlaceWord(word, x, y, direction)) {\n        // Ghi vào grid để kiểm tra sau\n        for (let i = 0; i < word.length; i++) {\n          const newX = direction === \"horizontal\" ? x + i : x;\n          const newY = direction === \"horizontal\" ? y : y + i;\n          grid[newY][newX] = word[i];\n        }\n        placedWords.push({\n          word,\n          x,\n          y,\n          direction\n        });\n        placed = true;\n        break;\n      }\n    }\n    if (!placed) console.warn(`Không thể đặt từ: ${word}`);\n  });\n  return placedWords;\n};\n\n// Kích thước lưới\nconst GRID_SIZE = 10;\n\n// Tạo lưới trống\nconst generateEmptyGrid = () => {\n  return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n};\nconst ObstacleQuestionBox = ({\n  obstacleWord\n}) => {\n  _s();\n  const [grid, setGrid] = useState(generateEmptyGrid());\n  const [revealedRows, setRevealedRows] = useState(Array(GRID_SIZE).fill(false));\n  const [revealedCols, setRevealedCols] = useState(Array(GRID_SIZE).fill(false));\n  const [hintWords, setHintWords] = useState([]);\n  useEffect(() => {\n    const randomHintWords = generateHintWords([\"GIÓ\", \"HẠT\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂU\"], GRID_SIZE, mainKeyword);\n    setHintWords(randomHintWords);\n    let newGrid = generateEmptyGrid();\n\n    // Thêm từ vào lưới\n    randomHintWords.forEach(({\n      word,\n      x,\n      y,\n      direction\n    }) => {\n      for (let i = 0; i < word.length; i++) {\n        if (direction === \"horizontal\") {\n          newGrid[y][x + i] = word[i];\n        } else {\n          newGrid[y + i][x] = word[i];\n        }\n      }\n    });\n    setGrid(newGrid);\n  }, []);\n\n  // Hàm toggle hiển thị hàng/cột\n  const toggleRow = rowIndex => {\n    setRevealedRows(prev => {\n      const newRevealed = [...prev];\n      newRevealed[rowIndex] = !newRevealed[rowIndex];\n      return newRevealed;\n    });\n  };\n  const toggleCol = colIndex => {\n    setRevealedCols(prev => {\n      const newRevealed = [...prev];\n      newRevealed[colIndex] = !newRevealed[colIndex];\n      return newRevealed;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[30px_repeat(10,40px)] gap-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), \" \", Array.from({\n        length: GRID_SIZE\n      }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"font-bold text-blue-500 cursor-pointer\",\n        onClick: () => toggleCol(colIndex),\n        children: colIndex + 1\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this)), grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"font-bold text-blue-500 cursor-pointer\",\n          onClick: () => toggleRow(rowIndex),\n          children: rowIndex + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }, this), row.map((cell, colIndex) => {\n          const isRevealed = revealedRows[rowIndex] && hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\") || revealedCols[colIndex] && hintWords.some(word => word.x === colIndex && word.direction === \"vertical\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-10 h-10 border flex items-center justify-center text-lg font-semibold select-none \n                                    ${isRevealed ? \"text-black\" : \"text-transparent\"}\n                                    ${obstacleWord.includes(cell) && isRevealed ? \"font-bold text-red-500\" : \"\"}\n                                    ${cell === \"\" ? \"border-none\" : \"border-gray-400\"}\n                                `,\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 33\n          }, this);\n        })]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n};\n_s(ObstacleQuestionBox, \"0tXfE1RkmpIdWy/liPKPIQWuBnQ=\");\n_c = ObstacleQuestionBox;\nfunction Round2() {\n  return /*#__PURE__*/_jsxDEV(Play, {\n    questionComponent: /*#__PURE__*/_jsxDEV(ObstacleQuestionBox, {\n      obstacleWord: mainKeyword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 37\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 12\n  }, this);\n}\n_c2 = Round2;\nexport default Round2;\nvar _c, _c2;\n$RefreshReg$(_c, \"ObstacleQuestionBox\");\n$RefreshReg$(_c2, \"Round2\");","map":{"version":3,"names":["Play","React","useState","useEffect","jsxDEV","_jsxDEV","mainKeyword","generateHintWords","words","gridSize","obstacleWord","placedWords","grid","Array","fill","map","findCommonLetters","results","i","length","j","word1","word2","commonLetters","Set","filter","letter","includes","scoredLetters","index1","indexOf","index2","center1","center2","score","Math","abs","sort","a","b","prioritizedLetters","item","push","testWords","console","log","canPlaceWord","word","x","y","direction","newX","newY","forEach","placed","attempt","random","floor","warn","GRID_SIZE","generateEmptyGrid","ObstacleQuestionBox","_s","setGrid","revealedRows","setRevealedRows","revealedCols","setRevealedCols","hintWords","setHintWords","randomHintWords","newGrid","toggleRow","rowIndex","prev","newRevealed","toggleCol","colIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","from","_","onClick","row","Fragment","cell","isRevealed","some","_c","Round2","questionComponent","_c2","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/User/Round2.tsx"],"sourcesContent":["import Play from \"../../layouts/Play\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n\r\ninterface HintWord {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n    obstacleWord: string;\r\n}\r\n\r\n// Từ khóa chướng ngại vật\r\nconst mainKeyword = \"BOCONGANH\";\r\n\r\n// Tạo từ khóa gợi ý với vị trí và hướng random\r\nconst generateHintWords = (words: string[], gridSize: number, obstacleWord: string): HintWord[] => {\r\n    const placedWords: HintWord[] = []; // Danh sách từ đã đặt\r\n    const grid: string[][] = Array(gridSize).fill(null).map(() => Array(gridSize).fill(\"\")); // Mảng kiểm tra vị trí\r\n\r\n    const findCommonLetters = (words: string[]): { word1: string; word2: string; commonLetters: string[] }[] => {\r\n        let results: { word1: string; word2: string; commonLetters: string[] }[] = [];\r\n    \r\n        for (let i = 0; i < words.length; i++) {\r\n            for (let j = i + 1; j < words.length; j++) {\r\n                const word1 = words[i];\r\n                const word2 = words[j];\r\n    \r\n                // Tìm ký tự chung\r\n                const commonLetters = [...new Set(word1)].filter(letter => word2.includes(letter));\r\n    \r\n                if (commonLetters.length >= 2) {\r\n                    // Tính trọng số: Ưu tiên các chữ cái gần trung tâm\r\n                    const scoredLetters = commonLetters.map(letter => {\r\n                        const index1 = word1.indexOf(letter);\r\n                        const index2 = word2.indexOf(letter);\r\n                        const center1 = word1.length / 2;\r\n                        const center2 = word2.length / 2;\r\n                        const score = Math.abs(index1 - center1) + Math.abs(index2 - center2);\r\n                        return { letter, score };\r\n                    });\r\n    \r\n                    // Sắp xếp theo điểm ưu tiên thấp nhất (gần trung tâm hơn)\r\n                    scoredLetters.sort((a, b) => a.score - b.score);\r\n    \r\n                    // Lấy ra các chữ cái ưu tiên nhất\r\n                    const prioritizedLetters = scoredLetters.map(item => item.letter);\r\n    \r\n                    results.push({ word1, word2, commonLetters: prioritizedLetters });\r\n                }\r\n            }\r\n        }\r\n        \r\n        return results;\r\n    };\r\n\r\n    const testWords = [\"hạtgiống\", \"cúc\", \"thuốc\", \"dream\", \"gió\", \"châukiệtluân\"];\r\n    console.log(findCommonLetters(words));\r\n    const canPlaceWord = (word: string, x: number, y: number, direction: \"horizontal\" | \"vertical\") => {\r\n        for (let i = 0; i < word.length; i++) {\r\n            const newX = direction === \"horizontal\" ? x + i : x;\r\n            const newY = direction === \"horizontal\" ? y : y + i;\r\n    \r\n            if (newX >= gridSize || newY >= gridSize) return false; // Vượt giới hạn\r\n    \r\n            // Nếu ô đã có ký tự khác từ trước, kiểm tra xem có trùng với ký tự cần đặt không\r\n            if (grid[newY][newX] && grid[newY][newX] !== word[i]) return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    words.forEach((word) => {\r\n        let placed = false;\r\n        for (let attempt = 0; attempt < 100; attempt++) { // Thử đặt tối đa 100 lần\r\n            const direction: \"horizontal\" | \"vertical\" = Math.random() > 0.5 ? \"horizontal\" : \"vertical\";\r\n            let x = direction === \"horizontal\" ? Math.floor(Math.random() * (gridSize - word.length + 1)) : Math.floor(Math.random() * gridSize);\r\n            let y = direction === \"vertical\" ? Math.floor(Math.random() * (gridSize - word.length + 1)) : Math.floor(Math.random() * gridSize);\r\n\r\n            if (canPlaceWord(word, x, y, direction)) {\r\n                // Ghi vào grid để kiểm tra sau\r\n                for (let i = 0; i < word.length; i++) {\r\n                    const newX = direction === \"horizontal\" ? x + i : x;\r\n                    const newY = direction === \"horizontal\" ? y : y + i;\r\n                    grid[newY][newX] = word[i];\r\n                }\r\n\r\n                placedWords.push({ word, x, y, direction });\r\n                placed = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!placed) console.warn(`Không thể đặt từ: ${word}`);\r\n    });\r\n\r\n    return placedWords;\r\n};\r\n\r\n// Kích thước lưới\r\nconst GRID_SIZE = 10;\r\n\r\n// Tạo lưới trống\r\nconst generateEmptyGrid = () => {\r\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\r\n};\r\n\r\n\r\nconst ObstacleQuestionBox: React.FC<ObstacleQuestionBoxProps> = ({ obstacleWord }) => {\r\n    const [grid, setGrid] = useState<string[][]>(generateEmptyGrid());\r\n    const [revealedRows, setRevealedRows] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [revealedCols, setRevealedCols] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [hintWords, setHintWords] = useState<HintWord[]>([]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const randomHintWords = generateHintWords([\"GIÓ\", \"HẠT\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂU\"], GRID_SIZE, mainKeyword);\r\n        setHintWords(randomHintWords);\r\n        let newGrid = generateEmptyGrid();\r\n\r\n        // Thêm từ vào lưới\r\n        randomHintWords.forEach(({ word, x, y, direction }) => {\r\n            for (let i = 0; i < word.length; i++) {\r\n                if (direction === \"horizontal\") {\r\n                    newGrid[y][x + i] = word[i];\r\n                } else {\r\n                    newGrid[y + i][x] = word[i];\r\n                }\r\n            }\r\n        });\r\n\r\n        setGrid(newGrid);\r\n    }, []);\r\n\r\n    // Hàm toggle hiển thị hàng/cột\r\n    const toggleRow = (rowIndex: number) => {\r\n        setRevealedRows((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[rowIndex] = !newRevealed[rowIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    const toggleCol = (colIndex: number) => {\r\n        setRevealedCols((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[colIndex] = !newRevealed[colIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6\">\r\n            <div className=\"grid grid-cols-[30px_repeat(10,40px)] gap-1\">\r\n                {/* Hàng đầu tiên chứa số cột */}\r\n                <div></div> {/* Ô trống ở góc */}\r\n                {Array.from({ length: GRID_SIZE }).map((_, colIndex) => (\r\n                    <button\r\n                        key={colIndex}\r\n                        className=\"font-bold text-blue-500 cursor-pointer\"\r\n                        onClick={() => toggleCol(colIndex)}\r\n                    >\r\n                        {colIndex + 1}\r\n                    </button>\r\n                ))}\r\n\r\n                {/* Hiển thị lưới chữ */}\r\n                {grid.map((row, rowIndex) => (\r\n                    <React.Fragment key={rowIndex}>\r\n                        {/* Số hàng bên trái */}\r\n                        <button\r\n                            className=\"font-bold text-blue-500 cursor-pointer\"\r\n                            onClick={() => toggleRow(rowIndex)}\r\n                        >\r\n                            {rowIndex + 1}\r\n                        </button>\r\n\r\n                        {row.map((cell, colIndex) => {\r\n                            const isRevealed =\r\n                                (revealedRows[rowIndex] && hintWords.some((word) => word.y === rowIndex && word.direction === \"horizontal\")) ||\r\n                                (revealedCols[colIndex] && hintWords.some((word) => word.x === colIndex && word.direction === \"vertical\"));\r\n\r\n                            return (\r\n                                <div\r\n                                    key={colIndex}\r\n                                    className={`w-10 h-10 border flex items-center justify-center text-lg font-semibold select-none \r\n                                    ${isRevealed ? \"text-black\" : \"text-transparent\"}\r\n                                    ${obstacleWord.includes(cell) && isRevealed ? \"font-bold text-red-500\" : \"\"}\r\n                                    ${cell === \"\" ? \"border-none\" : \"border-gray-400\"}\r\n                                `}\r\n                                >\r\n                                    {cell}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </React.Fragment>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction Round2() {\r\n    return <Play questionComponent={<ObstacleQuestionBox obstacleWord={mainKeyword} />} />;\r\n}\r\n\r\nexport default Round2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}