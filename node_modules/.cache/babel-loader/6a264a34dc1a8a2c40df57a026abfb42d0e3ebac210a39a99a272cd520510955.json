{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\Host\\\\Management\\\\HostRound2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst wordBank = [\"GIÓ\", \"HẠT GIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂU KIỆT LUÂN\"];\nconst boardSize = 15;\nconst generateBoard = size => {\n  return Array(size).fill(null).map(() => Array(size).fill(\"\"));\n};\nconst placeWords = words => {\n  const placedWords = [];\n  words.forEach((word, index) => {\n    const x = Math.floor(Math.random() * boardSize);\n    const y = Math.floor(Math.random() * boardSize);\n    const dir = Math.random() > 0.5 ? \"horizontal\" : \"vertical\";\n    if (dir === \"horizontal\" && x + word.length < boardSize) {\n      placedWords.push({\n        word,\n        x,\n        y,\n        dir\n      });\n    } else if (dir === \"vertical\" && y + word.length < boardSize) {\n      placedWords.push({\n        word,\n        x,\n        y,\n        dir\n      });\n    }\n  });\n  return placedWords;\n};\nconst updateBoard = (board, words) => {\n  words.forEach(({\n    word,\n    x,\n    y,\n    dir\n  }) => {\n    word.split(\"\").forEach((char, index) => {\n      if (dir === \"horizontal\") {\n        board[y][x + index] = char;\n      } else {\n        board[y + index][x] = char;\n      }\n    });\n  });\n  return board;\n};\nconst WordBoard = () => {\n  _s();\n  const [board, setBoard] = useState(generateBoard(boardSize));\n  const [placedWords, setPlacedWords] = useState([]);\n  useEffect(() => {\n    const words = placeWords(wordBank);\n    setPlacedWords(words);\n    setBoard(updateBoard(generateBoard(boardSize), words));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Word Puzzle Board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${boardSize}, 30px)`\n      },\n      children: board.map((row, rowIndex) => row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 30,\n          height: 30,\n          border: \"1px solid #000\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          fontWeight: \"bold\"\n        },\n        children: cell\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(WordBoard, \"CNgyAJnU8Yzlqa2n2eGvIRuQ5WI=\");\n_c = WordBoard;\nexport default WordBoard;\nvar _c;\n$RefreshReg$(_c, \"WordBoard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","wordBank","boardSize","generateBoard","size","Array","fill","map","placeWords","words","placedWords","forEach","word","index","x","Math","floor","random","y","dir","length","push","updateBoard","board","split","char","WordBoard","_s","setBoard","setPlacedWords","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","row","rowIndex","cell","colIndex","width","height","border","justifyContent","alignItems","fontWeight","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/HostRound2.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst wordBank = [\"GIÓ\", \"HẠT GIỐNG\", \"DREAM\", \"THUỐC\", \"CÚC\", \"CHÂU KIỆT LUÂN\"];\r\nconst boardSize = 15;\r\n\r\ninterface WordObj {\r\n  word: string;\r\n  x: number;\r\n  y: number;\r\n  dir: \"horizontal\" | \"vertical\";\r\n}\r\n\r\nconst generateBoard = (size: number): string[][] => {\r\n  return Array(size).fill(null).map(() => Array(size).fill(\"\"));\r\n};\r\n\r\nconst placeWords = (words: string[]): WordObj[] => {\r\n  const placedWords: WordObj[] = [];\r\n  words.forEach((word, index) => {\r\n    const x = Math.floor(Math.random() * boardSize);\r\n    const y = Math.floor(Math.random() * boardSize);\r\n    const dir = Math.random() > 0.5 ? \"horizontal\" : \"vertical\";\r\n    \r\n    if (dir === \"horizontal\" && x + word.length < boardSize) {\r\n      placedWords.push({ word, x, y, dir });\r\n    } else if (dir === \"vertical\" && y + word.length < boardSize) {\r\n      placedWords.push({ word, x, y, dir });\r\n    }\r\n  });\r\n  return placedWords;\r\n};\r\n\r\nconst updateBoard = (board: string[][], words: WordObj[]): string[][] => {\r\n  words.forEach(({ word, x, y, dir }) => {\r\n    word.split(\"\").forEach((char, index) => {\r\n      if (dir === \"horizontal\") {\r\n        board[y][x + index] = char;\r\n      } else {\r\n        board[y + index][x] = char;\r\n      }\r\n    });\r\n  });\r\n  return board;\r\n};\r\n\r\nconst WordBoard: React.FC = () => {\r\n  const [board, setBoard] = useState<string[][]>(generateBoard(boardSize));\r\n  const [placedWords, setPlacedWords] = useState<WordObj[]>([]);\r\n\r\n  useEffect(() => {\r\n    const words = placeWords(wordBank);\r\n    setPlacedWords(words);\r\n    setBoard(updateBoard(generateBoard(boardSize), words));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Word Puzzle Board</h2>\r\n      <div style={{ display: \"grid\", gridTemplateColumns: `repeat(${boardSize}, 30px)` }}>\r\n        {board.map((row, rowIndex) =>\r\n          row.map((cell, colIndex) => (\r\n            <div\r\n              key={`${rowIndex}-${colIndex}`}\r\n              style={{\r\n                width: 30,\r\n                height: 30,\r\n                border: \"1px solid #000\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              {cell}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WordBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}