{"ast":null,"code":"import React from 'react';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HostRound2 = () => {\n  function PopulateBoard() {\n    PrepareBoard();\n    for (var i = 0, isOk = true, len = wordBank.length; i < len && isOk; i++) {\n      isOk = AddWordToBoard();\n    }\n    return isOk;\n  }\n  function PrepareBoard() {\n    wordBank = [];\n    for (var i = 0, len = wordArr.length; i < len; i++) {\n      let actualPos = i + 1;\n      wordBank.push(new WordObj(' ' + actualPos.toString() + wordArr[i] + ' '));\n    }\n    for (i = 0; i < wordBank.length; i++) {\n      for (var j = 0, wA = wordBank[i]; j < wA.char.length; j++) {\n        for (var k = 0, cA = wA.char[j]; k < wordBank.length; k++) {\n          for (var l = 0, wB = wordBank[k]; k !== i && l < wB.char.length; l++) {\n            wA.totalMatches += cA === wB.char[l] ? 1 : 0;\n          }\n        }\n      }\n    }\n  }\n  function findWordIdx(givenWord) {\n    givenWord = givenWord.substring(2, givenWord.length - 1);\n    for (var i = 0, len = wordArr.length; i < len; i++) {\n      if (givenWord == wordArr[i]) return i + 1;\n    }\n  }\n\n  // TODO: Clean this guy up\n  function AddWordToBoard() {\n    var i,\n      len,\n      curIndex,\n      curWord,\n      curChar,\n      curMatch,\n      testWord,\n      testChar,\n      minMatchDiff = 9999,\n      curMatchDiff;\n    if (wordsActive.length < 1) {\n      curIndex = 0;\n      for (i = 0, len = wordBank.length; i < len; i++) {\n        if (wordBank[i].totalMatches < wordBank[curIndex].totalMatches) {\n          curIndex = i;\n        }\n      }\n      wordBank[curIndex].successfulMatches = [{\n        x: 12,\n        y: 12,\n        dir: 0\n      }];\n    } else {\n      curIndex = -1;\n      for (i = 0, len = wordBank.length; i < len; i++) {\n        curWord = wordBank[i];\n        curWord.effectiveMatches = 0;\n        curWord.successfulMatches = [];\n        for (var j = 0, lenJ = curWord.char.length; j < lenJ; j++) {\n          if (j == 1) continue; // skip pos\n          curChar = curWord.char[j];\n          for (var k = 0, lenK = wordsActive.length; k < lenK; k++) {\n            testWord = wordsActive[k];\n            for (var l = 0, lenL = testWord.char.length; l < lenL; l++) {\n              if (l == 1) continue; // skip pos\n              testChar = testWord.char[l];\n              if (curChar === testChar) {\n                curWord.effectiveMatches++;\n                var curCross = {\n                  x: testWord.x,\n                  y: testWord.y,\n                  dir: 0\n                };\n                if (testWord.dir === 0) {\n                  curCross.dir = 1;\n                  curCross.x += l;\n                  curCross.y -= j;\n                } else {\n                  curCross.dir = 0;\n                  curCross.y += l;\n                  curCross.x -= j;\n                }\n                var isMatch = true;\n                for (var m = -1, lenM = curWord.char.length + 1; m < lenM; m++) {\n                  var crossVal = [];\n                  if (m !== j) {\n                    if (curCross.dir === 0) {\n                      var xIndex = curCross.x + m;\n                      if (xIndex < 0 || xIndex > board.length) {\n                        isMatch = false;\n                        break;\n                      }\n                      crossVal.push(board[xIndex][curCross.y]);\n                      crossVal.push(board[xIndex][curCross.y + 1]);\n                      crossVal.push(board[xIndex][curCross.y - 1]);\n                    } else {\n                      var yIndex = curCross.y + m;\n                      if (yIndex < 0 || yIndex > board[curCross.x].length) {\n                        isMatch = false;\n                        break;\n                      }\n                      crossVal.push(board[curCross.x][yIndex]);\n                      crossVal.push(board[curCross.x + 1][yIndex]);\n                      crossVal.push(board[curCross.x - 1][yIndex]);\n                    }\n                    if (m > -1 && m < lenM - 1) {\n                      if (crossVal[0] !== curWord.char[m]) {\n                        if (crossVal[0] !== null) {\n                          isMatch = false;\n                          break;\n                        } else if (crossVal[1] !== null) {\n                          isMatch = false;\n                          break;\n                        } else if (crossVal[2] !== null) {\n                          isMatch = false;\n                          break;\n                        }\n                      }\n                    } else if (crossVal[0] !== null) {\n                      isMatch = false;\n                      break;\n                    }\n                  }\n                }\n                if (isMatch === true) {\n                  curWord.successfulMatches.push(curCross);\n                }\n              }\n            }\n          }\n        }\n        curMatchDiff = curWord.totalMatches - curWord.effectiveMatches;\n        if (curMatchDiff < minMatchDiff && curWord.successfulMatches.length > 0) {\n          curMatchDiff = minMatchDiff;\n          curIndex = i;\n        } else if (curMatchDiff <= 0) {\n          return false;\n        }\n      }\n    }\n    if (curIndex === -1) {\n      return false;\n    }\n    var spliced = wordBank.splice(curIndex, 1);\n    wordsActive.push(spliced[0]);\n    var pushIndex = wordsActive.length - 1,\n      rand = Math.random(),\n      matchArr = wordsActive[pushIndex].successfulMatches,\n      matchIndex = Math.floor(rand * matchArr.length),\n      matchData = matchArr[matchIndex];\n    wordsActive[pushIndex].x = matchData.x;\n    wordsActive[pushIndex].y = matchData.y;\n    wordsActive[pushIndex].dir = matchData.dir;\n    let actualIndex = findWordIdx(wordsActive[pushIndex].string);\n    console.log(wordsActive[pushIndex].string, \" ~~~ \", actualIndex);\n    for (i = 0, len = wordsActive[pushIndex].char.length; i < len; i++) {\n      var xIndex = matchData.x,\n        yIndex = matchData.y;\n      if (matchData.dir === 0) {\n        xIndex += i;\n      } else {\n        yIndex += i;\n      }\n      board[xIndex][yIndex] = wordsActive[pushIndex].char[i];\n      isPos[xIndex][yIndex] = i == 1;\n      classesOfBoard[xIndex][yIndex].push(actualIndex);\n      console.log(xIndex, yIndex, classesOfBoard[xIndex][yIndex]);\n      Bounds.Update(xIndex, yIndex);\n    }\n    return true;\n  }\n  function BoardToHtml(blank) {\n    for (var i = Bounds.top - 1, str = \"\"; i < Bounds.bottom + 2; i++) {\n      str += \"<div class='row'>\";\n      for (var j = Bounds.left - 1; j < Bounds.right + 2; j++) {\n        str += BoardCharToElement(board[j][i], isPos[j][i], classesOfBoard[j][i]);\n      }\n      str += \"</div>\";\n    }\n    return str;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_c = HostRound2;\nexport default HostRound2;\nvar _c;\n$RefreshReg$(_c, \"HostRound2\");","map":{"version":3,"names":["React","Fragment","_Fragment","jsxDEV","_jsxDEV","HostRound2","PopulateBoard","PrepareBoard","i","isOk","len","wordBank","length","AddWordToBoard","wordArr","actualPos","push","WordObj","toString","j","wA","char","k","cA","l","wB","totalMatches","findWordIdx","givenWord","substring","curIndex","curWord","curChar","curMatch","testWord","testChar","minMatchDiff","curMatchDiff","wordsActive","successfulMatches","x","y","dir","effectiveMatches","lenJ","lenK","lenL","curCross","isMatch","m","lenM","crossVal","xIndex","board","yIndex","spliced","splice","pushIndex","rand","Math","random","matchArr","matchIndex","floor","matchData","actualIndex","string","console","log","isPos","classesOfBoard","Bounds","Update","BoardToHtml","blank","top","str","bottom","left","right","BoardCharToElement","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/HostRound2.tsx"],"sourcesContent":["import Round2 from '../../../layouts/RoundBase/Round2';\r\nimport Host from '../../../layouts/Host/Host';\r\nimport QuestionBoxRound2 from '../../../layouts/RoundBase/Round2';\r\nimport { getQuestionByRound } from '../Test/service';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { Question } from '../../../type';\r\nimport { listenToBuzzing } from '../../../services/firebaseServices';\r\nimport { resetBuzz } from './service';\r\nimport { findCommonLetterPairs } from '../../../layouts/RoundBase/utils';\r\nimport { generateCrossword } from '../../../layouts/RoundBase/utils';\r\n\r\n\r\nconst HostRound2: React.FC = () => {\r\n  \r\n      function PopulateBoard(){\r\n      PrepareBoard();\r\n\r\n      for(var i=0,isOk=true,len=wordBank.length; i<len && isOk; i++){\r\n        isOk = AddWordToBoard();\r\n      }\r\n      return isOk;\r\n    }\r\n\r\n\r\n    function PrepareBoard(){\r\n      wordBank=[];\r\n\r\n      for(var i = 0, len = wordArr.length; i < len; i++){\r\n        let actualPos = i+1;\r\n        wordBank.push(new WordObj(' '+actualPos.toString()+wordArr[i]+' '));\r\n      }\r\n\r\n      for(i = 0; i < wordBank.length; i++){\r\n        for(var j = 0, wA=wordBank[i]; j<wA.char.length; j++){\r\n          for(var k = 0, cA=wA.char[j]; k<wordBank.length; k++){\r\n            for(var l = 0,wB=wordBank[k]; k!==i && l<wB.char.length; l++){\r\n              wA.totalMatches += (cA === wB.char[l])?1:0;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    function findWordIdx(givenWord){\r\n      givenWord = givenWord.substring(2, givenWord.length-1);\r\n      for(var i = 0, len = wordArr.length; i < len; i++){\r\n        if(givenWord == wordArr[i]) return i+1;\r\n      }\r\n    }\r\n\r\n    // TODO: Clean this guy up\r\n    function AddWordToBoard(){\r\n      var i, len, curIndex, curWord, curChar, curMatch, testWord, testChar,\r\n          minMatchDiff = 9999, curMatchDiff;\r\n\r\n      if(wordsActive.length < 1){\r\n        curIndex = 0;\r\n        for(i = 0, len = wordBank.length; i < len; i++){\r\n          if (wordBank[i].totalMatches < wordBank[curIndex].totalMatches){\r\n            curIndex = i;\r\n          }\r\n        }\r\n        wordBank[curIndex].successfulMatches = [{x:12,y:12,dir:0}];\r\n      }\r\n      else{\r\n        curIndex = -1;\r\n\r\n        for(i = 0, len = wordBank.length; i < len; i++){\r\n          curWord = wordBank[i];\r\n          curWord.effectiveMatches = 0;\r\n          curWord.successfulMatches = [];\r\n          for(var j = 0, lenJ = curWord.char.length; j < lenJ; j++){\r\n            if(j == 1) continue; // skip pos\r\n            curChar = curWord.char[j];\r\n            for (var k = 0, lenK = wordsActive.length; k < lenK; k++){\r\n              testWord = wordsActive[k];\r\n              for (var l = 0, lenL = testWord.char.length; l < lenL; l++){\r\n                if(l == 1) continue; // skip pos\r\n                testChar = testWord.char[l];\r\n                if (curChar === testChar){\r\n                  curWord.effectiveMatches++;\r\n\r\n                  var curCross = {x:testWord.x,y:testWord.y,dir:0};\r\n                  if(testWord.dir === 0){\r\n                    curCross.dir = 1;\r\n                    curCross.x += l;\r\n                    curCross.y -= j;\r\n                  }\r\n                  else{\r\n                    curCross.dir = 0;\r\n                    curCross.y += l;\r\n                    curCross.x -= j;\r\n                  }\r\n\r\n                  var isMatch = true;\r\n\r\n                  for(var m = -1, lenM = curWord.char.length + 1; m < lenM; m++){\r\n                    var crossVal = [];\r\n                    if (m !== j){\r\n                      if (curCross.dir === 0){\r\n                        var xIndex = curCross.x + m;\r\n\r\n                        if (xIndex < 0 || xIndex > board.length){\r\n                          isMatch = false;\r\n                          break;\r\n                        }\r\n\r\n                        crossVal.push(board[xIndex][curCross.y]);\r\n                        crossVal.push(board[xIndex][curCross.y + 1]);\r\n                        crossVal.push(board[xIndex][curCross.y - 1]);\r\n                      }\r\n                      else{\r\n                        var yIndex = curCross.y + m;\r\n\r\n                        if (yIndex < 0 || yIndex > board[curCross.x].length){\r\n                          isMatch = false;\r\n                          break;\r\n                        }\r\n\r\n                        crossVal.push(board[curCross.x][yIndex]);\r\n                        crossVal.push(board[curCross.x + 1][yIndex]);\r\n                        crossVal.push(board[curCross.x - 1][yIndex]);\r\n                      }\r\n\r\n                      if(m > -1 && m < lenM-1){\r\n                        if (crossVal[0] !== curWord.char[m]){\r\n                          if (crossVal[0] !== null){\r\n                            isMatch = false;\r\n                            break;\r\n                          }\r\n                          else if (crossVal[1] !== null){\r\n                            isMatch = false;\r\n                            break;\r\n                          }\r\n                          else if (crossVal[2] !== null){\r\n                            isMatch = false;\r\n                            break;\r\n                          }\r\n                        }\r\n                      }\r\n                      else if (crossVal[0] !== null){\r\n                        isMatch = false;\r\n                        break;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  if (isMatch === true){\r\n                    curWord.successfulMatches.push(curCross);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          curMatchDiff = curWord.totalMatches - curWord.effectiveMatches;\r\n\r\n          if (curMatchDiff<minMatchDiff && curWord.successfulMatches.length>0){\r\n            curMatchDiff = minMatchDiff;\r\n            curIndex = i;\r\n          }\r\n          else if (curMatchDiff <= 0){\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (curIndex === -1){\r\n        return false;\r\n      }\r\n\r\n      var spliced = wordBank.splice(curIndex, 1);\r\n      wordsActive.push(spliced[0]);\r\n\r\n      var pushIndex = wordsActive.length - 1,\r\n          rand = Math.random(),\r\n          matchArr = wordsActive[pushIndex].successfulMatches,\r\n          matchIndex = Math.floor(rand * matchArr.length),\r\n          matchData = matchArr[matchIndex];\r\n\r\n      wordsActive[pushIndex].x = matchData.x;\r\n      wordsActive[pushIndex].y = matchData.y;\r\n      wordsActive[pushIndex].dir = matchData.dir;\r\n\r\n      let actualIndex = findWordIdx(wordsActive[pushIndex].string);\r\n      console.log(wordsActive[pushIndex].string, \" ~~~ \", actualIndex);\r\n      for(i = 0, len = wordsActive[pushIndex].char.length; i < len; i++){\r\n        var xIndex = matchData.x,\r\n            yIndex = matchData.y;\r\n\r\n        if (matchData.dir === 0){\r\n          xIndex += i;\r\n        }\r\n        else{\r\n          yIndex += i;\r\n        }\r\n        board[xIndex][yIndex] = wordsActive[pushIndex].char[i];\r\n        isPos[xIndex][yIndex] = (i == 1);\r\n        classesOfBoard[xIndex][yIndex].push(actualIndex);\r\n        console.log(xIndex, yIndex, classesOfBoard[xIndex][yIndex]);\r\n\r\n        Bounds.Update(xIndex,yIndex);\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n\r\n    function BoardToHtml(blank){\r\n      for(var i=Bounds.top-1, str=\"\"; i<Bounds.bottom+2; i++){\r\n        str+=\"<div class='row'>\";\r\n        for(var j=Bounds.left-1; j<Bounds.right+2; j++){\r\n          str += BoardCharToElement(board[j][i], isPos[j][i], classesOfBoard[j][i]);\r\n        }\r\n        str += \"</div>\";\r\n      }\r\n      return str;\r\n    }\r\n\r\n  return (\r\n    <>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default HostRound2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}