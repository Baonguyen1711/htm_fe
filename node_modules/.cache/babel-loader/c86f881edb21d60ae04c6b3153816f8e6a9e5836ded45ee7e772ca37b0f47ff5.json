{"ast":null,"code":"import { getAxiosAuthContext } from \"../../../context/authContext\";\nexport const sendAnswerToPlayer = async roomId => {\n  try {\n    const context = getAxiosAuthContext();\n    const {\n      authToken,\n      getAxiosInstance\n    } = context;\n    const axiosInstance = getAxiosInstance();\n    if (!authToken) {\n      throw new Error(\"No token found. Please log in.\");\n    }\n    const response = await axiosInstance.post(`/api/test/broadcast?room_id=${roomId}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}` // Nếu API yêu cầu token\n      }\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const startTime = async roomId => {\n  try {\n    const context = getAxiosAuthContext();\n    const {\n      authToken,\n      getAxiosInstance\n    } = context;\n    const axiosInstance = getAxiosInstance();\n    if (!authToken) {\n      throw new Error(\"No token found. Please log in.\");\n    }\n    const response = await axiosInstance.post(`/api/test/time?room_id=${roomId}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}` // Nếu API yêu cầu token\n      }\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};","map":{"version":3,"names":["getAxiosAuthContext","sendAnswerToPlayer","roomId","context","authToken","getAxiosInstance","axiosInstance","Error","response","post","headers","status","data","error","console","startTime"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/service.ts"],"sourcesContent":["import { Question } from \"../../../type\";\r\nimport { getAxiosAuthContext } from \"../../../context/authContext\";\r\n\r\n\r\nexport const sendAnswerToPlayer = async (roomId: string): Promise<any> => {\r\n  try {\r\n    \r\n    const context = getAxiosAuthContext()\r\n    const { authToken, getAxiosInstance } = context\r\n    const axiosInstance = getAxiosInstance()\r\n    if (!authToken) {\r\n      throw new Error(\"No token found. Please log in.\");\r\n    }\r\n    const response = await axiosInstance.post(`/api/test/broadcast?room_id=${roomId}`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${authToken}`, // Nếu API yêu cầu token\r\n      },\r\n    });\r\n\r\n    if (response.status !== 200) {\r\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    return response.data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n\r\nexport const startTime = async (roomId: string): Promise<any> => {\r\n    try {\r\n      \r\n      const context = getAxiosAuthContext()\r\n      const { authToken, getAxiosInstance } = context\r\n      const axiosInstance = getAxiosInstance()\r\n      if (!authToken) {\r\n        throw new Error(\"No token found. Please log in.\");\r\n      }\r\n      const response = await axiosInstance.post(`/api/test/time?room_id=${roomId}`, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authToken}`, // Nếu API yêu cầu token\r\n        },\r\n      });\r\n  \r\n      if (response.status !== 200) {\r\n        throw new Error(`Failed to send answer, Status: ${response.status}`);\r\n      }\r\n  \r\n      // Phân tích dữ liệu từ response JSON\r\n      return response.data;\r\n  \r\n    } catch (error) {\r\n      console.error('Error fetching test data:', error);\r\n      throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n  };\r\n  \r\n"],"mappings":"AACA,SAASA,mBAAmB,QAAQ,8BAA8B;AAGlE,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,MAAc,IAAmB;EACxE,IAAI;IAEF,MAAMC,OAAO,GAAGH,mBAAmB,CAAC,CAAC;IACrC,MAAM;MAAEI,SAAS;MAAEC;IAAiB,CAAC,GAAGF,OAAO;IAC/C,MAAMG,aAAa,GAAGD,gBAAgB,CAAC,CAAC;IACxC,IAAI,CAACD,SAAS,EAAE;MACd,MAAM,IAAIG,KAAK,CAAC,gCAAgC,CAAC;IACnD;IACA,MAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,IAAI,CAAC,+BAA+BP,MAAM,EAAE,EAAE;MACjFQ,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUN,SAAS,EAAE,CAAE;MAC1C;IACF,CAAC,CAAC;IAEF,IAAII,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;MAC3B,MAAM,IAAIJ,KAAK,CAAC,kCAAkCC,QAAQ,CAACG,MAAM,EAAE,CAAC;IACtE;;IAEA;IACA,OAAOH,QAAQ,CAACI,IAAI;EAEtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAED,OAAO,MAAME,SAAS,GAAG,MAAOb,MAAc,IAAmB;EAC7D,IAAI;IAEF,MAAMC,OAAO,GAAGH,mBAAmB,CAAC,CAAC;IACrC,MAAM;MAAEI,SAAS;MAAEC;IAAiB,CAAC,GAAGF,OAAO;IAC/C,MAAMG,aAAa,GAAGD,gBAAgB,CAAC,CAAC;IACxC,IAAI,CAACD,SAAS,EAAE;MACd,MAAM,IAAIG,KAAK,CAAC,gCAAgC,CAAC;IACnD;IACA,MAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,IAAI,CAAC,0BAA0BP,MAAM,EAAE,EAAE;MAC5EQ,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUN,SAAS,EAAE,CAAE;MAC1C;IACF,CAAC,CAAC;IAEF,IAAII,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;MAC3B,MAAM,IAAIJ,KAAK,CAAC,kCAAkCC,QAAQ,CAACG,MAAM,EAAE,CAAC;IACtE;;IAEA;IACA,OAAOH,QAAQ,CAACI,IAAI;EAEtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}