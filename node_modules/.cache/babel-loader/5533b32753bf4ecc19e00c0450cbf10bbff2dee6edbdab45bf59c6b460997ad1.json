{"ast":null,"code":"import { ref, onValue, set, database } from \"../firebase-config\";\nimport axios from \"axios\";\n\n// Định nghĩa kiểu dữ liệu cho player và scores\n\n// interface Scores {\n//   [uid: string]: number;\n// }\n\nlet lastStartTime = localStorage.getItem(\"lastStartTime\") ? Number(localStorage.getItem(\"lastStartTime\")) : null;\n\n// Listen for real-time updates to players in a room\nexport const listenToPlayers = (roomId, callback) => {\n  const playersRef = ref(database, `rooms/${roomId}/players`);\n  console.log(\"player ref\", playersRef);\n  const unsubscribe = onValue(playersRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToQuestions = (roomId, callback) => {\n  const questionsRef = ref(database, `rooms/${roomId}/questions`);\n  console.log(\"questiónsRef ref\", questionsRef);\n  const unsubscribe = onValue(questionsRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToAnswers = (roomId, callback) => {\n  const answerRef = ref(database, `rooms/${roomId}/answers`);\n  console.log(\"answerRef\", answerRef);\n  const unsubscribe = onValue(answerRef, snapshot => {\n    const data = snapshot.val() || {};\n    console.log(\"data\", data);\n    callback(data);\n  });\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\n};\nexport const listenToTimeStart = (roomId, callback) => {\n  const timerRef = ref(database, `rooms/${roomId}/times`);\n  let lastStartTime = Number(localStorage.getItem(\"lastStartTime\")) || 0;\n  let isFirstCall = true; // Flag to skip first execution\n\n  const unsubscribe = onValue(timerRef, snapshot => {\n    const startTime = snapshot.val();\n    console.log(\"data\", startTime);\n    if (isFirstCall) {\n      isFirstCall = false; // Skip the first execution\n      return;\n    }\n    if (startTime && startTime !== lastStartTime) {\n      lastStartTime = startTime;\n      localStorage.setItem(\"lastStartTime\", startTime.toString());\n      callback();\n    }\n  });\n  return unsubscribe;\n};\n\n// Listen for real-time updates to scores in a room\nexport const listenToScores = (roomId, callback) => {\n  const scoresRef = ref(database, `rooms/${roomId}/scores`);\n  const unsubscribe = onValue(scoresRef, snapshot => {\n    const data = snapshot.val() || {};\n    callback(data);\n  });\n  return unsubscribe;\n};\nexport const listenToGrid = (roomId, callback) => {\n  const scoresRef = ref(database, `rooms/${roomId}/grid`);\n  const unsubscribe = onValue(scoresRef, snapshot => {\n    const data = snapshot.val() || {};\n    callback(data);\n  });\n  return unsubscribe;\n};\nexport const listenToBroadcastedAnswer = (roomId, callback) => {\n  const answerListRef = ref(database, `rooms/${roomId}/answerLists`);\n  const unsubscribe = onValue(answerListRef, snapshot => {\n    const data = snapshot.val() || {};\n    callback(data);\n  });\n  return unsubscribe;\n};\n\n// export const listenToScore = (roomId: string, callback: (data: Answer[]) => void): Unsubscribe => {\n//   const scoresRef: DatabaseReference = ref(database, `rooms/${roomId}/scores`);\n//   const unsubscribe: Unsubscribe = onValue(scoresRef, (snapshot) => {\n//     const data: Answer[] = snapshot.val() || {};\n//     callback(data);\n//   });\n//   return unsubscribe;\n// }\n// Add a user to the players list in a room\nexport const addPlayerToRoom = async (roomId, uid, playerData) => {\n  const playerRef = ref(database, `rooms/${roomId}/players/${uid}`);\n  await set(playerRef, {\n    joined_at: Date.now(),\n    data: playerData // e.g., { username: \"Player1\", points: 10 }\n  });\n};\nexport const authenticateUser = async token => {\n  try {\n    const response = await axios.post(\"http://localhost:8000/api/auth\", JSON.stringify({\n      token\n    }), {\n      withCredentials: true,\n      // Important for cookies\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\n    }\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};","map":{"version":3,"names":["ref","onValue","set","database","axios","lastStartTime","localStorage","getItem","Number","listenToPlayers","roomId","callback","playersRef","console","log","unsubscribe","snapshot","data","val","listenToQuestions","questionsRef","listenToAnswers","answerRef","listenToTimeStart","timerRef","isFirstCall","startTime","setItem","toString","listenToScores","scoresRef","listenToGrid","listenToBroadcastedAnswer","answerListRef","addPlayerToRoom","uid","playerData","playerRef","joined_at","Date","now","authenticateUser","token","response","post","JSON","stringify","withCredentials","headers","status","Error","error"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/services/firebaseServices.ts"],"sourcesContent":["import { ref, onValue, set, database } from \"../firebase-config\"\r\nimport { DatabaseReference, Unsubscribe } from \"firebase/database\";\r\nimport { User, Question, Answer, Score } from \"../type\";\r\nimport axios from \"axios\";\r\n\r\n// Định nghĩa kiểu dữ liệu cho player và scores\r\ninterface PlayerData {\r\n  username: string;\r\n  points: number;\r\n  [key: string]: any; // Cho phép các thuộc tính bổ sung\r\n}\r\n\r\ninterface Player {\r\n  joined_at: number;\r\n  data: PlayerData;\r\n}\r\n\r\ninterface Players {\r\n  [uid: string]: Player;\r\n}\r\n\r\n// interface Scores {\r\n//   [uid: string]: number;\r\n// }\r\n\r\nlet lastStartTime = localStorage.getItem(\"lastStartTime\")\r\n  ? Number(localStorage.getItem(\"lastStartTime\"))\r\n  : null;\r\n\r\n// Listen for real-time updates to players in a room\r\nexport const listenToPlayers = (roomId: string, callback: (data: User) => void): Unsubscribe => {\r\n  const playersRef: DatabaseReference = ref(database, `rooms/${roomId}/players`);\r\n  console.log(\"player ref\", playersRef)\r\n  const unsubscribe: Unsubscribe = onValue(playersRef, (snapshot) => {\r\n    const data: User = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToQuestions = (roomId: string, callback: (data: Question) => void): Unsubscribe => {\r\n  const questionsRef: DatabaseReference = ref(database, `rooms/${roomId}/questions`);\r\n  console.log(\"questiónsRef ref\", questionsRef)\r\n  const unsubscribe: Unsubscribe = onValue(questionsRef, (snapshot) => {\r\n    const data: Question = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToAnswers = (roomId: string, callback: (data: string) => void): Unsubscribe => {\r\n  const answerRef: DatabaseReference = ref(database, `rooms/${roomId}/answers`);\r\n  console.log(\"answerRef\", answerRef)\r\n  const unsubscribe: Unsubscribe = onValue(answerRef, (snapshot) => {\r\n    const data: string = snapshot.val() || {};\r\n    console.log(\"data\", data)\r\n    callback(data);\r\n  });\r\n  return unsubscribe; // Trả về hàm unsubscribe để cleanup\r\n};\r\n\r\nexport const listenToTimeStart = (roomId: string, callback: () => void): Unsubscribe => {\r\n  const timerRef: DatabaseReference = ref(database, `rooms/${roomId}/times`);\r\n  let lastStartTime = Number(localStorage.getItem(\"lastStartTime\")) || 0;\r\n  let isFirstCall = true; // Flag to skip first execution\r\n\r\n  const unsubscribe: Unsubscribe = onValue(timerRef, (snapshot) => {\r\n    const startTime = snapshot.val();\r\n    console.log(\"data\", startTime);\r\n\r\n    if (isFirstCall) {\r\n      isFirstCall = false; // Skip the first execution\r\n      return;\r\n    }\r\n\r\n    if (startTime && startTime !== lastStartTime) {\r\n      lastStartTime = startTime;\r\n      localStorage.setItem(\"lastStartTime\", startTime.toString());\r\n      callback();\r\n    }\r\n  });\r\n\r\n  return unsubscribe;\r\n};\r\n\r\n// Listen for real-time updates to scores in a room\r\nexport const listenToScores = (roomId: string, callback: (data: Score[]) => void): Unsubscribe => {\r\n  const scoresRef: DatabaseReference = ref(database, `rooms/${roomId}/scores`);\r\n  const unsubscribe: Unsubscribe = onValue(scoresRef, (snapshot) => {\r\n    const data: Score[] = snapshot.val() || {};\r\n    callback(data);\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\nexport const listenToGrid = (roomId: string, callback: (data: string[][]) => void): Unsubscribe => {\r\n  const scoresRef: DatabaseReference = ref(database, `rooms/${roomId}/grid`);\r\n  const unsubscribe: Unsubscribe = onValue(scoresRef, (snapshot) => {\r\n    const data: string[][] = snapshot.val() || {};\r\n    callback(data);\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\n\r\nexport const listenToBroadcastedAnswer = (roomId: string, callback: (data: Answer[]) => void): Unsubscribe => {\r\n  const answerListRef: DatabaseReference = ref(database, `rooms/${roomId}/answerLists`);\r\n  const unsubscribe: Unsubscribe = onValue(answerListRef, (snapshot) => {\r\n    const data: Answer[] = snapshot.val() || {};\r\n    callback(data);\r\n  });\r\n  return unsubscribe;\r\n};\r\n\r\n// export const listenToScore = (roomId: string, callback: (data: Answer[]) => void): Unsubscribe => {\r\n//   const scoresRef: DatabaseReference = ref(database, `rooms/${roomId}/scores`);\r\n//   const unsubscribe: Unsubscribe = onValue(scoresRef, (snapshot) => {\r\n//     const data: Answer[] = snapshot.val() || {};\r\n//     callback(data);\r\n//   });\r\n//   return unsubscribe;\r\n// }\r\n// Add a user to the players list in a room\r\nexport const addPlayerToRoom = async (roomId: string, uid: string, playerData: PlayerData): Promise<void> => {\r\n  const playerRef: DatabaseReference = ref(database, `rooms/${roomId}/players/${uid}`);\r\n  await set(playerRef, {\r\n    joined_at: Date.now(),\r\n    data: playerData, // e.g., { username: \"Player1\", points: 10 }\r\n  });\r\n};\r\n\r\nexport const authenticateUser = async (token: string) => {\r\n  try {\r\n    const response = await axios.post(\"http://localhost:8000/api/auth\",\r\n      JSON.stringify({ token }),\r\n      {\r\n        withCredentials: true, // Important for cookies\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    )\r\n\r\n    if (response.status !== 200) {\r\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\r\n    }\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n  \r\n\r\n\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}