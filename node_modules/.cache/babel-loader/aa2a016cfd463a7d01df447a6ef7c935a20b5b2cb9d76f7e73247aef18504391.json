{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round4.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { sendSelectedCell, sendCellColor } from '../../components/services';\nimport { useSearchParams } from 'react-router-dom';\nimport { usePlayer } from '../../context/playerContext';\nimport { deletePath, listenToTimeStart, listenToSound, listenToQuestions, listenToSelectedCell, listenToCellColor, listenToAnswers, listenToBuzzing, listenToStar } from '../../services/firebaseServices';\nimport { useTimeStart } from '../../context/timeListenerContext';\nimport { resetBuzz } from '../../components/services';\nimport { useSounds } from '../../context/soundContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exampleGrid = [['!', '', '?', '', '!'], ['', '?', '!', '', '?'], ['?', '', '', '!', '?'], ['!', '?', '', '', '!'], ['?', '!', '', '?', '']];\n\n// Example questions for testing\nconst exampleQuestions = ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5', 'Question 6', 'Question 7', 'Question 8', 'Question 9', 'Question 10', 'Question 11', 'Question 12', 'Question 13', 'Question 14', 'Question 15', 'Question 16', 'Question 17', 'Question 18', 'Question 19', 'Question 20', 'Question 21', 'Question 22', 'Question 23', 'Question 24', 'Question 25'];\nconst QuestionBoxRound4 = ({\n  initialGrid,\n  questions,\n  isSpectator,\n  isHost = false\n}) => {\n  _s();\n  const colorMap = {\n    red: '#FF0000',\n    green: '#00FF00',\n    blue: '#0000FF',\n    yellow: '#FFFF00'\n  };\n  const sounds = useSounds();\n  const {\n    startTimer,\n    timeLeft,\n    setTimeLeft\n  } = useTimeStart();\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(\"\");\n  const [correctAnswer, setCorrectAnswer] = useState(\"\");\n  const [gridColors, setGridColors] = useState(Array(5).fill(null).map(() => Array(5).fill('#FFFFFF')) // Default grid colors are white\n  );\n  const [menu, setMenu] = useState({\n    visible: false\n  });\n  const [selectedCell, setSelectedCell] = useState(null);\n  const menuRef = useRef(null);\n  const [searchParams] = useSearchParams();\n  const roomId = searchParams.get(\"roomId\") || \"4\";\n  const {\n    setEasyQuestionNumber,\n    setMediumQuestionNumber,\n    setHardQuestionNumber,\n    setLevel,\n    animationKey,\n    setAnimationKey\n  } = usePlayer();\n  const [buzzedPlayer, setBuzzedPlayer] = useState(\"\");\n  const [showModal, setShowModal] = useState(false); // State for modal visibility\n  const isInitialTimerMount = useRef(false);\n  useEffect(() => {\n    console.log(\"timeLeft\", timeLeft);\n    if (isInitialTimerMount.current) {\n      isInitialTimerMount.current = false;\n      return;\n    }\n    if (timeLeft === 0) {\n      setAnimationKey(prev => prev + 1);\n    }\n  }, [timeLeft]);\n  const isInitialMount = useRef(false);\n  useEffect(() => {\n    const unsubscribe = listenToTimeStart(roomId, async () => {\n      // Skip the timer setting on the first mount, but allow future calls to run\n      if (isInitialMount.current) {\n        isInitialMount.current = false;\n        return;\n      }\n      startTimer(15);\n      return () => {\n        unsubscribe();\n      };\n    });\n  }, []);\n  const handleCloseModal = () => {\n    setShowModal(false);\n    // Optionally clear buzzedPlayer if you want to reset it\n    setBuzzedPlayer(\"\");\n    if (isHost) {\n      resetBuzz(roomId);\n    }\n  };\n  // Function to handle cell click (only for host)\n  const handleCellClick = (row, col) => {\n    if (!isHost) return; // Prevent non-host users from interacting\n    setMenu({\n      visible: true,\n      rowIndex: row,\n      colIndex: col\n    });\n  };\n\n  // Function to handle menu actions\n  const handleMenuAction = (action, row, col) => {\n    if (action === 'select') {\n      if (initialGrid[row][col] == \"\") {\n        setLevel(\"Dễ\");\n      }\n      if (initialGrid[row][col] == \"!\") {\n        setLevel(\"Trung bình\");\n      }\n      if (initialGrid[row][col] == \"?\") {\n        setLevel(\"Khó\");\n      }\n      sendSelectedCell(roomId, col.toString(), row.toString());\n      const questionIndex = row * 5 + col; // Calculate question index from grid position\n      if (questions[questionIndex]) {\n        setSelectedQuestion(questions[questionIndex]);\n        setGridColors(prev => {\n          const newGrid = prev.map(rowArray => [...rowArray]);\n          // Reset the previously selected cell to white, if it exists and wasn't colored otherwise\n          if (selectedCell) {\n            const {\n              row: prevRow,\n              col: prevCol\n            } = selectedCell;\n            // Only reset if the cell is still light yellow (i.e., not changed by color buttons)\n            if (newGrid[prevRow][prevCol] === '#FFFF99') {\n              newGrid[prevRow][prevCol] = '#FFFFFF';\n            }\n          }\n          // Set the current cell to light yellow\n          newGrid[row][col] = '#FFFF99'; // Light yellow\n          return newGrid;\n        });\n        // Update the selected cell\n        setSelectedCell({\n          row,\n          col\n        });\n      }\n    } else {\n      sendCellColor(roomId, col.toString(), row.toString(), action);\n      // Set the cell color based on the selected action\n\n      setGridColors(prev => {\n        const newGrid = prev.map(rowArray => [...rowArray]);\n        newGrid[row][col] = colorMap[action];\n        return newGrid;\n      });\n      // If the cell was previously selected, clear the selection\n      if (selectedCell && selectedCell.row === row && selectedCell.col === col) {\n        setSelectedCell(null);\n      }\n    }\n    setMenu({\n      visible: false\n    }); // Close the menu\n  };\n  const lastBuzzedPlayerRef = useRef(null);\n\n  // const isInitialMount = true;\n  // useEffect(() => {\n  //     if (isInitialMount) return\n\n  //     // Start timer when selectedTopic changes\n  //     startTimer(15);\n\n  //     return () => {\n\n  //     }\n\n  //     // Side effects based on timer reaching 0\n  // }, []);\n\n  useEffect(() => {\n    let hasMounted = false;\n    const unsubscribeBuzzing = listenToBuzzing(roomId, playerName => {\n      // if (!hasMounted) {\n      //     hasMounted = true; // skip initial\n      //     return;\n      // }\n      const audio = sounds['buzz'];\n      if (audio) {\n        audio.play();\n      }\n      console.log(\"playerName on host\", playerName);\n      console.log(\"listening on buzzing\");\n      if (playerName && playerName !== \"\") {\n        setBuzzedPlayer(playerName);\n        console.log(\"playerName\", typeof playerName);\n        console.log(playerName, \"đã bấm chuông\");\n        setShowModal(true); // Show modal when a player buzzes\n      }\n    });\n    return () => {\n      unsubscribeBuzzing();\n    };\n  }, [roomId]);\n  useEffect(() => {\n    let hasMounted = false;\n    const unsubscribeBuzzing = listenToStar(roomId, playerName => {\n      // if (!hasMounted) {\n      //     hasMounted = true; // skip initial\n      //     return;\n      // }\n      const audio = sounds['buzz'];\n      if (audio) {\n        audio.play();\n      }\n      console.log(\"playerName on host\", playerName);\n      console.log(\"listening on buzzing\");\n      if (playerName && playerName !== \"\") {\n        setBuzzedPlayer(playerName);\n        console.log(\"playerName\", typeof playerName);\n        console.log(playerName, \"đã bấm chuông\");\n        setShowModal(true); // Show modal when a player buzzes\n      }\n    });\n    return () => {\n      unsubscribeBuzzing();\n    };\n  }, [roomId]);\n  useEffect(() => {\n    const unsubscribePlayers = listenToSound(roomId, async type => {\n      const audio = sounds[`${type}`];\n      if (audio) {\n        audio.play();\n      }\n      console.log(\"sound type\", type);\n      await deletePath(roomId, \"sound\");\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToAnswers(roomId, answer => {\n      const audio = sounds['correct'];\n      if (audio) {\n        audio.play();\n      }\n      setCorrectAnswer(`Đáp án: ${answer}`);\n      const timeOut = setTimeout(() => {\n        setCorrectAnswer(\"\");\n      }, 4000);\n      console.log(\"answer\", answer);\n      clearTimeout(timeOut);\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToQuestions(roomId, data => {\n      console.log(\"questions\", data);\n      setCurrentQuestion(data.question);\n      setCorrectAnswer(\"\");\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToSelectedCell(roomId, data => {\n      console.log(\"Selected cell data:\", data);\n      // Ensure data has the expected properties\n      if (data && typeof data.rowIndex === 'string' && typeof data.colIndex === 'string') {\n        const row = parseInt(data.rowIndex, 10);\n        const col = parseInt(data.colIndex, 10);\n\n        // Check if indices are valid numbers and within 5x5 grid bounds\n        if (!isNaN(row) && !isNaN(col) && row >= 0 && row < 5 && col >= 0 && col < 5) {\n          setGridColors(prev => {\n            const newGrid = prev.map(rowArray => [...rowArray]);\n            // Reset all cells with light yellow (#FFFF99) to white (#FFFFFF)\n            for (let prevRow = 0; prevRow < 5; prevRow++) {\n              for (let prevCol = 0; prevCol < 5; prevCol++) {\n                if (newGrid[prevRow][prevCol] === '#FFFF99') {\n                  newGrid[prevRow][prevCol] = '#FFFFFF';\n                }\n              }\n            }\n            // Set the current cell to light yellow\n            newGrid[row][col] = '#FFFF99';\n            return newGrid;\n          });\n          // Update the selected cell\n          setSelectedCell({\n            row,\n            col\n          });\n        } else {\n          console.warn(`Invalid cell indices: row=${row}, col=${col}`);\n        }\n      } else {\n        console.warn(\"Invalid or missing data from listenToSelectedCell:\", data);\n      }\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToCellColor(roomId, data => {\n      console.log(\"questions\", data);\n      const row = parseInt(data.rowIndex);\n      const col = parseInt(data.colIndex);\n      const color = data.color;\n      if (!isNaN(row) && !isNaN(col) && row >= 0 && row < 5 && col >= 0 && col < 5 && color) {\n        setGridColors(prev => {\n          const newGrid = prev.map(rowArray => [...rowArray]);\n          newGrid[row][col] = colorMap[color];\n          return newGrid;\n        });\n      }\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setMenu({\n          visible: false\n        });\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-slate-800/80 backdrop-blur-sm rounded-2xl border border-blue-400/30 shadow-2xl p-6 mb-4 w-full max-w-3xl mx-auto min-h-[400px]\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold text-cyan-200 mb-2 text-center drop-shadow\",\n      children: currentQuestion || \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 13\n    }, this), correctAnswer && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold text-green-300 mb-4 text-center drop-shadow\",\n      children: correctAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-6 mb-2 w-fit\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-14 h-14\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }, this), ['1', '2', '3', '4', '5'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center font-bold text-cyan-100 rounded-lg w-14 h-14 shadow\",\n        children: label\n      }, label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-rows-5 gap-2\",\n      children: ['A', 'B', 'C', 'D', 'E'].map((rowLabel, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-center font-bold text-cyan-100 rounded-lg w-14 h-14 shadow\",\n          children: rowLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 25\n        }, this), initialGrid[rowIndex].map((cell, colIndex) => {\n          const showMenu = menu.visible && menu.rowIndex === rowIndex && menu.colIndex === colIndex;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => handleCellClick(rowIndex, colIndex),\n              className: `flex items-center justify-center w-14 h-14 rounded-lg border-2 transition-all duration-150 ${isHost ? 'cursor-pointer hover:scale-105 hover:border-blue-400' : 'cursor-not-allowed'}`,\n              style: {\n                backgroundColor: gridColors[rowIndex][colIndex],\n                borderColor: showMenu ? '#38bdf8' : '#334155'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-black text-lg font-semibold\",\n                children: cell\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 37\n            }, this), showMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: menuRef,\n              className: \"absolute left-20 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\",\n                onClick: () => handleMenuAction('select', rowIndex, colIndex),\n                children: \"SELECT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"w-6 h-6 bg-red-500 rounded\",\n                onClick: () => handleMenuAction('red', rowIndex, colIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"w-6 h-6 bg-green-500 rounded\",\n                onClick: () => handleMenuAction('green', rowIndex, colIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"w-6 h-6 bg-blue-500 rounded\",\n                onClick: () => handleMenuAction('blue', rowIndex, colIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"w-6 h-6 bg-yellow-500 rounded\",\n                onClick: () => handleMenuAction('yellow', rowIndex, colIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 41\n            }, this)]\n          }, `${rowIndex}-${colIndex}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 33\n          }, this);\n        })]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 13\n    }, this), showModal && buzzedPlayer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg p-6 w-80 shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold text-gray-800 mb-4 text-center\",\n          children: `${buzzedPlayer} đã nhấn chuông trả lời`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCloseModal,\n            className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400\",\n            children: \"\\u0110\\xF3ng\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 374,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionBoxRound4, \"xlw4/U1f6YTwzR1OzxsltEFRCWk=\", false, function () {\n  return [useSounds, useTimeStart, useSearchParams, usePlayer];\n});\n_c = QuestionBoxRound4;\nexport default QuestionBoxRound4;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","sendSelectedCell","sendCellColor","useSearchParams","usePlayer","deletePath","listenToTimeStart","listenToSound","listenToQuestions","listenToSelectedCell","listenToCellColor","listenToAnswers","listenToBuzzing","listenToStar","useTimeStart","resetBuzz","useSounds","jsxDEV","_jsxDEV","exampleGrid","exampleQuestions","QuestionBoxRound4","initialGrid","questions","isSpectator","isHost","_s","colorMap","red","green","blue","yellow","sounds","startTimer","timeLeft","setTimeLeft","selectedQuestion","setSelectedQuestion","currentQuestion","setCurrentQuestion","correctAnswer","setCorrectAnswer","gridColors","setGridColors","Array","fill","map","menu","setMenu","visible","selectedCell","setSelectedCell","menuRef","searchParams","roomId","get","setEasyQuestionNumber","setMediumQuestionNumber","setHardQuestionNumber","setLevel","animationKey","setAnimationKey","buzzedPlayer","setBuzzedPlayer","showModal","setShowModal","isInitialTimerMount","console","log","current","prev","isInitialMount","unsubscribe","handleCloseModal","handleCellClick","row","col","rowIndex","colIndex","handleMenuAction","action","toString","questionIndex","newGrid","rowArray","prevRow","prevCol","lastBuzzedPlayerRef","hasMounted","unsubscribeBuzzing","playerName","audio","play","unsubscribePlayers","type","answer","timeOut","setTimeout","clearTimeout","data","question","parseInt","isNaN","warn","color","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","label","rowLabel","cell","showMenu","onClick","style","backgroundColor","borderColor","ref","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round4.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Play from '../Play';\r\nimport { RoundBase } from '../../type';\r\nimport { sendSelectedCell, sendCellColor } from '../../components/services';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { usePlayer } from '../../context/playerContext';\r\nimport { deletePath, listenToTimeStart, listenToSound, listenToQuestions, listenToSelectedCell, listenToCellColor, listenToAnswers, listenToBuzzing, listenToStar } from '../../services/firebaseServices';\r\nimport { useTimeStart } from '../../context/timeListenerContext';\r\nimport { resetBuzz } from '../../components/services';\r\nimport { useSounds } from '../../context/soundContext';\r\ninterface QuestionComponentProps {\r\n    initialGrid: string[][]; // 5x5 grid (can be passed from parent or generated)\r\n    questions: string[]; // Array of questions for testing\r\n    isSpectator?: boolean; // Indicates whether the user is a spectator\r\n    isHost?: boolean; // Indicates whether the user is the host\r\n}\r\n\r\nconst exampleGrid = [\r\n    ['!', '', '?', '', '!'],\r\n    ['', '?', '!', '', '?'],\r\n    ['?', '', '', '!', '?'],\r\n    ['!', '?', '', '', '!'],\r\n    ['?', '!', '', '?', ''],\r\n];\r\n\r\n// Example questions for testing\r\nconst exampleQuestions = [\r\n    'Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5',\r\n    'Question 6', 'Question 7', 'Question 8', 'Question 9', 'Question 10',\r\n    'Question 11', 'Question 12', 'Question 13', 'Question 14', 'Question 15',\r\n    'Question 16', 'Question 17', 'Question 18', 'Question 19', 'Question 20',\r\n    'Question 21', 'Question 22', 'Question 23', 'Question 24', 'Question 25',\r\n];\r\n\r\nconst QuestionBoxRound4: React.FC<QuestionComponentProps> = ({\r\n    initialGrid,\r\n    questions,\r\n    isSpectator,\r\n    isHost = false,\r\n}) => {\r\n    const colorMap: Record<string, string> = {\r\n        red: '#FF0000',\r\n        green: '#00FF00',\r\n        blue: '#0000FF',\r\n        yellow: '#FFFF00',\r\n    };\r\n    const sounds = useSounds();\r\n    const { startTimer, timeLeft, setTimeLeft } = useTimeStart();\r\n    const [selectedQuestion, setSelectedQuestion] = useState<string | null>(null);\r\n    const [currentQuestion, setCurrentQuestion] = useState<string>(\"\")\r\n    const [correctAnswer, setCorrectAnswer] = useState<string>(\"\")\r\n    const [gridColors, setGridColors] = useState<string[][]>(\r\n        Array(5).fill(null).map(() => Array(5).fill('#FFFFFF')) // Default grid colors are white\r\n    );\r\n    const [menu, setMenu] = useState<{\r\n        visible: boolean;\r\n        rowIndex?: number;\r\n        colIndex?: number;\r\n    }>({ visible: false });\r\n    const [selectedCell, setSelectedCell] = useState<{ row: number; col: number } | null>(null);\r\n    const menuRef = useRef<HTMLDivElement>(null);\r\n    const [searchParams] = useSearchParams()\r\n    const roomId = searchParams.get(\"roomId\") || \"4\"\r\n    const { setEasyQuestionNumber, setMediumQuestionNumber, setHardQuestionNumber, setLevel, animationKey, setAnimationKey } = usePlayer()\r\n    const [buzzedPlayer, setBuzzedPlayer] = useState<string>(\"\");\r\n    const [showModal, setShowModal] = useState(false); // State for modal visibility\r\n    const isInitialTimerMount = useRef(false)\r\n    useEffect(() => {\r\n        console.log(\"timeLeft\", timeLeft);\r\n        if (isInitialTimerMount.current) {\r\n            isInitialTimerMount.current = false;\r\n            return;\r\n        }\r\n        if (timeLeft === 0) {\r\n            setAnimationKey((prev: number) => prev + 1);\r\n        }\r\n    }, [timeLeft]);\r\n\r\n    const isInitialMount = useRef(false)\r\n    useEffect(() => {\r\n        const unsubscribe = listenToTimeStart(roomId, async () => {\r\n\r\n\r\n            // Skip the timer setting on the first mount, but allow future calls to run\r\n            if (isInitialMount.current) {\r\n                isInitialMount.current = false;\r\n                return;\r\n            }\r\n            startTimer(15)\r\n            return () => {\r\n                unsubscribe();\r\n\r\n            };\r\n        })\r\n\r\n    }, [])\r\n\r\n    const handleCloseModal = () => {\r\n        setShowModal(false);\r\n        // Optionally clear buzzedPlayer if you want to reset it\r\n        setBuzzedPlayer(\"\");\r\n\r\n        if (isHost) {\r\n            resetBuzz(roomId)\r\n        }\r\n    };\r\n    // Function to handle cell click (only for host)\r\n    const handleCellClick = (row: number, col: number) => {\r\n        if (!isHost) return; // Prevent non-host users from interacting\r\n        setMenu({\r\n            visible: true,\r\n            rowIndex: row,\r\n            colIndex: col,\r\n        });\r\n    };\r\n\r\n    // Function to handle menu actions\r\n    const handleMenuAction = (action: 'select' | 'red' | 'green' | 'blue' | 'yellow', row: number, col: number) => {\r\n        if (action === 'select') {\r\n            if (initialGrid[row][col] == \"\") {\r\n\r\n                setLevel(\"Dễ\")\r\n            }\r\n\r\n            if (initialGrid[row][col] == \"!\") {\r\n\r\n                setLevel(\"Trung bình\")\r\n            }\r\n\r\n            if (initialGrid[row][col] == \"?\") {\r\n\r\n                setLevel(\"Khó\")\r\n            }\r\n\r\n            sendSelectedCell(roomId, col.toString(), row.toString())\r\n            const questionIndex = row * 5 + col; // Calculate question index from grid position\r\n            if (questions[questionIndex]) {\r\n                setSelectedQuestion(questions[questionIndex]);\r\n                setGridColors((prev) => {\r\n                    const newGrid = prev.map((rowArray) => [...rowArray]);\r\n                    // Reset the previously selected cell to white, if it exists and wasn't colored otherwise\r\n                    if (selectedCell) {\r\n                        const { row: prevRow, col: prevCol } = selectedCell;\r\n                        // Only reset if the cell is still light yellow (i.e., not changed by color buttons)\r\n                        if (newGrid[prevRow][prevCol] === '#FFFF99') {\r\n                            newGrid[prevRow][prevCol] = '#FFFFFF';\r\n                        }\r\n                    }\r\n                    // Set the current cell to light yellow\r\n                    newGrid[row][col] = '#FFFF99'; // Light yellow\r\n                    return newGrid;\r\n                });\r\n                // Update the selected cell\r\n                setSelectedCell({ row, col });\r\n            }\r\n        } else {\r\n            sendCellColor(roomId, col.toString(), row.toString(), action)\r\n            // Set the cell color based on the selected action\r\n\r\n            setGridColors((prev) => {\r\n                const newGrid = prev.map((rowArray) => [...rowArray]);\r\n                newGrid[row][col] = colorMap[action];\r\n                return newGrid;\r\n            });\r\n            // If the cell was previously selected, clear the selection\r\n            if (selectedCell && selectedCell.row === row && selectedCell.col === col) {\r\n                setSelectedCell(null);\r\n            }\r\n        }\r\n        setMenu({ visible: false }); // Close the menu\r\n    };\r\n    const lastBuzzedPlayerRef = useRef<string | null>(null);\r\n\r\n    // const isInitialMount = true;\r\n    // useEffect(() => {\r\n    //     if (isInitialMount) return\r\n\r\n\r\n    //     // Start timer when selectedTopic changes\r\n    //     startTimer(15);\r\n\r\n    //     return () => {\r\n\r\n    //     }\r\n\r\n    //     // Side effects based on timer reaching 0\r\n    // }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        let hasMounted = false;\r\n        const unsubscribeBuzzing = listenToBuzzing(roomId, (playerName) => {\r\n            // if (!hasMounted) {\r\n            //     hasMounted = true; // skip initial\r\n            //     return;\r\n            // }\r\n            const audio = sounds['buzz'];\r\n            if (audio) {\r\n                audio.play();\r\n            }\r\n            console.log(\"playerName on host\", playerName);\r\n\r\n            console.log(\"listening on buzzing\");\r\n\r\n            if (playerName && playerName !== \"\") {\r\n                setBuzzedPlayer(playerName);\r\n                console.log(\"playerName\", typeof playerName);\r\n\r\n                console.log(playerName, \"đã bấm chuông\")\r\n                setShowModal(true); // Show modal when a player buzzes\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribeBuzzing();\r\n        };\r\n    }, [roomId]);\r\n\r\n    useEffect(() => {\r\n\r\n        let hasMounted = false;\r\n        const unsubscribeBuzzing = listenToStar(roomId, (playerName) => {\r\n            // if (!hasMounted) {\r\n            //     hasMounted = true; // skip initial\r\n            //     return;\r\n            // }\r\n            const audio = sounds['buzz'];\r\n            if (audio) {\r\n                audio.play();\r\n            }\r\n            console.log(\"playerName on host\", playerName);\r\n\r\n            console.log(\"listening on buzzing\");\r\n\r\n            if (playerName && playerName !== \"\") {\r\n                setBuzzedPlayer(playerName);\r\n                console.log(\"playerName\", typeof playerName);\r\n\r\n                console.log(playerName, \"đã bấm chuông\")\r\n                setShowModal(true); // Show modal when a player buzzes\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribeBuzzing();\r\n        };\r\n    }, [roomId]);\r\n\r\n    useEffect(() => {\r\n        const unsubscribePlayers = listenToSound(roomId, async (type) => {\r\n\r\n            const audio = sounds[`${type}`];\r\n            if (audio) {\r\n                audio.play();\r\n            }\r\n            console.log(\"sound type\", type)\r\n            await deletePath(roomId, \"sound\")\r\n        });\r\n\r\n        // No need to set state here; it's handled by useState initializer\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToAnswers(roomId, (answer) => {\r\n            const audio = sounds['correct'];\r\n            if (audio) {\r\n                audio.play();\r\n            }\r\n            setCorrectAnswer(`Đáp án: ${answer}`)\r\n            const timeOut = setTimeout(() => {\r\n                setCorrectAnswer(\"\")\r\n            }, 4000)\r\n            console.log(\"answer\", answer)\r\n            clearTimeout(timeOut)\r\n        });\r\n\r\n        // No need to set state here; it's handled by useState initializer\r\n        return () => {\r\n            unsubscribePlayers();\r\n\r\n        };\r\n    }, []);\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToQuestions(roomId, (data) => {\r\n            console.log(\"questions\", data);\r\n\r\n            setCurrentQuestion(data.question)\r\n            setCorrectAnswer(\"\")\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToSelectedCell(roomId, (data) => {\r\n            console.log(\"Selected cell data:\", data);\r\n            // Ensure data has the expected properties\r\n            if (data && typeof data.rowIndex === 'string' && typeof data.colIndex === 'string') {\r\n                const row = parseInt(data.rowIndex, 10);\r\n                const col = parseInt(data.colIndex, 10);\r\n\r\n                // Check if indices are valid numbers and within 5x5 grid bounds\r\n                if (!isNaN(row) && !isNaN(col) && row >= 0 && row < 5 && col >= 0 && col < 5) {\r\n                    setGridColors((prev) => {\r\n                        const newGrid = prev.map((rowArray) => [...rowArray]);\r\n                        // Reset all cells with light yellow (#FFFF99) to white (#FFFFFF)\r\n                        for (let prevRow = 0; prevRow < 5; prevRow++) {\r\n                            for (let prevCol = 0; prevCol < 5; prevCol++) {\r\n                                if (newGrid[prevRow][prevCol] === '#FFFF99') {\r\n                                    newGrid[prevRow][prevCol] = '#FFFFFF';\r\n                                }\r\n                            }\r\n                        }\r\n                        // Set the current cell to light yellow\r\n                        newGrid[row][col] = '#FFFF99';\r\n                        return newGrid;\r\n                    });\r\n                    // Update the selected cell\r\n                    setSelectedCell({ row, col });\r\n                } else {\r\n                    console.warn(`Invalid cell indices: row=${row}, col=${col}`);\r\n                }\r\n            } else {\r\n                console.warn(\"Invalid or missing data from listenToSelectedCell:\", data);\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToCellColor(roomId, (data) => {\r\n            console.log(\"questions\", data);\r\n            const row = parseInt(data.rowIndex)\r\n            const col = parseInt(data.colIndex)\r\n            const color = data.color\r\n\r\n            if (!isNaN(row) && !isNaN(col) && row >= 0 && row < 5 && col >= 0 && col < 5 && color) {\r\n                setGridColors((prev) => {\r\n                    const newGrid = prev.map((rowArray) => [...rowArray]);\r\n                    newGrid[row][col] = colorMap[color];\r\n                    return newGrid;\r\n                });\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n                setMenu({ visible: false });\r\n            }\r\n        };\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center bg-slate-800/80 backdrop-blur-sm rounded-2xl border border-blue-400/30 shadow-2xl p-6 mb-4 w-full max-w-3xl mx-auto min-h-[400px]\">\r\n            {/* Display selected question */}\r\n            <h2 className=\"text-2xl font-bold text-cyan-200 mb-2 text-center drop-shadow\">\r\n                {currentQuestion || \"\"}\r\n            </h2>\r\n            {correctAnswer && (\r\n                <h2 className=\"text-xl font-semibold text-green-300 mb-4 text-center drop-shadow\">\r\n                    {correctAnswer}\r\n                </h2>\r\n            )}\r\n\r\n            {/* Column labels (1, 2, 3, 4, 5) */}\r\n            <div className=\"grid grid-cols-6 mb-2 w-fit\">\r\n                <div className=\"w-14 h-14\"></div>\r\n                {['1', '2', '3', '4', '5'].map((label) => (\r\n                    <div\r\n                        key={label}\r\n                        className=\"flex items-center justify-center font-bold text-cyan-100 rounded-lg w-14 h-14 shadow\"\r\n                    >\r\n                        {label}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Render 5x5 grid with row labels (A, B, C, D, E) */}\r\n            <div className=\"grid grid-rows-5 gap-2\">\r\n                {['A', 'B', 'C', 'D', 'E'].map((rowLabel, rowIndex) => (\r\n                    <div key={rowIndex} className=\"flex\">\r\n                        <div className=\"flex items-center justify-center font-bold text-cyan-100 rounded-lg w-14 h-14 shadow\">\r\n                            {rowLabel}\r\n                        </div>\r\n                        {initialGrid[rowIndex].map((cell, colIndex) => {\r\n                            const showMenu =\r\n                                menu.visible &&\r\n                                menu.rowIndex === rowIndex &&\r\n                                menu.colIndex === colIndex;\r\n\r\n                            return (\r\n                                <div className=\"relative flex items-center\" key={`${rowIndex}-${colIndex}`}>\r\n                                    <div\r\n                                        onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                                        className={`flex items-center justify-center w-14 h-14 rounded-lg border-2 transition-all duration-150 ${isHost\r\n                                            ? 'cursor-pointer hover:scale-105 hover:border-blue-400'\r\n                                            : 'cursor-not-allowed'\r\n                                            }`}\r\n                                        style={{\r\n                                            backgroundColor: gridColors[rowIndex][colIndex],\r\n                                            borderColor: showMenu ? '#38bdf8' : '#334155',\r\n                                        }}\r\n                                    >\r\n                                        <span className=\"text-black text-lg font-semibold\">{cell}</span>\r\n                                    </div>\r\n\r\n                                    {showMenu && (\r\n                                        <div\r\n                                            ref={menuRef}\r\n                                            className=\"absolute left-20 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\"\r\n                                        >\r\n                                            <button\r\n                                                className=\"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n                                                onClick={() =>\r\n                                                    handleMenuAction('select', rowIndex, colIndex)\r\n                                                }\r\n                                            >\r\n                                                SELECT\r\n                                            </button>\r\n                                            <button\r\n                                                className=\"w-6 h-6 bg-red-500 rounded\"\r\n                                                onClick={() =>\r\n                                                    handleMenuAction('red', rowIndex, colIndex)\r\n                                                }\r\n                                            />\r\n                                            <button\r\n                                                className=\"w-6 h-6 bg-green-500 rounded\"\r\n                                                onClick={() =>\r\n                                                    handleMenuAction('green', rowIndex, colIndex)\r\n                                                }\r\n                                            />\r\n                                            <button\r\n                                                className=\"w-6 h-6 bg-blue-500 rounded\"\r\n                                                onClick={() =>\r\n                                                    handleMenuAction('blue', rowIndex, colIndex)\r\n                                                }\r\n                                            />\r\n                                            <button\r\n                                                className=\"w-6 h-6 bg-yellow-500 rounded\"\r\n                                                onClick={() =>\r\n                                                    handleMenuAction('yellow', rowIndex, colIndex)\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Modal */}\r\n            {showModal && buzzedPlayer && (\r\n                <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n                    <div className=\"bg-white rounded-lg p-6 w-80 shadow-lg\">\r\n                        <h2 className=\"text-lg font-semibold text-gray-800 mb-4 text-center\">\r\n                            {`${buzzedPlayer} đã nhấn chuông trả lời`}\r\n                        </h2>\r\n                        <div className=\"flex justify-center\">\r\n                            <button\r\n                                onClick={handleCloseModal}\r\n                                className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n                            >\r\n                                Đóng\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionBoxRound4;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}