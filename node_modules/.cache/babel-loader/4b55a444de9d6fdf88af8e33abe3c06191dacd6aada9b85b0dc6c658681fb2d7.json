{"ast":null,"code":"import { getAxiosAuthContext } from \"../../../context/authContext\";\nimport axios from \"axios\";\nexport const sendAnswerToPlayer = async roomId => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/test/broadcast?room_id=${roomId}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const updateScore = async (roomId, scoreList) => {\n  try {\n    const context = getAxiosAuthContext();\n    const {\n      authToken,\n      getAxiosInstance\n    } = context;\n    const axiosInstance = getAxiosInstance();\n    if (!authToken) {\n      throw new Error(\"No token found. Please log in.\");\n    }\n    const response = await axiosInstance.post(`/api/test/score?room_id=${roomId}`, scoreList, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}` // Nếu API yêu cầu token\n      }\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const startTime = async roomId => {\n  try {\n    const context = getAxiosAuthContext();\n    const {\n      authToken,\n      getAxiosInstance\n    } = context;\n    const axiosInstance = getAxiosInstance();\n    if (!authToken) {\n      throw new Error(\"No token found. Please log in.\");\n    }\n    const response = await axiosInstance.post(`/api/test/time?room_id=${roomId}`, {}, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}` // Nếu API yêu cầu token\n      }\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const resetBuzz = async roomId => {\n  try {\n    const response = await axios.post(`http://localhost:8000/api/buzz/reset?room_id=${roomId}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error(`Failed to go to next round, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};","map":{"version":3,"names":["getAxiosAuthContext","axios","sendAnswerToPlayer","roomId","response","post","headers","withCredentials","status","Error","data","error","console","updateScore","scoreList","context","authToken","getAxiosInstance","axiosInstance","startTime","resetBuzz"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/service.ts"],"sourcesContent":["import { Question, Score } from \"../../../type\";\r\nimport { getAxiosAuthContext } from \"../../../context/authContext\";\r\nimport axios from \"axios\";\r\n\r\nexport const sendAnswerToPlayer = async (roomId: string): Promise<any> => {\r\n  try {\r\n\r\n    const response = await axios.post(`http://localhost:8000/api/test/broadcast?room_id=${roomId}`, {},{\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      withCredentials:true\r\n    });\r\n\r\n    if (response.status !== 200) {\r\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    return response.data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n\r\nexport const updateScore = async (roomId: string, scoreList: Score[]): Promise<any> => {\r\n  try {\r\n    \r\n    const context = getAxiosAuthContext()\r\n    const { authToken, getAxiosInstance } = context\r\n    const axiosInstance = getAxiosInstance()\r\n    if (!authToken) {\r\n      throw new Error(\"No token found. Please log in.\");\r\n    }\r\n    const response = await axiosInstance.post(`/api/test/score?room_id=${roomId}`, scoreList,{\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${authToken}`, // Nếu API yêu cầu token\r\n      },\r\n    });\r\n\r\n    if (response.status !== 200) {\r\n      throw new Error(`Failed to send answer, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    return response.data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n\r\nexport const startTime = async (roomId: string): Promise<any> => {\r\n    try {\r\n      \r\n      const context = getAxiosAuthContext()\r\n      const { authToken, getAxiosInstance } = context\r\n      const axiosInstance = getAxiosInstance()\r\n      if (!authToken) {\r\n        throw new Error(\"No token found. Please log in.\");\r\n      }\r\n      const response = await axiosInstance.post(`/api/test/time?room_id=${roomId}`, {},{\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authToken}`, // Nếu API yêu cầu token\r\n        },\r\n      });\r\n  \r\n      if (response.status !== 200) {\r\n        throw new Error(`Failed to send answer, Status: ${response.status}`);\r\n      }\r\n  \r\n      // Phân tích dữ liệu từ response JSON\r\n      return response.data;\r\n  \r\n    } catch (error) {\r\n      console.error('Error fetching test data:', error);\r\n      throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n  };\r\n\r\n  export const resetBuzz = async (roomId: string) => {\r\n    try {\r\n        const response = await axios.post(`http://localhost:8000/api/buzz/reset?room_id=${roomId}`,\r\n            {\r\n\r\n            },\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                withCredentials: true,\r\n            });\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(`Failed to go to next round, Status: ${response.status}`);\r\n        }\r\n\r\n        // Phân tích dữ liệu từ response JSON\r\n        return response.data;\r\n\r\n    } catch (error) {\r\n        console.error('Error fetching test data:', error);\r\n        throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n    }\r\n}\r\n  \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}