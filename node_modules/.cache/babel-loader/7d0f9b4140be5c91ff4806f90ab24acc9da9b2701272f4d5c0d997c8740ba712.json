{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nexport const getTest = async (testName, userId) => {\n  _s();\n  try {\n    const {\n      context\n    } = useAxiosAuth();\n    const axiosInstance = getAxiosInstance();\n    if (!authToken) {\n      throw new Error(\"No token found. Please log in.\");\n    }\n    const response = await axiosInstance(`/api/test/${testName}?test_owner=${userId}`, {\n      method: 'GET',\n      // Phương thức HTTP\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}` // Nếu API yêu cầu token\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch test with ID: ${testName}, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\n_s(getTest, \"dNr2jb53bcOl9lEKMeNwMhjsDto=\", true);\nexport const uploadTestToServer = async (file, testName) => {\n  _s2();\n  const {\n    authToken,\n    axiosInstance\n  } = useAxiosAuth();\n  if (!authToken) {\n    throw new Error(\"No token found. Please log in.\");\n  }\n  // Kiểm tra nếu không có file\n  if (!file) {\n    throw new Error(\"Không có file nào được chọn!\");\n  }\n\n  // Tạo đối tượng FormData để đóng gói file\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  try {\n    // Gửi yêu cầu POST tới server\n    const response = await axiosInstance(`/api/test/upload?test_name=${testName}`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${authToken}` // Nếu API yêu cầu token\n      },\n      credentials: \"include\",\n      body: formData\n    });\n\n    // Kiểm tra phản hồi HTTP\n    if (response.status == 400) {\n      throw new Error(`Upload thất bại: Bộ đề đã tồn tại! chọn bộ đề khác`);\n    }\n    if (!response.ok) {\n      throw new Error(`Upload thất bại: ${response.statusText}`);\n    }\n\n    // Giải mã JSON từ server\n    const result = await response.json();\n    console.log(\"Upload thành công:\", result);\n    return {\n      message: \"Upload thành công!\",\n      data: result\n    };\n  } catch (error) {\n    console.error(\"Lỗi khi upload file:\", error.message);\n    throw new Error(`Lỗi upload: ${error.message}`);\n  }\n};\n_s2(uploadTestToServer, \"iAoKnCa7qI7EYo+5aPzeSoccV6s=\", true);\nexport const getTestByUserId = async (userId, getToken) => {\n  try {\n    const token = await getToken();\n    if (!token) {\n      throw new Error(\"No token found. Please log in.\");\n    }\n    const response = await fetch(`http://127.0.0.1:8000/api/test/user/${userId}`, {\n      method: 'GET',\n      // Phương thức HTTP\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Nếu API yêu cầu token\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch test with ID: ${userId}, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};\nexport const updateQuestion = async (updateQuestion, question_id, getToken) => {\n  try {\n    const token = await getToken();\n    if (!token) {\n      throw new Error(\"No token found. Please log in.\");\n    }\n    const response = await fetch(`http://127.0.0.1:8000/api/test/update/${question_id}`, {\n      method: 'PUT',\n      // Phương thức HTTP\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Nếu API yêu cầu token\n      },\n      body: JSON.stringify(updateQuestion)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch test with ID: ${question_id}, Status: ${response.status}`);\n    }\n\n    // Phân tích dữ liệu từ response JSON\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching test data:', error);\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\n  }\n};","map":{"version":3,"names":["getTest","testName","userId","_s","context","useAxiosAuth","axiosInstance","getAxiosInstance","authToken","Error","response","method","headers","ok","status","data","json","error","console","uploadTestToServer","file","_s2","formData","FormData","append","credentials","body","statusText","result","log","message","getTestByUserId","getToken","token","fetch","updateQuestion","question_id","JSON","stringify"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Test/service.ts"],"sourcesContent":["import { Question } from \"../../../type\";\r\nimport { getAxiosAuthContext } from \"../../../context/authContext\";\r\n\r\nexport const getTest = async (testName: string, userId: string): Promise<any> => {\r\n  try {\r\n\r\n    const {context } = useAxiosAuth()\r\n    const axiosInstance = getAxiosInstance()\r\n    if (!authToken) {\r\n      throw new Error(\"No token found. Please log in.\");\r\n    }\r\n    const response = await axiosInstance(`/api/test/${testName}?test_owner=${userId}`, {\r\n      method: 'GET', // Phương thức HTTP\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${authToken}`, // Nếu API yêu cầu token\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch test with ID: ${testName}, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    const data = await response.json();\r\n    return data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n\r\nexport const uploadTestToServer = async (file: File, testName: string): Promise<{ message: string; data?: any }> => {\r\n  const {authToken, axiosInstance } = useAxiosAuth()\r\n  if (!authToken) {\r\n    throw new Error(\"No token found. Please log in.\");\r\n  }\r\n  // Kiểm tra nếu không có file\r\n  if (!file) {\r\n    throw new Error(\"Không có file nào được chọn!\");\r\n  }\r\n\r\n  // Tạo đối tượng FormData để đóng gói file\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n\r\n  try {\r\n    // Gửi yêu cầu POST tới server\r\n    const response = await axiosInstance(`/api/test/upload?test_name=${testName}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${authToken}`, // Nếu API yêu cầu token\r\n      },\r\n      credentials: \"include\",\r\n      body: formData,\r\n    });\r\n\r\n    // Kiểm tra phản hồi HTTP\r\n    if (response.status == 400) {\r\n      throw new Error(`Upload thất bại: Bộ đề đã tồn tại! chọn bộ đề khác`);\r\n    }\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Upload thất bại: ${response.statusText}`);\r\n    }\r\n\r\n    // Giải mã JSON từ server\r\n    const result = await response.json();\r\n    console.log(\"Upload thành công:\", result);\r\n    return { message: \"Upload thành công!\", data: result };\r\n  } catch (error: any) {\r\n    console.error(\"Lỗi khi upload file:\", error.message);\r\n    throw new Error(`Lỗi upload: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const getTestByUserId = async (userId: string, getToken: () => Promise<string | null>): Promise<any> => {\r\n  try {\r\n\r\n    const token = await getToken();\r\n    if (!token) {\r\n      throw new Error(\"No token found. Please log in.\");\r\n    }\r\n    const response = await fetch(`http://127.0.0.1:8000/api/test/user/${userId}`, {\r\n      method: 'GET', // Phương thức HTTP\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`, // Nếu API yêu cầu token\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch test with ID: ${userId}, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    const data = await response.json();\r\n    return data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n\r\nexport const updateQuestion = async (updateQuestion: Partial<Question>, question_id: string, getToken: () => Promise<string | null>): Promise<any> => {\r\n  try {\r\n\r\n    const token = await getToken();\r\n    if (!token) {\r\n      throw new Error(\"No token found. Please log in.\");\r\n    }\r\n\r\n    const response = await fetch(`http://127.0.0.1:8000/api/test/update/${question_id}`, {\r\n      method: 'PUT', // Phương thức HTTP\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`, // Nếu API yêu cầu token\r\n      },\r\n      body: JSON.stringify(updateQuestion)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch test with ID: ${question_id}, Status: ${response.status}`);\r\n    }\r\n\r\n    // Phân tích dữ liệu từ response JSON\r\n    const data = await response.json();\r\n    return data;\r\n\r\n  } catch (error) {\r\n    console.error('Error fetching test data:', error);\r\n    throw error; // Quăng lỗi để xử lý ở nơi gọi hàm\r\n  }\r\n};\r\n"],"mappings":";;AAGA,OAAO,MAAMA,OAAO,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,MAAc,KAAmB;EAAAC,EAAA;EAC/E,IAAI;IAEF,MAAM;MAACC;IAAQ,CAAC,GAAGC,YAAY,CAAC,CAAC;IACjC,MAAMC,aAAa,GAAGC,gBAAgB,CAAC,CAAC;IACxC,IAAI,CAACC,SAAS,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IACnD;IACA,MAAMC,QAAQ,GAAG,MAAMJ,aAAa,CAAC,aAAaL,QAAQ,eAAeC,MAAM,EAAE,EAAE;MACjFS,MAAM,EAAE,KAAK;MAAE;MACfC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUJ,SAAS,EAAE,CAAE;MAC1C;IACF,CAAC,CAAC;IAEF,IAAI,CAACE,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIJ,KAAK,CAAC,iCAAiCR,QAAQ,aAAaS,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC1F;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EAEb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAACd,EAAA,CA5BWH,OAAO;AA8BpB,OAAO,MAAMmB,kBAAkB,GAAG,MAAAA,CAAOC,IAAU,EAAEnB,QAAgB,KAA+C;EAAAoB,GAAA;EAClH,MAAM;IAACb,SAAS;IAAEF;EAAc,CAAC,GAAGD,YAAY,CAAC,CAAC;EAClD,IAAI,CAACG,SAAS,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;EACnD;EACA;EACA,IAAI,CAACW,IAAI,EAAE;IACT,MAAM,IAAIX,KAAK,CAAC,8BAA8B,CAAC;EACjD;;EAEA;EACA,MAAMa,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;EAE7B,IAAI;IACF;IACA,MAAMV,QAAQ,GAAG,MAAMJ,aAAa,CAAC,8BAA8BL,QAAQ,EAAE,EAAE;MAC7EU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUJ,SAAS,EAAE,CAAE;MAC1C,CAAC;MACDiB,WAAW,EAAE,SAAS;MACtBC,IAAI,EAAEJ;IACR,CAAC,CAAC;;IAEF;IACA,IAAIZ,QAAQ,CAACI,MAAM,IAAI,GAAG,EAAE;MAC1B,MAAM,IAAIL,KAAK,CAAC,oDAAoD,CAAC;IACvE;IAEA,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIJ,KAAK,CAAC,oBAAoBC,QAAQ,CAACiB,UAAU,EAAE,CAAC;IAC5D;;IAEA;IACA,MAAMC,MAAM,GAAG,MAAMlB,QAAQ,CAACM,IAAI,CAAC,CAAC;IACpCE,OAAO,CAACW,GAAG,CAAC,oBAAoB,EAAED,MAAM,CAAC;IACzC,OAAO;MAAEE,OAAO,EAAE,oBAAoB;MAAEf,IAAI,EAAEa;IAAO,CAAC;EACxD,CAAC,CAAC,OAAOX,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACa,OAAO,CAAC;IACpD,MAAM,IAAIrB,KAAK,CAAC,eAAeQ,KAAK,CAACa,OAAO,EAAE,CAAC;EACjD;AACF,CAAC;AAACT,GAAA,CA3CWF,kBAAkB;AA6C/B,OAAO,MAAMY,eAAe,GAAG,MAAAA,CAAO7B,MAAc,EAAE8B,QAAsC,KAAmB;EAC7G,IAAI;IAEF,MAAMC,KAAK,GAAG,MAAMD,QAAQ,CAAC,CAAC;IAC9B,IAAI,CAACC,KAAK,EAAE;MACV,MAAM,IAAIxB,KAAK,CAAC,gCAAgC,CAAC;IACnD;IACA,MAAMC,QAAQ,GAAG,MAAMwB,KAAK,CAAC,uCAAuChC,MAAM,EAAE,EAAE;MAC5ES,MAAM,EAAE,KAAK;MAAE;MACfC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUqB,KAAK,EAAE,CAAE;MACtC;IACF,CAAC,CAAC;IAEF,IAAI,CAACvB,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIJ,KAAK,CAAC,iCAAiCP,MAAM,aAAaQ,QAAQ,CAACI,MAAM,EAAE,CAAC;IACxF;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EAEb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAED,OAAO,MAAMkB,cAAc,GAAG,MAAAA,CAAOA,cAAiC,EAAEC,WAAmB,EAAEJ,QAAsC,KAAmB;EACpJ,IAAI;IAEF,MAAMC,KAAK,GAAG,MAAMD,QAAQ,CAAC,CAAC;IAC9B,IAAI,CAACC,KAAK,EAAE;MACV,MAAM,IAAIxB,KAAK,CAAC,gCAAgC,CAAC;IACnD;IAEA,MAAMC,QAAQ,GAAG,MAAMwB,KAAK,CAAC,yCAAyCE,WAAW,EAAE,EAAE;MACnFzB,MAAM,EAAE,KAAK;MAAE;MACfC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUqB,KAAK,EAAE,CAAE;MACtC,CAAC;MACDP,IAAI,EAAEW,IAAI,CAACC,SAAS,CAACH,cAAc;IACrC,CAAC,CAAC;IAEF,IAAI,CAACzB,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIJ,KAAK,CAAC,iCAAiC2B,WAAW,aAAa1B,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC7F;;IAEA;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EAEb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}