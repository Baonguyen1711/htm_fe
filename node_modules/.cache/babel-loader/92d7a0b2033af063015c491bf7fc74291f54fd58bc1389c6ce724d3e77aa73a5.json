{"ast":null,"code":"import React from \"react\";\n\n// Define word object structure\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CrosswordGrid = ({\n  placedWords,\n  boardSize = 20\n}) => {\n  const GRID_SIZE = 18;\n  const EMPTY_CELL = ' ';\n  function createEmptyGrid(size) {\n    return Array.from({\n      length: size\n    }, () => Array(size).fill(EMPTY_CELL));\n  }\n  const wordArr = ['GIÓ', 'HẠTGIỐNG', 'DREAM', 'THUỐC', 'CÚC', 'CHÂUKIỆTLUÂN'];\n  var board, wordBank, wordsActive, mode;\n  var isPos;\n  var classesOfBoard;\n  class WordObj {\n    constructor(str) {\n      this.string = void 0;\n      this.char = void 0;\n      this.totalMatches = 0;\n      this.effectiveMatches = 0;\n      this.successfulMatches = [];\n      this.x = 0;\n      this.y = 0;\n      this.dir = 0;\n      this.string = str;\n      this.char = str.split('');\n    }\n  }\n  const Bounds = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    Update: function (x, y) {\n      this.top = Math.min(y, this.top);\n      this.right = Math.max(x, this.right);\n      this.bottom = Math.max(y, this.bottom);\n      this.left = Math.min(x, this.left);\n    },\n    Clean: function () {\n      this.top = 999;\n      this.right = 0;\n      this.bottom = 0;\n      this.left = 999;\n    }\n  };\n  function CleanVars() {\n    Bounds.Clean();\n    wordBank = [];\n    wordsActive = [];\n    board = [];\n    isPos = [];\n    classesOfBoard = [];\n    for (let i = 0; i < 100; i++) {\n      board.push([]);\n      isPos.push([]);\n      classesOfBoard.push([]);\n      for (let j = 0; j < 100; j++) {\n        board[i].push(null);\n        isPos[i].push(false);\n        classesOfBoard[i].push([]);\n      }\n    }\n  }\n  function PrepareBoard() {\n    wordBank = [];\n    for (let i = 0; i < wordArr.length; i++) {\n      const actualPos = i + 1;\n      wordBank.push(new WordObj(' ' + actualPos.toString() + wordArr[i] + ' '));\n    }\n    for (let i = 0; i < wordBank.length; i++) {\n      const wA = wordBank[i];\n      for (let j = 0; j < wA.char.length; j++) {\n        const cA = wA.char[j];\n        for (let k = 0; k < wordBank.length; k++) {\n          const wB = wordBank[k];\n          if (i !== k) {\n            for (let l = 0; l < wB.char.length; l++) {\n              wA.totalMatches += cA === wB.char[l] ? 1 : 0;\n            }\n          }\n        }\n      }\n    }\n  }\n  function findWordIdx(givenWord) {\n    givenWord = givenWord.substring(2, givenWord.length - 1);\n    for (let i = 0; i < wordArr.length; i++) {\n      if (givenWord === wordArr[i]) return i + 1;\n    }\n    return undefined;\n  }\n  function RemoveClass(el, className) {\n    el.classList.remove(className);\n  }\n  function AddClass(el, className) {\n    el.classList.add(className);\n  }\n  function BoardToHtml(space) {\n    // Assume this is implemented elsewhere\n    return \"\";\n  }\n  function AddWordToBoard() {\n    var i,\n      len,\n      curIndex,\n      curWord,\n      curChar,\n      curMatch,\n      testWord,\n      testChar,\n      minMatchDiff = 9999,\n      curMatchDiff;\n    if (wordsActive.length < 1) {\n      curIndex = 0;\n      for (i = 0, len = wordBank.length; i < len; i++) {\n        if (wordBank[i].totalMatches < wordBank[curIndex].totalMatches) {\n          curIndex = i;\n        }\n      }\n      wordBank[curIndex].successfulMatches = [{\n        x: 12,\n        y: 12,\n        dir: 0\n      }];\n    } else {\n      curIndex = -1;\n      for (i = 0, len = wordBank.length; i < len; i++) {\n        curWord = wordBank[i];\n        curWord.effectiveMatches = 0;\n        curWord.successfulMatches = [];\n        for (var j = 0, lenJ = curWord.char.length; j < lenJ; j++) {\n          if (j == 1) continue; // skip pos\n          curChar = curWord.char[j];\n          for (var k = 0, lenK = wordsActive.length; k < lenK; k++) {\n            testWord = wordsActive[k];\n            for (var l = 0, lenL = testWord.char.length; l < lenL; l++) {\n              if (l == 1) continue; // skip pos\n              testChar = testWord.char[l];\n              if (curChar === testChar) {\n                curWord.effectiveMatches++;\n                var curCross = {\n                  x: testWord.x,\n                  y: testWord.y,\n                  dir: 0\n                };\n                if (testWord.dir === 0) {\n                  curCross.dir = 1;\n                  curCross.x += l;\n                  curCross.y -= j;\n                } else {\n                  curCross.dir = 0;\n                  curCross.y += l;\n                  curCross.x -= j;\n                }\n                var isMatch = true;\n                for (var m = -1, lenM = curWord.char.length + 1; m < lenM; m++) {\n                  var crossVal = [];\n                  if (m !== j) {\n                    if (curCross.dir === 0) {\n                      var xIndex = curCross.x + m;\n                      if (xIndex < 0 || xIndex > board.length) {\n                        isMatch = false;\n                        break;\n                      }\n                      crossVal.push(board[xIndex][curCross.y]);\n                      crossVal.push(board[xIndex][curCross.y + 1]);\n                      crossVal.push(board[xIndex][curCross.y - 1]);\n                    } else {\n                      var yIndex = curCross.y + m;\n                      if (yIndex < 0 || yIndex > board[curCross.x].length) {\n                        isMatch = false;\n                        break;\n                      }\n                      crossVal.push(board[curCross.x][yIndex]);\n                      crossVal.push(board[curCross.x + 1][yIndex]);\n                      crossVal.push(board[curCross.x - 1][yIndex]);\n                    }\n                    if (m > -1 && m < lenM - 1) {\n                      if (crossVal[0] !== curWord.char[m]) {\n                        if (crossVal[0] !== null) {\n                          isMatch = false;\n                          break;\n                        } else if (crossVal[1] !== null) {\n                          isMatch = false;\n                          break;\n                        } else if (crossVal[2] !== null) {\n                          isMatch = false;\n                          break;\n                        }\n                      }\n                    } else if (crossVal[0] !== null) {\n                      isMatch = false;\n                      break;\n                    }\n                  }\n                }\n                if (isMatch === true) {\n                  curWord.successfulMatches.push(curCross);\n                }\n              }\n            }\n          }\n        }\n        curMatchDiff = curWord.totalMatches - curWord.effectiveMatches;\n        if (curMatchDiff < minMatchDiff && curWord.successfulMatches.length > 0) {\n          curMatchDiff = minMatchDiff;\n          curIndex = i;\n        } else if (curMatchDiff <= 0) {\n          return false;\n        }\n      }\n    }\n    if (curIndex === -1) {\n      return false;\n    }\n    var spliced = wordBank.splice(curIndex, 1);\n    wordsActive.push(spliced[0]);\n    var pushIndex = wordsActive.length - 1,\n      rand = Math.random(),\n      matchArr = wordsActive[pushIndex].successfulMatches,\n      matchIndex = Math.floor(rand * matchArr.length),\n      matchData = matchArr[matchIndex];\n    wordsActive[pushIndex].x = matchData.x;\n    wordsActive[pushIndex].y = matchData.y;\n    wordsActive[pushIndex].dir = matchData.dir;\n    let actualIndex = findWordIdx(wordsActive[pushIndex].string);\n    console.log(wordsActive[pushIndex].string, \" ~~~ \", actualIndex);\n    for (i = 0, len = wordsActive[pushIndex].char.length; i < len; i++) {\n      var xIndex = matchData.x,\n        yIndex = matchData.y;\n      if (matchData.dir === 0) {\n        xIndex += i;\n      } else {\n        yIndex += i;\n      }\n      board[xIndex][yIndex] = wordsActive[pushIndex].char[i];\n      isPos[xIndex][yIndex] = i == 1;\n      classesOfBoard[xIndex][yIndex].push(actualIndex);\n      console.log(xIndex, yIndex, classesOfBoard[xIndex][yIndex]);\n      Bounds.Update(xIndex, yIndex);\n    }\n    return true;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_c = CrosswordGrid;\nexport default CrosswordGrid;\nvar _c;\n$RefreshReg$(_c, \"CrosswordGrid\");","map":{"version":3,"names":["React","Fragment","_Fragment","jsxDEV","_jsxDEV","CrosswordGrid","placedWords","boardSize","GRID_SIZE","EMPTY_CELL","createEmptyGrid","size","Array","from","length","fill","wordArr","board","wordBank","wordsActive","mode","isPos","classesOfBoard","WordObj","constructor","str","string","char","totalMatches","effectiveMatches","successfulMatches","x","y","dir","split","Bounds","top","right","bottom","left","Update","Math","min","max","Clean","CleanVars","i","push","j","PrepareBoard","actualPos","toString","wA","cA","k","wB","l","findWordIdx","givenWord","substring","undefined","RemoveClass","el","className","classList","remove","AddClass","add","BoardToHtml","space","AddWordToBoard","len","curIndex","curWord","curChar","curMatch","testWord","testChar","minMatchDiff","curMatchDiff","lenJ","lenK","lenL","curCross","isMatch","m","lenM","crossVal","xIndex","yIndex","spliced","splice","pushIndex","rand","random","matchArr","matchIndex","floor","matchData","actualIndex","console","log","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/Host/Management/HostRound2.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// Define word object structure\r\n\r\ntype WordPlacement = {\r\n  x: number;\r\n  y: number;\r\n  dir: 0 | 1;\r\n};\r\n\r\ninterface CrosswordGridProps {\r\n  placedWords?: WordPlacement[];\r\n  boardSize?: number;\r\n}\r\n\r\n\r\n\r\nconst CrosswordGrid: React.FC<CrosswordGridProps> = ({ placedWords, boardSize = 20 }) => {\r\n\r\n \r\n\r\n  const GRID_SIZE = 18;\r\n  const EMPTY_CELL = ' ';\r\n\r\n  function createEmptyGrid(size: number): string[][] {\r\n    return Array.from({ length: size }, () => Array(size).fill(EMPTY_CELL));\r\n  }\r\n\r\n  const wordArr = [\r\n    'GIÓ',\r\n    'HẠTGIỐNG',\r\n    'DREAM',\r\n    'THUỐC',\r\n    'CÚC',\r\n    'CHÂUKIỆTLUÂN',\r\n  ]\r\n\r\n  var board: (string | null)[][], wordBank: WordObj[], wordsActive: WordObj[], mode: number;\r\n\r\ninterface MatchPosition {\r\n  x: number;\r\n  y: number;\r\n  dir: number; // 0 = horizontal, 1 = vertical\r\n}\r\n\r\ninterface Question {\r\n  answer: string;\r\n}\r\n\r\nvar isPos: boolean[][];\r\nvar classesOfBoard: number[][][] ;\r\n\r\nclass WordObj {\r\n  string: string;\r\n  char: string[];\r\n  totalMatches: number = 0;\r\n  effectiveMatches: number = 0;\r\n  successfulMatches: MatchPosition[] = [];\r\n  x: number = 0;\r\n  y: number = 0;\r\n  dir: number = 0;\r\n\r\n  constructor(str: string){\r\n    this.string = str;\r\n    this.char = str.split('');\r\n  }\r\n}\r\n\r\nconst Bounds = {\r\n  top: 0,\r\n  right: 0,\r\n  bottom: 0,\r\n  left: 0,\r\n\r\n  Update: function(x: number, y: number){\r\n    this.top = Math.min(y,this.top);\r\n    this.right = Math.max(x,this.right);\r\n    this.bottom = Math.max(y,this.bottom);\r\n    this.left = Math.min(x,this.left);\r\n  },\r\n\r\n  Clean: function(){\r\n    this.top = 999;\r\n    this.right = 0;\r\n    this.bottom = 0;\r\n    this.left = 999;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction CleanVars(): void {\r\n  Bounds.Clean();\r\n  wordBank = [];\r\n  wordsActive = [];\r\n  board = [];\r\n  isPos = [];\r\n  classesOfBoard = [];\r\n\r\n  for(let i = 0; i < 100; i++){\r\n    board.push([]);\r\n    isPos.push([]);\r\n    classesOfBoard.push([]);\r\n    for(let j = 0; j < 100; j++){\r\n      board[i].push(null);\r\n      isPos[i].push(false);\r\n      classesOfBoard[i].push([]);\r\n    }\r\n  }\r\n}\r\n\r\n\r\nfunction PrepareBoard(): void {\r\n  wordBank = [];\r\n\r\n  for(let i = 0; i < wordArr.length; i++){\r\n    const actualPos = i + 1;\r\n    wordBank.push(new WordObj(' '+actualPos.toString()+wordArr[i]+' '));\r\n  }\r\n\r\n  for(let i = 0; i < wordBank.length; i++){\r\n    const wA = wordBank[i];\r\n    for(let j = 0; j < wA.char.length; j++){\r\n      const cA = wA.char[j];\r\n      for(let k = 0; k < wordBank.length; k++){\r\n        const wB = wordBank[k];\r\n        if (i !== k) {\r\n          for(let l = 0; l < wB.char.length; l++){\r\n            wA.totalMatches += (cA === wB.char[l]) ? 1 : 0;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction findWordIdx(givenWord: string): number | undefined {\r\n  givenWord = givenWord.substring(2, givenWord.length - 1);\r\n  for(let i = 0; i < wordArr.length; i++){\r\n    if(givenWord === wordArr[i]) return i + 1;\r\n  }\r\n  return undefined;\r\n}\r\n\r\nfunction RemoveClass(el: Element, className: string): void {\r\n  el.classList.remove(className);\r\n}\r\n\r\nfunction AddClass(el: Element, className: string): void {\r\n  el.classList.add(className);\r\n}\r\n\r\nfunction BoardToHtml(space: string): string {\r\n  // Assume this is implemented elsewhere\r\n  return \"\";\r\n}\r\n\r\nfunction AddWordToBoard(): boolean {\r\n  var i, len, curIndex, curWord, curChar, curMatch, testWord, testChar,\r\n          minMatchDiff = 9999, curMatchDiff;\r\n\r\n      if(wordsActive.length < 1){\r\n        curIndex = 0;\r\n        for(i = 0, len = wordBank.length; i < len; i++){\r\n          if (wordBank[i].totalMatches < wordBank[curIndex].totalMatches){\r\n            curIndex = i;\r\n          }\r\n        }\r\n        wordBank[curIndex].successfulMatches = [{x:12,y:12,dir:0}];\r\n      }\r\n      else{\r\n        curIndex = -1;\r\n\r\n        for(i = 0, len = wordBank.length; i < len; i++){\r\n          curWord = wordBank[i];\r\n          curWord.effectiveMatches = 0;\r\n          curWord.successfulMatches = [];\r\n          for(var j = 0, lenJ = curWord.char.length; j < lenJ; j++){\r\n            if(j == 1) continue; // skip pos\r\n            curChar = curWord.char[j];\r\n            for (var k = 0, lenK = wordsActive.length; k < lenK; k++){\r\n              testWord = wordsActive[k];\r\n              for (var l = 0, lenL = testWord.char.length; l < lenL; l++){\r\n                if(l == 1) continue; // skip pos\r\n                testChar = testWord.char[l];\r\n                if (curChar === testChar){\r\n                  curWord.effectiveMatches++;\r\n\r\n                  var curCross = {x:testWord.x,y:testWord.y,dir:0};\r\n                  if(testWord.dir === 0){\r\n                    curCross.dir = 1;\r\n                    curCross.x += l;\r\n                    curCross.y -= j;\r\n                  }\r\n                  else{\r\n                    curCross.dir = 0;\r\n                    curCross.y += l;\r\n                    curCross.x -= j;\r\n                  }\r\n\r\n                  var isMatch = true;\r\n\r\n                  for(var m = -1, lenM = curWord.char.length + 1; m < lenM; m++){\r\n                    var crossVal = [];\r\n                    if (m !== j){\r\n                      if (curCross.dir === 0){\r\n                        var xIndex = curCross.x + m;\r\n\r\n                        if (xIndex < 0 || xIndex > board.length){\r\n                          isMatch = false;\r\n                          break;\r\n                        }\r\n\r\n                        crossVal.push(board[xIndex][curCross.y]);\r\n                        crossVal.push(board[xIndex][curCross.y + 1]);\r\n                        crossVal.push(board[xIndex][curCross.y - 1]);\r\n                      }\r\n                      else{\r\n                        var yIndex = curCross.y + m;\r\n\r\n                        if (yIndex < 0 || yIndex > board[curCross.x].length){\r\n                          isMatch = false;\r\n                          break;\r\n                        }\r\n\r\n                        crossVal.push(board[curCross.x][yIndex]);\r\n                        crossVal.push(board[curCross.x + 1][yIndex]);\r\n                        crossVal.push(board[curCross.x - 1][yIndex]);\r\n                      }\r\n\r\n                      if(m > -1 && m < lenM-1){\r\n                        if (crossVal[0] !== curWord.char[m]){\r\n                          if (crossVal[0] !== null){\r\n                            isMatch = false;\r\n                            break;\r\n                          }\r\n                          else if (crossVal[1] !== null){\r\n                            isMatch = false;\r\n                            break;\r\n                          }\r\n                          else if (crossVal[2] !== null){\r\n                            isMatch = false;\r\n                            break;\r\n                          }\r\n                        }\r\n                      }\r\n                      else if (crossVal[0] !== null){\r\n                        isMatch = false;\r\n                        break;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  if (isMatch === true){\r\n                    curWord.successfulMatches.push(curCross);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          curMatchDiff = curWord.totalMatches - curWord.effectiveMatches;\r\n\r\n          if (curMatchDiff<minMatchDiff && curWord.successfulMatches.length>0){\r\n            curMatchDiff = minMatchDiff;\r\n            curIndex = i;\r\n          }\r\n          else if (curMatchDiff <= 0){\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (curIndex === -1){\r\n        return false;\r\n      }\r\n\r\n      var spliced = wordBank.splice(curIndex, 1);\r\n      wordsActive.push(spliced[0]);\r\n\r\n      var pushIndex = wordsActive.length - 1,\r\n          rand = Math.random(),\r\n          matchArr = wordsActive[pushIndex].successfulMatches,\r\n          matchIndex = Math.floor(rand * matchArr.length),\r\n          matchData = matchArr[matchIndex];\r\n\r\n      wordsActive[pushIndex].x = matchData.x;\r\n      wordsActive[pushIndex].y = matchData.y;\r\n      wordsActive[pushIndex].dir = matchData.dir;\r\n\r\n      let actualIndex = findWordIdx(wordsActive[pushIndex].string);\r\n      console.log(wordsActive[pushIndex].string, \" ~~~ \", actualIndex);\r\n      for(i = 0, len = wordsActive[pushIndex].char.length; i < len; i++){\r\n        var xIndex = matchData.x,\r\n            yIndex = matchData.y;\r\n\r\n        if (matchData.dir === 0){\r\n          xIndex += i;\r\n        }\r\n        else{\r\n          yIndex += i;\r\n        }\r\n        board[xIndex][yIndex] = wordsActive[pushIndex].char[i];\r\n        isPos[xIndex][yIndex] = (i == 1);\r\n        classesOfBoard[xIndex][yIndex].push(actualIndex);\r\n        console.log(xIndex, yIndex, classesOfBoard[xIndex][yIndex]);\r\n\r\n        Bounds.Update(xIndex,yIndex);\r\n      }\r\n\r\n      return true;\r\n}\r\n  \r\n  \r\n\r\n  return (\r\n    <>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CrosswordGrid;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}