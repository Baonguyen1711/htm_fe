{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\pages\\\\User\\\\Round2.tsx\",\n  _s = $RefreshSig$();\nimport Play from \"../../layouts/Play\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// T·ª´ kh√≥a ch∆∞·ªõng ng·∫°i v·∫≠t\nconst mainKeyword = \"BOCONGANH\";\n\n// T·∫°o t·ª´ kh√≥a g·ª£i √Ω v·ªõi v·ªã tr√≠ v√† h∆∞·ªõng random\nconst generateHintWords = (words, gridSize, obstacleWord) => {\n  const grid = Array(gridSize).fill(null).map(() => Array(gridSize).fill(\"\")); // M·∫£ng ki·ªÉm tra v·ªã tr√≠\n\n  const findCommonLetterPairs = words => {\n    let results = [];\n    let usedWords = new Set(); // L∆∞u l·∫°i c√°c t·ª´ ƒë√£ d√πng\n\n    let remainingPairs = [];\n    for (let i = 0; i < words.length; i++) {\n      for (let j = i + 1; j < words.length; j++) {\n        const word1 = words[i];\n        const word2 = words[j];\n\n        // T√¨m k√Ω t·ª± chung gi·ªØa 2 t·ª´\n        const commonLetters = [...new Set(word1)].filter(letter => word2.includes(letter));\n        if (commonLetters.length >= 2) {\n          // T√≠nh ƒëi·ªÉm ∆∞u ti√™n (ch·ªØ g·∫ßn trung t√¢m h∆°n)\n          const scoredLetters = commonLetters.map(letter => {\n            const index1 = word1.indexOf(letter);\n            const index2 = word2.indexOf(letter);\n            const center1 = word1.length / 2;\n            const center2 = word2.length / 2;\n            const score = Math.abs(index1 - center1) + Math.abs(index2 - center2);\n            return {\n              letter,\n              score\n            };\n          });\n\n          // S·∫Øp x·∫øp theo ƒëi·ªÉm ∆∞u ti√™n\n          scoredLetters.sort((a, b) => a.score - b.score);\n          const prioritizedLetters = scoredLetters.map(item => item.letter);\n          remainingPairs.push({\n            word1,\n            word2,\n            commonLetters: prioritizedLetters\n          });\n        }\n      }\n    }\n\n    // B∆∞·ªõc 2: Ch·ªçn t·ªëi ƒëa 2 c·∫∑p theo quy t·∫Øc\n    for (const pair of remainingPairs) {\n      if (results.length >= 2) break; // ƒê·ªß 2 c·∫∑p th√¨ d·ª´ng\n      if (!usedWords.has(pair.word1) && !usedWords.has(pair.word2)) {\n        results.push(pair);\n        usedWords.add(pair.word1);\n        usedWords.add(pair.word2);\n      }\n    }\n\n    // N·∫øu v·∫´n ch∆∞a ƒë·ªß 2 c·∫∑p, ch·ªçn ti·∫øp t·ª´ c√°c c·∫∑p c√≥ t·ª´ ƒë√£ d√πng\n    for (const pair of remainingPairs) {\n      if (results.length >= 2) break;\n      if (!usedWords.has(pair.word1) || !usedWords.has(pair.word2)) {\n        results.push(pair);\n        usedWords.add(pair.word1);\n        usedWords.add(pair.word2);\n      }\n    }\n    return results;\n  };\n\n  // üõ† Test\n  const testwords = [\"gi√≥\", \"h·∫°tgi·ªëng\", \"c√∫c\", \"thu·ªëc\", \"dream\", \"ch√¢uki·ªátlu\"];\n  const placeWordsOnGrid = (words, gridSize) => {\n    let placedWords = [];\n    let occupiedPositions = new Set();\n    const getKey = (x, y) => `${x},${y}`;\n\n    // Ki·ªÉm tra xem c√≥ th·ªÉ ƒë·∫∑t t·ª´ v√†o l∆∞·ªõi kh√¥ng\n    const canPlaceWord = (word, x, y, direction) => {\n      for (let i = 0; i < word.length; i++) {\n        let newX = direction === \"horizontal\" ? x + i : x;\n        let newY = direction === \"horizontal\" ? y : y + i;\n        if (newX < 0 || newY < 0 || newX >= gridSize || newY >= gridSize || occupiedPositions.has(getKey(newX, newY))) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    // T√¨m t·∫•t c·∫£ c·∫∑p t·ª´ c√≥ ch·ªØ chung\n    const commonLetterPairs = findCommonLetterPairs(words);\n\n    // ƒê·∫∑t t·ª´ c·ªßa t·ª´ng c·∫∑p v√†o grid\n    for (const {\n      word1,\n      word2,\n      commonLetters\n    } of commonLetterPairs) {\n      if (placedWords.find(w => w.word === word1) || placedWords.find(w => w.word === word2)) {\n        continue; // N·∫øu ƒë√£ ƒë·∫∑t m·ªôt trong hai t·ª´, b·ªè qua\n      }\n      const commonLetter = commonLetters[0]; // Ch·ªçn ch·ªØ c√°i chung ∆∞u ti√™n nh·∫•t\n      const index1 = word1.indexOf(commonLetter);\n      const index2 = word2.indexOf(commonLetter);\n\n      // Ch·ªçn random v·ªã tr√≠ h·ª£p l·ªá cho t·ª´ ƒë·∫ßu ti√™n\n      let placed = false;\n      for (let attempt = 0; attempt < 100; attempt++) {\n        let x = Math.floor(Math.random() * (gridSize - word1.length));\n        let y = Math.floor(Math.random() * gridSize);\n        if (canPlaceWord(word1, x, y, \"horizontal\")) {\n          placedWords.push({\n            word: word1,\n            x,\n            y,\n            direction: \"horizontal\"\n          });\n          for (let i = 0; i < word1.length; i++) occupiedPositions.add(getKey(x + i, y));\n\n          // T√≠nh v·ªã tr√≠ cho t·ª´ th·ª© hai ƒë·ªÉ n√≥ giao nhau t·∫°i ch·ªØ c√°i chung\n          let newX = x + index1;\n          let newY = y - index2; // ƒê·∫∑t theo chi·ªÅu d·ªçc ƒë·ªÉ giao nhau\n\n          if (canPlaceWord(word2, newX, newY, \"vertical\")) {\n            placedWords.push({\n              word: word2,\n              x: newX,\n              y: newY,\n              direction: \"vertical\"\n            });\n            for (let i = 0; i < word2.length; i++) occupiedPositions.add(getKey(newX, newY + i));\n            placed = true;\n            break;\n          }\n        }\n      }\n      if (!placed) console.warn(`Kh√¥ng th·ªÉ ƒë·∫∑t c·∫∑p t·ª´: ${word1} - ${word2}`);\n    }\n    return placedWords;\n  };\n  const placedWords = placeWordsOnGrid(testwords, gridSize);\n  console.log(placedWords);\n  return placedWords;\n};\n\n// K√≠ch th∆∞·ªõc l∆∞·ªõi\nconst GRID_SIZE = 10;\n\n// T·∫°o l∆∞·ªõi tr·ªëng\nconst generateEmptyGrid = () => {\n  return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\n};\nconst ObstacleQuestionBox = ({\n  obstacleWord\n}) => {\n  _s();\n  const [grid, setGrid] = useState(generateEmptyGrid());\n  const [revealedRows, setRevealedRows] = useState(Array(GRID_SIZE).fill(false));\n  const [revealedCols, setRevealedCols] = useState(Array(GRID_SIZE).fill(false));\n  const [hintWords, setHintWords] = useState([]);\n  useEffect(() => {\n    const randomHintWords = generateHintWords([\"GI√ì\", \"H·∫†T\", \"DREAM\", \"THU·ªêC\", \"C√öC\", \"CH√ÇU\"], GRID_SIZE, mainKeyword);\n    setHintWords(randomHintWords);\n    let newGrid = generateEmptyGrid();\n\n    // Th√™m t·ª´ v√†o l∆∞·ªõi\n    randomHintWords.forEach(({\n      word,\n      x,\n      y,\n      direction\n    }) => {\n      for (let i = 0; i < word.length; i++) {\n        if (direction === \"horizontal\") {\n          newGrid[y][x + i] = word[i];\n        } else {\n          newGrid[y + i][x] = word[i];\n        }\n      }\n    });\n    setGrid(newGrid);\n  }, []);\n\n  // H√†m toggle hi·ªÉn th·ªã h√†ng/c·ªôt\n  const toggleRow = rowIndex => {\n    setRevealedRows(prev => {\n      const newRevealed = [...prev];\n      newRevealed[rowIndex] = !newRevealed[rowIndex];\n      return newRevealed;\n    });\n  };\n  const toggleCol = colIndex => {\n    setRevealedCols(prev => {\n      const newRevealed = [...prev];\n      newRevealed[colIndex] = !newRevealed[colIndex];\n      return newRevealed;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center bg-white rounded-lg shadow-md p-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-[30px_repeat(10,40px)] gap-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this), \" \", Array.from({\n        length: GRID_SIZE\n      }).map((_, colIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"font-bold text-blue-500 cursor-pointer\",\n        onClick: () => toggleCol(colIndex),\n        children: colIndex + 1\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }, this)), grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"font-bold text-blue-500 cursor-pointer\",\n          onClick: () => toggleRow(rowIndex),\n          children: rowIndex + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 25\n        }, this), row.map((cell, colIndex) => {\n          const isRevealed = revealedRows[rowIndex] && hintWords.some(word => word.y === rowIndex && word.direction === \"horizontal\") || revealedCols[colIndex] && hintWords.some(word => word.x === colIndex && word.direction === \"vertical\");\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `w-10 h-10 border flex items-center justify-center text-lg font-semibold select-none \n                                    ${isRevealed ? \"text-black\" : \"text-transparent\"}\n                                    ${obstacleWord.includes(cell) && isRevealed ? \"font-bold text-red-500\" : \"\"}\n                                    ${cell === \"\" ? \"border-none\" : \"border-gray-400\"}\n                                `,\n            children: cell\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 33\n          }, this);\n        })]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 9\n  }, this);\n};\n_s(ObstacleQuestionBox, \"0tXfE1RkmpIdWy/liPKPIQWuBnQ=\");\n_c = ObstacleQuestionBox;\nfunction Round2() {\n  return /*#__PURE__*/_jsxDEV(Play, {\n    questionComponent: /*#__PURE__*/_jsxDEV(ObstacleQuestionBox, {\n      obstacleWord: mainKeyword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 37\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 12\n  }, this);\n}\n_c2 = Round2;\nexport default Round2;\nvar _c, _c2;\n$RefreshReg$(_c, \"ObstacleQuestionBox\");\n$RefreshReg$(_c2, \"Round2\");","map":{"version":3,"names":["Play","React","useState","useEffect","jsxDEV","_jsxDEV","mainKeyword","generateHintWords","words","gridSize","obstacleWord","grid","Array","fill","map","findCommonLetterPairs","results","usedWords","Set","remainingPairs","i","length","j","word1","word2","commonLetters","filter","letter","includes","scoredLetters","index1","indexOf","index2","center1","center2","score","Math","abs","sort","a","b","prioritizedLetters","item","push","pair","has","add","testwords","placeWordsOnGrid","placedWords","occupiedPositions","getKey","x","y","canPlaceWord","word","direction","newX","newY","commonLetterPairs","find","w","commonLetter","placed","attempt","floor","random","console","warn","log","GRID_SIZE","generateEmptyGrid","ObstacleQuestionBox","_s","setGrid","revealedRows","setRevealedRows","revealedCols","setRevealedCols","hintWords","setHintWords","randomHintWords","newGrid","forEach","toggleRow","rowIndex","prev","newRevealed","toggleCol","colIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","from","_","onClick","row","Fragment","cell","isRevealed","some","_c","Round2","questionComponent","_c2","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/pages/User/Round2.tsx"],"sourcesContent":["import Play from \"../../layouts/Play\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n\r\ninterface HintWord {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n}\r\n\r\ninterface ObstacleQuestionBoxProps {\r\n    obstacleWord: string;\r\n}\r\n\r\ntype PlacedWord = {\r\n    word: string;\r\n    x: number;\r\n    y: number;\r\n    direction: \"horizontal\" | \"vertical\";\r\n};\r\n\r\n// T·ª´ kh√≥a ch∆∞·ªõng ng·∫°i v·∫≠t\r\nconst mainKeyword = \"BOCONGANH\";\r\n\r\n// T·∫°o t·ª´ kh√≥a g·ª£i √Ω v·ªõi v·ªã tr√≠ v√† h∆∞·ªõng random\r\nconst generateHintWords = (words: string[], gridSize: number, obstacleWord: string): HintWord[] => {\r\n\r\n    const grid: string[][] = Array(gridSize).fill(null).map(() => Array(gridSize).fill(\"\")); // M·∫£ng ki·ªÉm tra v·ªã tr√≠\r\n\r\n    const findCommonLetterPairs = (words: string[]): { word1: string; word2: string; commonLetters: string[] }[] => {\r\n        let results: { word1: string; word2: string; commonLetters: string[] }[] = [];\r\n        let usedWords = new Set<string>(); // L∆∞u l·∫°i c√°c t·ª´ ƒë√£ d√πng\r\n\r\n        let remainingPairs: { word1: string; word2: string; commonLetters: string[] }[] = [];\r\n\r\n        for (let i = 0; i < words.length; i++) {\r\n            for (let j = i + 1; j < words.length; j++) {\r\n                const word1 = words[i];\r\n                const word2 = words[j];\r\n\r\n                // T√¨m k√Ω t·ª± chung gi·ªØa 2 t·ª´\r\n                const commonLetters = [...new Set(word1)].filter(letter => word2.includes(letter));\r\n\r\n                if (commonLetters.length >= 2) {\r\n                    // T√≠nh ƒëi·ªÉm ∆∞u ti√™n (ch·ªØ g·∫ßn trung t√¢m h∆°n)\r\n                    const scoredLetters = commonLetters.map(letter => {\r\n                        const index1 = word1.indexOf(letter);\r\n                        const index2 = word2.indexOf(letter);\r\n                        const center1 = word1.length / 2;\r\n                        const center2 = word2.length / 2;\r\n                        const score = Math.abs(index1 - center1) + Math.abs(index2 - center2);\r\n                        return { letter, score };\r\n                    });\r\n\r\n                    // S·∫Øp x·∫øp theo ƒëi·ªÉm ∆∞u ti√™n\r\n                    scoredLetters.sort((a, b) => a.score - b.score);\r\n                    const prioritizedLetters = scoredLetters.map(item => item.letter);\r\n\r\n                    remainingPairs.push({ word1, word2, commonLetters: prioritizedLetters });\r\n                }\r\n            }\r\n        }\r\n\r\n        // B∆∞·ªõc 2: Ch·ªçn t·ªëi ƒëa 2 c·∫∑p theo quy t·∫Øc\r\n        for (const pair of remainingPairs) {\r\n            if (results.length >= 2) break; // ƒê·ªß 2 c·∫∑p th√¨ d·ª´ng\r\n            if (!usedWords.has(pair.word1) && !usedWords.has(pair.word2)) {\r\n                results.push(pair);\r\n                usedWords.add(pair.word1);\r\n                usedWords.add(pair.word2);\r\n            }\r\n        }\r\n\r\n        // N·∫øu v·∫´n ch∆∞a ƒë·ªß 2 c·∫∑p, ch·ªçn ti·∫øp t·ª´ c√°c c·∫∑p c√≥ t·ª´ ƒë√£ d√πng\r\n        for (const pair of remainingPairs) {\r\n            if (results.length >= 2) break;\r\n            if (!usedWords.has(pair.word1) || !usedWords.has(pair.word2)) {\r\n                results.push(pair);\r\n                usedWords.add(pair.word1);\r\n                usedWords.add(pair.word2);\r\n            }\r\n        }\r\n\r\n        return results;\r\n    };\r\n\r\n    // üõ† Test\r\n    const testwords = [\"gi√≥\", \"h·∫°tgi·ªëng\", \"c√∫c\", \"thu·ªëc\", \"dream\", \"ch√¢uki·ªátlu\"];\r\n    \r\n\r\n    const placeWordsOnGrid = (words: string[], gridSize: number): PlacedWord[] => {\r\n        let placedWords: PlacedWord[] = [];\r\n        let occupiedPositions = new Set<string>();\r\n\r\n        const getKey = (x: number, y: number) => `${x},${y}`;\r\n\r\n        // Ki·ªÉm tra xem c√≥ th·ªÉ ƒë·∫∑t t·ª´ v√†o l∆∞·ªõi kh√¥ng\r\n        const canPlaceWord = (word: string, x: number, y: number, direction: \"horizontal\" | \"vertical\") => {\r\n            for (let i = 0; i < word.length; i++) {\r\n                let newX = direction === \"horizontal\" ? x + i : x;\r\n                let newY = direction === \"horizontal\" ? y : y + i;\r\n                if (newX < 0 || newY < 0 || newX >= gridSize || newY >= gridSize || occupiedPositions.has(getKey(newX, newY))) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        // T√¨m t·∫•t c·∫£ c·∫∑p t·ª´ c√≥ ch·ªØ chung\r\n        const commonLetterPairs = findCommonLetterPairs(words);\r\n        \r\n        // ƒê·∫∑t t·ª´ c·ªßa t·ª´ng c·∫∑p v√†o grid\r\n        for (const { word1, word2, commonLetters } of commonLetterPairs) {\r\n            if (placedWords.find(w => w.word === word1) || placedWords.find(w => w.word === word2)) {\r\n                continue; // N·∫øu ƒë√£ ƒë·∫∑t m·ªôt trong hai t·ª´, b·ªè qua\r\n            }\r\n\r\n            const commonLetter = commonLetters[0]; // Ch·ªçn ch·ªØ c√°i chung ∆∞u ti√™n nh·∫•t\r\n            const index1 = word1.indexOf(commonLetter);\r\n            const index2 = word2.indexOf(commonLetter);\r\n\r\n            // Ch·ªçn random v·ªã tr√≠ h·ª£p l·ªá cho t·ª´ ƒë·∫ßu ti√™n\r\n            let placed = false;\r\n            for (let attempt = 0; attempt < 100; attempt++) {\r\n                let x = Math.floor(Math.random() * (gridSize - word1.length));\r\n                let y = Math.floor(Math.random() * gridSize);\r\n\r\n                if (canPlaceWord(word1, x, y, \"horizontal\")) {\r\n                    placedWords.push({ word: word1, x, y, direction: \"horizontal\" });\r\n\r\n                    for (let i = 0; i < word1.length; i++) occupiedPositions.add(getKey(x + i, y));\r\n\r\n                    // T√≠nh v·ªã tr√≠ cho t·ª´ th·ª© hai ƒë·ªÉ n√≥ giao nhau t·∫°i ch·ªØ c√°i chung\r\n                    let newX = x + index1;\r\n                    let newY = y - index2; // ƒê·∫∑t theo chi·ªÅu d·ªçc ƒë·ªÉ giao nhau\r\n\r\n                    if (canPlaceWord(word2, newX, newY, \"vertical\")) {\r\n                        placedWords.push({ word: word2, x: newX, y: newY, direction: \"vertical\" });\r\n\r\n                        for (let i = 0; i < word2.length; i++) occupiedPositions.add(getKey(newX, newY + i));\r\n\r\n                        placed = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!placed) console.warn(`Kh√¥ng th·ªÉ ƒë·∫∑t c·∫∑p t·ª´: ${word1} - ${word2}`);\r\n        }\r\n\r\n        return placedWords;\r\n    };\r\n    const placedWords = placeWordsOnGrid(testwords, gridSize);\r\n    console.log(placedWords);\r\n\r\n    return placedWords;\r\n};\r\n\r\n// K√≠ch th∆∞·ªõc l∆∞·ªõi\r\nconst GRID_SIZE = 10;\r\n\r\n// T·∫°o l∆∞·ªõi tr·ªëng\r\nconst generateEmptyGrid = () => {\r\n    return Array(GRID_SIZE).fill(null).map(() => Array(GRID_SIZE).fill(\"\"));\r\n};\r\n\r\n\r\nconst ObstacleQuestionBox: React.FC<ObstacleQuestionBoxProps> = ({ obstacleWord }) => {\r\n    const [grid, setGrid] = useState<string[][]>(generateEmptyGrid());\r\n    const [revealedRows, setRevealedRows] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [revealedCols, setRevealedCols] = useState<boolean[]>(Array(GRID_SIZE).fill(false));\r\n    const [hintWords, setHintWords] = useState<HintWord[]>([]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const randomHintWords = generateHintWords([\"GI√ì\", \"H·∫†T\", \"DREAM\", \"THU·ªêC\", \"C√öC\", \"CH√ÇU\"], GRID_SIZE, mainKeyword);\r\n        setHintWords(randomHintWords);\r\n        let newGrid = generateEmptyGrid();\r\n\r\n        // Th√™m t·ª´ v√†o l∆∞·ªõi\r\n        randomHintWords.forEach(({ word, x, y, direction }) => {\r\n            for (let i = 0; i < word.length; i++) {\r\n                if (direction === \"horizontal\") {\r\n                    newGrid[y][x + i] = word[i];\r\n                } else {\r\n                    newGrid[y + i][x] = word[i];\r\n                }\r\n            }\r\n        });\r\n\r\n        setGrid(newGrid);\r\n    }, []);\r\n\r\n    // H√†m toggle hi·ªÉn th·ªã h√†ng/c·ªôt\r\n    const toggleRow = (rowIndex: number) => {\r\n        setRevealedRows((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[rowIndex] = !newRevealed[rowIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    const toggleCol = (colIndex: number) => {\r\n        setRevealedCols((prev) => {\r\n            const newRevealed = [...prev];\r\n            newRevealed[colIndex] = !newRevealed[colIndex];\r\n            return newRevealed;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center bg-white rounded-lg shadow-md p-6\">\r\n            <div className=\"grid grid-cols-[30px_repeat(10,40px)] gap-1\">\r\n                {/* H√†ng ƒë·∫ßu ti√™n ch·ª©a s·ªë c·ªôt */}\r\n                <div></div> {/* √î tr·ªëng ·ªü g√≥c */}\r\n                {Array.from({ length: GRID_SIZE }).map((_, colIndex) => (\r\n                    <button\r\n                        key={colIndex}\r\n                        className=\"font-bold text-blue-500 cursor-pointer\"\r\n                        onClick={() => toggleCol(colIndex)}\r\n                    >\r\n                        {colIndex + 1}\r\n                    </button>\r\n                ))}\r\n\r\n                {/* Hi·ªÉn th·ªã l∆∞·ªõi ch·ªØ */}\r\n                {grid.map((row, rowIndex) => (\r\n                    <React.Fragment key={rowIndex}>\r\n                        {/* S·ªë h√†ng b√™n tr√°i */}\r\n                        <button\r\n                            className=\"font-bold text-blue-500 cursor-pointer\"\r\n                            onClick={() => toggleRow(rowIndex)}\r\n                        >\r\n                            {rowIndex + 1}\r\n                        </button>\r\n\r\n                        {row.map((cell, colIndex) => {\r\n                            const isRevealed =\r\n                                (revealedRows[rowIndex] && hintWords.some((word) => word.y === rowIndex && word.direction === \"horizontal\")) ||\r\n                                (revealedCols[colIndex] && hintWords.some((word) => word.x === colIndex && word.direction === \"vertical\"));\r\n\r\n                            return (\r\n                                <div\r\n                                    key={colIndex}\r\n                                    className={`w-10 h-10 border flex items-center justify-center text-lg font-semibold select-none \r\n                                    ${isRevealed ? \"text-black\" : \"text-transparent\"}\r\n                                    ${obstacleWord.includes(cell) && isRevealed ? \"font-bold text-red-500\" : \"\"}\r\n                                    ${cell === \"\" ? \"border-none\" : \"border-gray-400\"}\r\n                                `}\r\n                                >\r\n                                    {cell}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </React.Fragment>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction Round2() {\r\n    return <Play questionComponent={<ObstacleQuestionBox obstacleWord={mainKeyword} />} />;\r\n}\r\n\r\nexport default Round2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}