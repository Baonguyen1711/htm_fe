{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\htm_fe\\\\src\\\\layouts\\\\RoundBase\\\\Round4.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { sendSelectedCell, sendCellColor } from '../../components/services';\nimport { useSearchParams } from 'react-router-dom';\nimport { usePlayer } from '../../context/playerContext';\nimport { listenToQuestions, listenToSelectedCell } from '../../services/firebaseServices';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exampleGrid = [['!', '', '?', '', '!'], ['', '?', '!', '', '?'], ['?', '', '', '!', '?'], ['!', '?', '', '', '!'], ['?', '!', '', '?', '']];\n\n// Example questions for testing\nconst exampleQuestions = ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5', 'Question 6', 'Question 7', 'Question 8', 'Question 9', 'Question 10', 'Question 11', 'Question 12', 'Question 13', 'Question 14', 'Question 15', 'Question 16', 'Question 17', 'Question 18', 'Question 19', 'Question 20', 'Question 21', 'Question 22', 'Question 23', 'Question 24', 'Question 25'];\nconst QuestionBoxRound4 = ({\n  initialGrid,\n  questions,\n  isHost = false\n}) => {\n  _s();\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(\"\");\n  const [gridColors, setGridColors] = useState(Array(5).fill(null).map(() => Array(5).fill('#FFFFFF')) // Default grid colors are white\n  );\n  const [menu, setMenu] = useState({\n    visible: false\n  });\n  const [selectedCell, setSelectedCell] = useState(null);\n  const menuRef = useRef(null);\n  const [searchParams] = useSearchParams();\n  const roomId = searchParams.get(\"roomId\") || \"4\";\n  const {\n    setEasyQuestionNumber,\n    setMediumQuestionNumber,\n    setHardQuestionNumber,\n    setLevel\n  } = usePlayer();\n  // Function to handle cell click (only for host)\n  const handleCellClick = (row, col) => {\n    if (!isHost) return; // Prevent non-host users from interacting\n    setMenu({\n      visible: true,\n      rowIndex: row,\n      colIndex: col\n    });\n  };\n\n  // Function to handle menu actions\n  const handleMenuAction = (action, row, col) => {\n    if (action === 'select') {\n      if (initialGrid[row][col] == \"\") {\n        setLevel(\"Dễ\");\n      }\n      if (initialGrid[row][col] == \"!\") {\n        setLevel(\"Trung bình\");\n      }\n      if (initialGrid[row][col] == \"?\") {\n        setLevel(\"Khó\");\n      }\n      sendSelectedCell(roomId, col.toString(), row.toString());\n      const questionIndex = row * 5 + col; // Calculate question index from grid position\n      if (questions[questionIndex]) {\n        setSelectedQuestion(questions[questionIndex]);\n        setGridColors(prev => {\n          const newGrid = prev.map(rowArray => [...rowArray]);\n          // Reset the previously selected cell to white, if it exists and wasn't colored otherwise\n          if (selectedCell) {\n            const {\n              row: prevRow,\n              col: prevCol\n            } = selectedCell;\n            // Only reset if the cell is still light yellow (i.e., not changed by color buttons)\n            if (newGrid[prevRow][prevCol] === '#FFFF99') {\n              newGrid[prevRow][prevCol] = '#FFFFFF';\n            }\n          }\n          // Set the current cell to light yellow\n          newGrid[row][col] = '#FFFF99'; // Light yellow\n          return newGrid;\n        });\n        // Update the selected cell\n        setSelectedCell({\n          row,\n          col\n        });\n      }\n    } else {\n      sendCellColor(roomId, col.toString(), row.toString(), action);\n      // Set the cell color based on the selected action\n      const colorMap = {\n        red: '#FF0000',\n        green: '#00FF00',\n        blue: '#0000FF',\n        yellow: '#FFFF00'\n      };\n      setGridColors(prev => {\n        const newGrid = prev.map(rowArray => [...rowArray]);\n        newGrid[row][col] = colorMap[action];\n        return newGrid;\n      });\n      // If the cell was previously selected, clear the selection\n      if (selectedCell && selectedCell.row === row && selectedCell.col === col) {\n        setSelectedCell(null);\n      }\n    }\n    setMenu({\n      visible: false\n    }); // Close the menu\n  };\n\n  // Simulated listener for host events (only for host)\n  // const listenToHostEvents = () => {\n  //     if (!isHost) return; // Prevent non-host users from listening\n  //     setTimeout(() => {\n  //         const simulatedRow = 2; // Simulated row index\n  //         const simulatedCol = 3; // Simulated column index\n  //         const simulatedColor = '#FFFF99'; // Simulated background color\n\n  //         // Highlight the simulated cell\n  //         setGridColors((prev) => {\n  //             const newGrid = prev.map((rowArray) => [...rowArray]);\n  //             newGrid[simulatedRow][simulatedCol] = simulatedColor;\n  //             return newGrid;\n  //         });\n  //         // Update selected cell if simulating a select action\n  //         setSelectedCell({ row: simulatedRow, col: simulatedCol });\n  //     }, 3000);\n  // };\n\n  // Effect to start listening for host events\n  // useEffect(() => {\n  //     listenToHostEvents();\n  // }, [isHost]);\n\n  // Close menu on outside click\n  useEffect(() => {\n    const unsubscribePlayers = listenToQuestions(roomId, data => {\n      console.log(\"questions\", data);\n      setCurrentQuestion(data.question);\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToSelectedCell(roomId, data => {\n      console.log(\"questions\", data);\n      const row = parseInt(data.rowIndex);\n      const col = parseInt(data.colIndex);\n      setGridColors(prev => {\n        const newGrid = prev.map(rowArray => [...rowArray]);\n        // Reset the previously selected cell to white, if it exists and wasn't colored otherwise\n        if (selectedCell) {\n          const {\n            row: prevRow,\n            col: prevCol\n          } = selectedCell;\n          // Only reset if the cell is still light yellow (i.e., not changed by color buttons)\n          if (newGrid[prevRow][prevCol] === '#FFFF99') {\n            newGrid[prevRow][prevCol] = '#FFFFFF';\n          }\n        }\n        // Set the current cell to light yellow\n        newGrid[data.rowIndex][data.colIndex] = '#FFFF99'; // Light yellow\n        return newGrid;\n      });\n      // Update the selected cell\n      setSelectedCell({\n        row,\n        col\n      });\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setMenu({\n          visible: false\n        });\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold text-black mb-4\",\n      children: currentQuestion ? currentQuestion : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-6 gap-2 mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), \" \", ['1', '2', '3', '4', '5'].map(label => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-center font-bold text-black w-16 h-16\",\n        children: label\n      }, label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-rows-5 gap-2\",\n      children: ['A', 'B', 'C', 'D', 'E'].map((rowLabel, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-center font-bold text-black w-16 h-16\",\n          children: [rowLabel, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 25\n        }, this), initialGrid[rowIndex].map((cell, colIndex) => {\n          const showMenu = menu.visible && menu.rowIndex === rowIndex && menu.colIndex === colIndex;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: () => handleCellClick(rowIndex, colIndex),\n              className: `flex items-center justify-center w-16 h-16 rounded-md ${isHost ? 'cursor-pointer' : 'cursor-not-allowed'}` // Disable interaction for non-hosts\n              ,\n              style: {\n                backgroundColor: gridColors[rowIndex][colIndex],\n                border: '1px solid #000'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-black text-lg\",\n                children: cell\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 37\n            }, this), showMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: menuRef,\n              className: \"absolute left-20 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\",\n                onClick: () => handleMenuAction('select', rowIndex, colIndex),\n                children: \"SELECT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"w-6 h-6 bg-red-500 rounded\",\n                onClick: () => handleMenuAction('red', rowIndex, colIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"w-6 h-6 bg-green-500 rounded\",\n                onClick: () => handleMenuAction('green', rowIndex, colIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"w-6 h-6 bg-blue-500 rounded\",\n                onClick: () => handleMenuAction('blue', rowIndex, colIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"w-6 h-6 bg-yellow-500 rounded\",\n                onClick: () => handleMenuAction('yellow', rowIndex, colIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 41\n            }, this)]\n          }, `${rowIndex}-${colIndex}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 33\n          }, this);\n        })]\n      }, rowIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionBoxRound4, \"QufGR951sE++qGVwtCKzKEnDhAw=\", false, function () {\n  return [useSearchParams, usePlayer];\n});\n_c = QuestionBoxRound4;\nexport default QuestionBoxRound4;\nvar _c;\n$RefreshReg$(_c, \"QuestionBoxRound4\");","map":{"version":3,"names":["React","useState","useEffect","useRef","sendSelectedCell","sendCellColor","useSearchParams","usePlayer","listenToQuestions","listenToSelectedCell","jsxDEV","_jsxDEV","exampleGrid","exampleQuestions","QuestionBoxRound4","initialGrid","questions","isHost","_s","selectedQuestion","setSelectedQuestion","currentQuestion","setCurrentQuestion","gridColors","setGridColors","Array","fill","map","menu","setMenu","visible","selectedCell","setSelectedCell","menuRef","searchParams","roomId","get","setEasyQuestionNumber","setMediumQuestionNumber","setHardQuestionNumber","setLevel","handleCellClick","row","col","rowIndex","colIndex","handleMenuAction","action","toString","questionIndex","prev","newGrid","rowArray","prevRow","prevCol","colorMap","red","green","blue","yellow","unsubscribePlayers","data","console","log","question","parseInt","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","label","rowLabel","cell","showMenu","onClick","style","backgroundColor","border","ref","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/layouts/RoundBase/Round4.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Play from '../Play';\r\nimport { RoundBase } from '../../type';\r\nimport { sendSelectedCell, sendCellColor } from '../../components/services';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { usePlayer } from '../../context/playerContext';\r\nimport { listenToQuestions, listenToSelectedCell, listenToCellColor } from '../../services/firebaseServices';\r\n\r\ninterface QuestionComponentProps {\r\n    initialGrid: string[][]; // 5x5 grid (can be passed from parent or generated)\r\n    questions: string[]; // Array of questions for testing\r\n    isHost?: boolean; // Indicates whether the user is the host\r\n}\r\n\r\nconst exampleGrid = [\r\n    ['!', '', '?', '', '!'],\r\n    ['', '?', '!', '', '?'],\r\n    ['?', '', '', '!', '?'],\r\n    ['!', '?', '', '', '!'],\r\n    ['?', '!', '', '?', ''],\r\n];\r\n\r\n// Example questions for testing\r\nconst exampleQuestions = [\r\n    'Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5',\r\n    'Question 6', 'Question 7', 'Question 8', 'Question 9', 'Question 10',\r\n    'Question 11', 'Question 12', 'Question 13', 'Question 14', 'Question 15',\r\n    'Question 16', 'Question 17', 'Question 18', 'Question 19', 'Question 20',\r\n    'Question 21', 'Question 22', 'Question 23', 'Question 24', 'Question 25',\r\n];\r\n\r\nconst QuestionBoxRound4: React.FC<QuestionComponentProps> = ({\r\n    initialGrid,\r\n    questions,\r\n    isHost = false,\r\n}) => {\r\n    const [selectedQuestion, setSelectedQuestion] = useState<string | null>(null);\r\n    const [currentQuestion,setCurrentQuestion] = useState<string>(\"\")\r\n    const [gridColors, setGridColors] = useState<string[][]>(\r\n        Array(5).fill(null).map(() => Array(5).fill('#FFFFFF')) // Default grid colors are white\r\n    );\r\n    const [menu, setMenu] = useState<{\r\n        visible: boolean;\r\n        rowIndex?: number;\r\n        colIndex?: number;\r\n    }>({ visible: false });\r\n    const [selectedCell, setSelectedCell] = useState<{ row: number; col: number } | null>(null);\r\n    const menuRef = useRef<HTMLDivElement>(null);\r\n    const [searchParams] = useSearchParams()\r\n    const roomId = searchParams.get(\"roomId\") || \"4\"\r\n    const { setEasyQuestionNumber, setMediumQuestionNumber, setHardQuestionNumber, setLevel } = usePlayer()\r\n    // Function to handle cell click (only for host)\r\n    const handleCellClick = (row: number, col: number) => {\r\n        if (!isHost) return; // Prevent non-host users from interacting\r\n        setMenu({\r\n            visible: true,\r\n            rowIndex: row,\r\n            colIndex: col,\r\n        });\r\n    };\r\n\r\n    // Function to handle menu actions\r\n    const handleMenuAction = (action: 'select' | 'red' | 'green' | 'blue' | 'yellow', row: number, col: number) => {\r\n        if (action === 'select') {\r\n            if (initialGrid[row][col] == \"\") {\r\n\r\n                setLevel(\"Dễ\")\r\n            }\r\n\r\n            if (initialGrid[row][col] == \"!\") {\r\n\r\n                setLevel(\"Trung bình\")\r\n            }\r\n\r\n            if (initialGrid[row][col] == \"?\") {\r\n\r\n                setLevel(\"Khó\")\r\n            }\r\n\r\n            sendSelectedCell(roomId, col.toString(), row.toString())\r\n            const questionIndex = row * 5 + col; // Calculate question index from grid position\r\n            if (questions[questionIndex]) {\r\n                setSelectedQuestion(questions[questionIndex]);\r\n                setGridColors((prev) => {\r\n                    const newGrid = prev.map((rowArray) => [...rowArray]);\r\n                    // Reset the previously selected cell to white, if it exists and wasn't colored otherwise\r\n                    if (selectedCell) {\r\n                        const { row: prevRow, col: prevCol } = selectedCell;\r\n                        // Only reset if the cell is still light yellow (i.e., not changed by color buttons)\r\n                        if (newGrid[prevRow][prevCol] === '#FFFF99') {\r\n                            newGrid[prevRow][prevCol] = '#FFFFFF';\r\n                        }\r\n                    }\r\n                    // Set the current cell to light yellow\r\n                    newGrid[row][col] = '#FFFF99'; // Light yellow\r\n                    return newGrid;\r\n                });\r\n                // Update the selected cell\r\n                setSelectedCell({ row, col });\r\n            }\r\n        } else {\r\n            sendCellColor(roomId, col.toString(), row.toString(), action)\r\n            // Set the cell color based on the selected action\r\n            const colorMap: Record<string, string> = {\r\n                red: '#FF0000',\r\n                green: '#00FF00',\r\n                blue: '#0000FF',\r\n                yellow: '#FFFF00',\r\n            };\r\n            setGridColors((prev) => {\r\n                const newGrid = prev.map((rowArray) => [...rowArray]);\r\n                newGrid[row][col] = colorMap[action];\r\n                return newGrid;\r\n            });\r\n            // If the cell was previously selected, clear the selection\r\n            if (selectedCell && selectedCell.row === row && selectedCell.col === col) {\r\n                setSelectedCell(null);\r\n            }\r\n        }\r\n        setMenu({ visible: false }); // Close the menu\r\n    };\r\n\r\n    // Simulated listener for host events (only for host)\r\n    // const listenToHostEvents = () => {\r\n    //     if (!isHost) return; // Prevent non-host users from listening\r\n    //     setTimeout(() => {\r\n    //         const simulatedRow = 2; // Simulated row index\r\n    //         const simulatedCol = 3; // Simulated column index\r\n    //         const simulatedColor = '#FFFF99'; // Simulated background color\r\n\r\n    //         // Highlight the simulated cell\r\n    //         setGridColors((prev) => {\r\n    //             const newGrid = prev.map((rowArray) => [...rowArray]);\r\n    //             newGrid[simulatedRow][simulatedCol] = simulatedColor;\r\n    //             return newGrid;\r\n    //         });\r\n    //         // Update selected cell if simulating a select action\r\n    //         setSelectedCell({ row: simulatedRow, col: simulatedCol });\r\n    //     }, 3000);\r\n    // };\r\n\r\n    // Effect to start listening for host events\r\n    // useEffect(() => {\r\n    //     listenToHostEvents();\r\n    // }, [isHost]);\r\n\r\n    // Close menu on outside click\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToQuestions(roomId, (data) => {\r\n            console.log(\"questions\", data);\r\n\r\n            setCurrentQuestion(data.question)\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToSelectedCell(roomId, (data) => {\r\n            console.log(\"questions\", data);\r\n            const row = parseInt(data.rowIndex)\r\n            const col = parseInt(data.colIndex)\r\n\r\n            setGridColors((prev) => {\r\n                const newGrid = prev.map((rowArray) => [...rowArray]);\r\n                // Reset the previously selected cell to white, if it exists and wasn't colored otherwise\r\n                if (selectedCell) {\r\n                    const { row: prevRow, col: prevCol } = selectedCell;\r\n                    // Only reset if the cell is still light yellow (i.e., not changed by color buttons)\r\n                    if (newGrid[prevRow][prevCol] === '#FFFF99') {\r\n                        newGrid[prevRow][prevCol] = '#FFFFFF';\r\n                    }\r\n                }\r\n                // Set the current cell to light yellow\r\n                newGrid[data.rowIndex][data.colIndex] = '#FFFF99'; // Light yellow\r\n                return newGrid;\r\n            });\r\n            // Update the selected cell\r\n            setSelectedCell({ row,col });\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent) => {\r\n            if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n                setMenu({ visible: false });\r\n            }\r\n        };\r\n        document.addEventListener('mousedown', handleClickOutside);\r\n        return () => document.removeEventListener('mousedown', handleClickOutside);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center\">\r\n            {/* Display selected question */}\r\n            <h2 className=\"text-xl font-bold text-black mb-4\">\r\n                {currentQuestion ? currentQuestion : ''}\r\n            </h2>\r\n\r\n            {/* Column labels (1, 2, 3, 4, 5) */}\r\n            <div className=\"grid grid-cols-6 gap-2 mb-2\">\r\n                <div></div> {/* Empty corner cell */}\r\n                {['1', '2', '3', '4', '5'].map((label) => (\r\n                    <div key={label} className=\"flex items-center justify-center font-bold text-black w-16 h-16\">\r\n                        {label}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {/* Render 5x5 grid with row labels (A, B, C, D, E) */}\r\n            <div className=\"grid grid-rows-5 gap-2\">\r\n                {['A', 'B', 'C', 'D', 'E'].map((rowLabel, rowIndex) => (\r\n                    <div key={rowIndex} className=\"flex\">\r\n                        <div className=\"flex items-center justify-center font-bold text-black w-16 h-16\">\r\n                            {rowLabel} {/* Row label */}\r\n                        </div>\r\n                        {initialGrid[rowIndex].map((cell, colIndex) => {\r\n                            const showMenu =\r\n                                menu.visible &&\r\n                                menu.rowIndex === rowIndex &&\r\n                                menu.colIndex === colIndex;\r\n\r\n                            return (\r\n                                <div className=\"relative flex items-center\" key={`${rowIndex}-${colIndex}`}>\r\n                                    <div\r\n                                        onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                                        className={`flex items-center justify-center w-16 h-16 rounded-md ${isHost ? 'cursor-pointer' : 'cursor-not-allowed'\r\n                                            }`} // Disable interaction for non-hosts\r\n                                        style={{\r\n                                            backgroundColor: gridColors[rowIndex][colIndex],\r\n                                            border: '1px solid #000',\r\n                                        }}\r\n                                    >\r\n                                        <span className=\"text-black text-lg\">{cell}</span>\r\n                                    </div>\r\n\r\n                                    {showMenu && (\r\n                                        <div\r\n                                            ref={menuRef}\r\n                                            className=\"absolute left-20 top-1/2 transform -translate-y-1/2 flex space-x-2 bg-white border border-gray-300 rounded shadow-lg p-1 z-10\"\r\n                                        >\r\n                                            <button\r\n                                                className=\"px-2 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n                                                onClick={() =>\r\n                                                    handleMenuAction('select', rowIndex, colIndex)\r\n                                                }\r\n                                            >\r\n                                                SELECT\r\n                                            </button>\r\n                                            <button\r\n                                                className=\"w-6 h-6 bg-red-500 rounded\"\r\n                                                onClick={() =>\r\n                                                    handleMenuAction('red', rowIndex, colIndex)\r\n                                                }\r\n                                            />\r\n                                            <button\r\n                                                className=\"w-6 h-6 bg-green-500 rounded\"\r\n                                                onClick={() =>\r\n                                                    handleMenuAction('green', rowIndex, colIndex)\r\n                                                }\r\n                                            />\r\n                                            <button\r\n                                                className=\"w-6 h-6 bg-blue-500 rounded\"\r\n                                                onClick={() =>\r\n                                                    handleMenuAction('blue', rowIndex, colIndex)\r\n                                                }\r\n                                            />\r\n                                            <button\r\n                                                className=\"w-6 h-6 bg-yellow-500 rounded\"\r\n                                                onClick={() =>\r\n                                                    handleMenuAction('yellow', rowIndex, colIndex)\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionBoxRound4;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}