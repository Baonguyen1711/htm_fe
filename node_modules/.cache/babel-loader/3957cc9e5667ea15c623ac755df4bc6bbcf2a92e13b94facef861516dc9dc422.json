{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useGameListeners.ts\nimport { useEffect, useRef } from 'react';\nimport { deletePath, listenToBuzzing, listenToStar, listenToSound, listenToAnswers, listenToQuestions, listenToSelectedCell, listenToCellColor, listenToTimeStart, listenToCorrectRow } from '../services/firebaseServices'; // adjust import path\n\nexport function useGameListeners({\n  roomId,\n  setBuzzedPlayer,\n  setStaredPlayer,\n  setShowModal,\n  setCorrectAnswer,\n  setCurrentQuestion,\n  setGridColors,\n  setSelectedCell,\n  startTimer,\n  setTimeLeft,\n  sounds,\n  round\n}) {\n  _s();\n  const colorMap = {\n    red: '#FF0000',\n    green: '#00FF00',\n    blue: '#0000FF',\n    yellow: '#FFFF00'\n  };\n  const isInitialMount = useRef(false);\n  useEffect(() => {\n    const unsubscribe = listenToTimeStart(roomId, async () => {\n      // Skip the timer setting on the first mount, but allow future calls to run\n      if (isInitialMount.current) {\n        isInitialMount.current = false;\n        return;\n      }\n      startTimer === null || startTimer === void 0 ? void 0 : startTimer(15);\n      return () => {\n        unsubscribe();\n      };\n    });\n  }, []);\n  useEffect(() => {\n    let hasMounted = false;\n    const unsubscribeBuzzing = listenToBuzzing(roomId, playerName => {\n      // if (!hasMounted) {\n      //     hasMounted = true; // skip initial\n      //     return;\n      // }\n      const audio = sounds['buzz'];\n      if (audio) {\n        audio.play();\n      }\n      console.log(\"playerName on host\", playerName);\n      console.log(\"listening on buzzing\");\n      if (playerName && playerName !== \"\") {\n        setBuzzedPlayer(playerName);\n        console.log(\"playerName\", typeof playerName);\n        console.log(playerName, \"đã bấm chuông\");\n        setShowModal(true); // Show modal when a player buzzes\n      }\n    });\n    return () => {\n      unsubscribeBuzzing();\n    };\n  }, [roomId]);\n  useEffect(() => {\n    let hasMounted = false;\n    const unsubscribeBuzzing = listenToStar(roomId, playerName => {\n      // if (!hasMounted) {\n      //     hasMounted = true; // skip initial\n      //     return;\n      // }\n      const audio = sounds['nshv'];\n      if (audio) {\n        audio.play();\n      }\n      console.log(\"playerName on host\", playerName);\n      console.log(\"listening on buzzing\");\n      if (playerName && playerName !== \"\") {\n        setStaredPlayer(playerName);\n        console.log(\"playerName\", typeof playerName);\n        console.log(playerName, \"đã chọn ngôi sao hy vọng\");\n        setShowModal(true); // Show modal when a player buzzes\n      }\n    });\n    return () => {\n      unsubscribeBuzzing();\n    };\n  }, [roomId]);\n  useEffect(() => {\n    const unsubscribePlayers = listenToSound(roomId, async type => {\n      const audio = sounds[`${type}`];\n      if (audio) {\n        audio.play();\n      }\n      console.log(\"sound type\", type);\n      await deletePath(roomId, \"sound\");\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToAnswers(roomId, answer => {\n      const audio = sounds['correct'];\n      if (audio) {\n        audio.play();\n      }\n      setCorrectAnswer(`Đáp án: ${answer}`);\n      const timeOut = setTimeout(() => {\n        setCorrectAnswer(\"\");\n      }, 4000);\n      console.log(\"answer\", answer);\n      clearTimeout(timeOut);\n    });\n\n    // No need to set state here; it's handled by useState initializer\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToQuestions(roomId, data => {\n      console.log(\"questions\", data);\n      setCurrentQuestion(data.question);\n      setCorrectAnswer(\"\");\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToSelectedCell(roomId, data => {\n      console.log(\"Selected cell data:\", data);\n      // Ensure data has the expected properties\n      if (data && typeof data.rowIndex === 'string' && typeof data.colIndex === 'string') {\n        const row = parseInt(data.rowIndex, 10);\n        const col = parseInt(data.colIndex, 10);\n\n        // Check if indices are valid numbers and within 5x5 grid bounds\n        if (!isNaN(row) && !isNaN(col) && row >= 0 && row < 5 && col >= 0 && col < 5) {\n          setGridColors(prev => {\n            const newGrid = prev.map(rowArray => [...rowArray]);\n            // Reset all cells with light yellow (#FFFF99) to white (#FFFFFF)\n            for (let prevRow = 0; prevRow < 5; prevRow++) {\n              for (let prevCol = 0; prevCol < 5; prevCol++) {\n                if (newGrid[prevRow][prevCol] === '#FFFF99') {\n                  newGrid[prevRow][prevCol] = '#FFFFFF';\n                }\n              }\n            }\n            // Set the current cell to light yellow\n            newGrid[row][col] = '#FFFF99';\n            return newGrid;\n          });\n          // Update the selected cell\n          setSelectedCell({\n            row,\n            col\n          });\n        } else {\n          console.warn(`Invalid cell indices: row=${row}, col=${col}`);\n        }\n      } else {\n        console.warn(\"Invalid or missing data from listenToSelectedCell:\", data);\n      }\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    const unsubscribePlayers = listenToCellColor(roomId, data => {\n      console.log(\"questions\", data);\n      const row = parseInt(data.rowIndex);\n      const col = parseInt(data.colIndex);\n      const color = data.color;\n      if (!isNaN(row) && !isNaN(col) && row >= 0 && row < 5 && col >= 0 && col < 5 && color) {\n        setGridColors(prev => {\n          const newGrid = prev.map(rowArray => [...rowArray]);\n          newGrid[row][col] = colorMap[color];\n          return newGrid;\n        });\n      }\n    });\n    return () => {\n      unsubscribePlayers();\n    };\n  }, []);\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeCorrect = listenToCorrectRow(roomId, data => {\n      console.log(\"isInitialCall\", isInitialCall);\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      const audio = sounds['correct_2'];\n      if (audio) {\n        audio.play();\n      }\n      console.log(\"isInitialCall after\", isInitialCall);\n      let rowIndex = -1;\n      let colIndex = -1;\n      console.log(\"grid\", grid);\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"correct\", data.selected_row_number, data.marked_character_index, data.is_row, undefined, data.correct_answer);\n    });\n    return () => {\n      unsubscribeCorrect();\n    };\n  }, [roomId, grid]);\n  useEffect(() => {\n    let isInitialCall = true;\n    const unsubscribeIncorrect = listenToIncorrectRow(roomId, data => {\n      if (isInitialCall) {\n        isInitialCall = false;\n        return; // Skip the initial snapshot\n      }\n      const audio = sounds['wrong_2'];\n      if (audio) {\n        audio.play();\n      }\n      let rowIndex = -1;\n      let colIndex = -1;\n      for (let row = 0; row < grid.length; row++) {\n        for (let col = 0; col < grid[row].length; col++) {\n          if (grid[row][col] === `number${data.selected_row_number}`) {\n            rowIndex = row;\n            colIndex = col;\n            break;\n          }\n        }\n        if (rowIndex !== -1) break;\n      }\n      if (rowIndex === -1 || colIndex === -1) {\n        console.warn(`Number cell number${data.selected_row_number} not found`);\n        return;\n      }\n      revealCellsForPlayer(rowIndex, colIndex, \"incorrect\", data.selected_row_number, [], data.is_row, data.word_length);\n    });\n    return () => {\n      unsubscribeIncorrect();\n    };\n  }, [roomId, grid]);\n}\n_s(useGameListeners, \"tcIXcsQZ38Z4WcSap2VYTsJZp04=\");","map":{"version":3,"names":["useEffect","useRef","deletePath","listenToBuzzing","listenToStar","listenToSound","listenToAnswers","listenToQuestions","listenToSelectedCell","listenToCellColor","listenToTimeStart","listenToCorrectRow","useGameListeners","roomId","setBuzzedPlayer","setStaredPlayer","setShowModal","setCorrectAnswer","setCurrentQuestion","setGridColors","setSelectedCell","startTimer","setTimeLeft","sounds","round","_s","colorMap","red","green","blue","yellow","isInitialMount","unsubscribe","current","hasMounted","unsubscribeBuzzing","playerName","audio","play","console","log","unsubscribePlayers","type","answer","timeOut","setTimeout","clearTimeout","data","question","rowIndex","colIndex","row","parseInt","col","isNaN","prev","newGrid","map","rowArray","prevRow","prevCol","warn","color","isInitialCall","unsubscribeCorrect","grid","length","selected_row_number","revealCellsForPlayer","marked_character_index","is_row","undefined","correct_answer","unsubscribeIncorrect","listenToIncorrectRow","word_length"],"sources":["C:/Users/ASUS/Documents/htm_fe/src/hooks/useListener.ts"],"sourcesContent":["// hooks/useGameListeners.ts\r\nimport { useEffect, useRef } from 'react';\r\nimport { deletePath, listenToBuzzing, listenToStar, listenToSound, listenToAnswers, listenToQuestions, listenToSelectedCell, listenToCellColor, listenToTimeStart, listenToCorrectRow } from '../services/firebaseServices'; // adjust import path\r\n\r\n\r\nexport function useGameListeners({\r\n    roomId,\r\n    setBuzzedPlayer,\r\n    setStaredPlayer,\r\n    setShowModal,\r\n    setCorrectAnswer,\r\n    setCurrentQuestion,\r\n    setGridColors,\r\n    setSelectedCell,\r\n    startTimer,\r\n    setTimeLeft,\r\n    sounds,\r\n    round\r\n}: {\r\n    roomId: string;\r\n    setBuzzedPlayer: (name: string) => void;\r\n    setStaredPlayer: (name: string) => void;\r\n    setShowModal: (value: boolean) => void;\r\n    setCorrectAnswer: (answer: string) => void;\r\n    setCurrentQuestion: (question: string) => void;\r\n    setGridColors: React.Dispatch<React.SetStateAction<string[][]>>\r\n    setSelectedCell: (arg: { row: number; col: number }) => void;\r\n    sounds: Record<string, HTMLAudioElement>;\r\n    round: string,\r\n    startTimer?: (time: number) => void;\r\n    setTimeLeft?: (time: number) => void;\r\n}) {\r\n    const colorMap: Record<string, string> = {\r\n        red: '#FF0000',\r\n        green: '#00FF00',\r\n        blue: '#0000FF',\r\n        yellow: '#FFFF00',\r\n    };\r\n\r\n    const isInitialMount = useRef(false)\r\n    useEffect(() => {\r\n        const unsubscribe = listenToTimeStart(roomId, async () => {\r\n\r\n\r\n            // Skip the timer setting on the first mount, but allow future calls to run\r\n            if (isInitialMount.current) {\r\n                isInitialMount.current = false;\r\n                return;\r\n            }\r\n            startTimer?.(15)\r\n            return () => {\r\n                unsubscribe();\r\n\r\n            };\r\n        })\r\n\r\n    }, [])\r\n    useEffect(() => {\r\n\r\n        let hasMounted = false;\r\n        const unsubscribeBuzzing = listenToBuzzing(roomId, (playerName) => {\r\n            // if (!hasMounted) {\r\n            //     hasMounted = true; // skip initial\r\n            //     return;\r\n            // }\r\n            const audio = sounds['buzz'];\r\n            if (audio) {\r\n                audio.play();\r\n            }\r\n            console.log(\"playerName on host\", playerName);\r\n\r\n            console.log(\"listening on buzzing\");\r\n\r\n            if (playerName && playerName !== \"\") {\r\n                setBuzzedPlayer(playerName);\r\n                console.log(\"playerName\", typeof playerName);\r\n\r\n                console.log(playerName, \"đã bấm chuông\")\r\n                setShowModal(true); // Show modal when a player buzzes\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribeBuzzing();\r\n        };\r\n    }, [roomId]);\r\n\r\n    useEffect(() => {\r\n\r\n        let hasMounted = false;\r\n        const unsubscribeBuzzing = listenToStar(roomId, (playerName) => {\r\n            // if (!hasMounted) {\r\n            //     hasMounted = true; // skip initial\r\n            //     return;\r\n            // }\r\n            const audio = sounds['nshv'];\r\n            if (audio) {\r\n                audio.play();\r\n            }\r\n            console.log(\"playerName on host\", playerName);\r\n\r\n            console.log(\"listening on buzzing\");\r\n\r\n            if (playerName && playerName !== \"\") {\r\n                setStaredPlayer(playerName);\r\n                console.log(\"playerName\", typeof playerName);\r\n\r\n                console.log(playerName, \"đã chọn ngôi sao hy vọng\")\r\n                setShowModal(true); // Show modal when a player buzzes\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribeBuzzing();\r\n        };\r\n    }, [roomId]);\r\n\r\n    useEffect(() => {\r\n        const unsubscribePlayers = listenToSound(roomId, async (type) => {\r\n\r\n            const audio = sounds[`${type}`];\r\n            if (audio) {\r\n                audio.play();\r\n            }\r\n            console.log(\"sound type\", type)\r\n            await deletePath(roomId, \"sound\")\r\n        });\r\n\r\n        // No need to set state here; it's handled by useState initializer\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToAnswers(roomId, (answer) => {\r\n            const audio = sounds['correct'];\r\n            if (audio) {\r\n                audio.play();\r\n            }\r\n            setCorrectAnswer(`Đáp án: ${answer}`)\r\n            const timeOut = setTimeout(() => {\r\n                setCorrectAnswer(\"\")\r\n            }, 4000)\r\n            console.log(\"answer\", answer)\r\n            clearTimeout(timeOut)\r\n        });\r\n\r\n        // No need to set state here; it's handled by useState initializer\r\n        return () => {\r\n            unsubscribePlayers();\r\n\r\n        };\r\n    }, []);\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToQuestions(roomId, (data) => {\r\n            console.log(\"questions\", data);\r\n\r\n            setCurrentQuestion(data.question)\r\n            setCorrectAnswer(\"\")\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToSelectedCell(roomId, (data) => {\r\n            console.log(\"Selected cell data:\", data);\r\n            // Ensure data has the expected properties\r\n            if (data && typeof data.rowIndex === 'string' && typeof data.colIndex === 'string') {\r\n                const row = parseInt(data.rowIndex, 10);\r\n                const col = parseInt(data.colIndex, 10);\r\n\r\n                // Check if indices are valid numbers and within 5x5 grid bounds\r\n                if (!isNaN(row) && !isNaN(col) && row >= 0 && row < 5 && col >= 0 && col < 5) {\r\n                    setGridColors((prev) => {\r\n                        const newGrid = prev.map((rowArray) => [...rowArray]);\r\n                        // Reset all cells with light yellow (#FFFF99) to white (#FFFFFF)\r\n                        for (let prevRow = 0; prevRow < 5; prevRow++) {\r\n                            for (let prevCol = 0; prevCol < 5; prevCol++) {\r\n                                if (newGrid[prevRow][prevCol] === '#FFFF99') {\r\n                                    newGrid[prevRow][prevCol] = '#FFFFFF';\r\n                                }\r\n                            }\r\n                        }\r\n                        // Set the current cell to light yellow\r\n                        newGrid[row][col] = '#FFFF99';\r\n                        return newGrid;\r\n                    });\r\n                    // Update the selected cell\r\n                    setSelectedCell({ row, col });\r\n                } else {\r\n                    console.warn(`Invalid cell indices: row=${row}, col=${col}`);\r\n                }\r\n            } else {\r\n                console.warn(\"Invalid or missing data from listenToSelectedCell:\", data);\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        const unsubscribePlayers = listenToCellColor(roomId, (data) => {\r\n            console.log(\"questions\", data);\r\n            const row = parseInt(data.rowIndex)\r\n            const col = parseInt(data.colIndex)\r\n            const color = data.color\r\n\r\n            if (!isNaN(row) && !isNaN(col) && row >= 0 && row < 5 && col >= 0 && col < 5 && color) {\r\n                setGridColors((prev) => {\r\n                    const newGrid = prev.map((rowArray) => [...rowArray]);\r\n                    newGrid[row][col] = colorMap[color];\r\n                    return newGrid;\r\n                });\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            unsubscribePlayers();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeCorrect = listenToCorrectRow(\r\n      roomId,\r\n      (data) => {\r\n        console.log(\"isInitialCall\", isInitialCall);\r\n\r\n        if (isInitialCall) {\r\n          isInitialCall = false;\r\n          return; // Skip the initial snapshot\r\n        }\r\n\r\n        const audio = sounds['correct_2'];\r\n        if (audio) {\r\n          audio.play();\r\n        }\r\n\r\n        console.log(\"isInitialCall after\", isInitialCall);\r\n        let rowIndex = -1;\r\n        let colIndex = -1;\r\n        console.log(\"grid\", grid);\r\n\r\n        for (let row = 0; row < grid.length; row++) {\r\n          for (let col = 0; col < grid[row].length; col++) {\r\n            if (grid[row][col] === `number${data.selected_row_number}`) {\r\n              rowIndex = row;\r\n              colIndex = col;\r\n              break;\r\n            }\r\n          }\r\n          if (rowIndex !== -1) break;\r\n        }\r\n\r\n        if (rowIndex === -1 || colIndex === -1) {\r\n          console.warn(`Number cell number${data.selected_row_number} not found`);\r\n          return;\r\n        }\r\n\r\n        revealCellsForPlayer(rowIndex, colIndex, \"correct\", data.selected_row_number, data.marked_character_index, data.is_row, undefined, data.correct_answer);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribeCorrect();\r\n    };\r\n  }, [roomId, grid]);\r\n\r\n  useEffect(() => {\r\n    let isInitialCall = true;\r\n    const unsubscribeIncorrect = listenToIncorrectRow(roomId, (data) => {\r\n      if (isInitialCall) {\r\n        isInitialCall = false;\r\n        return; // Skip the initial snapshot\r\n      }\r\n\r\n      const audio = sounds['wrong_2'];\r\n      if (audio) {\r\n        audio.play();\r\n      }\r\n      let rowIndex = -1;\r\n      let colIndex = -1;\r\n      for (let row = 0; row < grid.length; row++) {\r\n        for (let col = 0; col < grid[row].length; col++) {\r\n          if (grid[row][col] === `number${data.selected_row_number}`) {\r\n            rowIndex = row;\r\n            colIndex = col;\r\n            break;\r\n          }\r\n        }\r\n        if (rowIndex !== -1) break;\r\n      }\r\n\r\n      if (rowIndex === -1 || colIndex === -1) {\r\n        console.warn(`Number cell number${data.selected_row_number} not found`);\r\n        return;\r\n      }\r\n\r\n      revealCellsForPlayer(rowIndex, colIndex, \"incorrect\", data.selected_row_number, [], data.is_row, data.word_length);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribeIncorrect();\r\n    };\r\n  }, [roomId, grid]);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}